{
	"info": {
		"_postman_id": "95dad7a5-1ff2-47a5-b4f9-2cba3bdd0e61",
		"name": "pc_uniconfig_ifc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 IFC CRUD",
			"description": null,
			"item": [
				{
					"name": "XR6 IFC CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6184ebe8-f1a5-4999-9300-a758453dbcb6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\nsampler-map {{flow_prereq_sampler1}}1\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}2\nrandom 1 out-of 10\nexit\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "352d3894-8a45-4064-a385-2e100de5b20d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 IFC CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2be6e05d-f170-481e-8d52-974a3f73c2f5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\nno sampler-map {{flow_prereq_sampler1}}1\nno sampler-map {{flow_prereq_sampler2}}2\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 IFC CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 IFC CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"/* -- see MCCAS-40",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"*/",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 IFC-FULL CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 IFC-FULL CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"mtu\": {{eth_mtu}},\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 IFC-ACL CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 IFC-ACL CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Create inacl1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name1}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n            \t\"name\": \"{{iacl_in-acl-name1}}\",\n            \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": \"10\",\n                        \"config\": {\n                            \"sequence-id\": \"10\"\n                        },\n                        \"ipv4\": {\n                            \"config\": {\n                            \t\"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                            \t\"source-address\": \"0.0.0.0/0\",\n                            \t\"destination-address\": \"0.0.0.0/0\"\n                        \t}\n                        },\n                        \"actions\": {\n                            \"config\": {\n                            \t\"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                        \t}\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name1}}/frinx-openconfig-acl:ACL_IPV4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_in-acl-name1}}",
										"frinx-openconfig-acl:ACL_IPV4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create inacl2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-set\": [\n        {\n            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n            \"name\": \"{{iacl_in-acl-name2}}\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name2}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 2,\n                        \"ipv6\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                \"source-address\": \"10:11:12::2/128\",\n                                \"destination-address\": \"::/0\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 2\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name2}}/frinx-openconfig-acl:ACL_IPV6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_in-acl-name2}}",
										"frinx-openconfig-acl:ACL_IPV6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create outacl1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-set\": [\n        {\n            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n            \"name\": \"{{iacl_out-acl-name1}}\",\n            \"config\": {\n                \"name\": \"{{iacl_out-acl-name1}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 5,\n                        \"ipv6\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                \"source-address\": \"10:11:12::2/128\",\n                                \"destination-address\": \"::/0\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 5\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_out-acl-name1}}/frinx-openconfig-acl:ACL_IPV6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_out-acl-name1}}",
										"frinx-openconfig-acl:ACL_IPV6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create outacl2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_out-acl-name2}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n            \t\"name\": \"{{iacl_out-acl-name2}}\",\n            \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": \"3\",\n                        \"config\": {\n                            \"sequence-id\": \"3\"\n                        },\n                        \"ipv4\": {\n                            \"config\": {\n                            \t\"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                            \t\"source-address\": \"1.1.1.1/32\",\n                            \t\"destination-address\": \"2.2.2.2/32\"\n                        \t}\n                        },\n                        \"actions\": {\n                            \"config\": {\n                            \t\"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                        \t}\n                        },\n                        \"transport\": {\n                            \"config\": {\n                                \"source-port\": \"1024\",\n                                \"destination-port\": \"0\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_out-acl-name2}}/frinx-openconfig-acl:ACL_IPV4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_out-acl-name2}}",
										"frinx-openconfig-acl:ACL_IPV4"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 access-list inacl1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list inacl1\");",
											"    });",
											"    pm.test('dryrun - contains ipv6 access-list inacl2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list inacl2\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 access-list outacl2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list outacl2\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 access-list outacl2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list outacl1\");",
											"    });",
											"    pm.test('dryrun - contains 10 deny ipv4 0.0.0.0/0 0.0.0.0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"10 deny ipv4 0.0.0.0/0 0.0.0.0/0\");",
											"    });",
											"    pm.test('dryrun - contains 3 permit tcp 1.1.1.1/32 eq 1024 2.2.2.2/32 eq 0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"3 permit tcp 1.1.1.1/32 eq 1024 2.2.2.2/32 eq 0\");",
											"    });",
											"    pm.test('dryrun - contains 2 deny udp 10:11:12::2/128  ::/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"2 deny udp 10:11:12::2/128  ::/0\");",
											"    });",
											"    pm.test('dryrun - contains 5 deny ipv6 10:11:12::2/128 ::/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"5 deny ipv6 10:11:12::2/128 ::/0\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC-ACL CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "Delete inacl1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name1}}/frinx-openconfig-acl:ACL_IPV4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_in-acl-name1}}",
										"frinx-openconfig-acl:ACL_IPV4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete inacl2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name2}}/frinx-openconfig-acl:ACL_IPV6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_in-acl-name2}}",
										"frinx-openconfig-acl:ACL_IPV6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete outacl1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_out-acl-name1}}/frinx-openconfig-acl:ACL_IPV6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_out-acl-name1}}",
										"frinx-openconfig-acl:ACL_IPV6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete outacl2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_out-acl-name2}}/frinx-openconfig-acl:ACL_IPV4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"acl-sets",
										"acl-set",
										"{{iacl_out-acl-name2}}",
										"frinx-openconfig-acl:ACL_IPV4"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 access-list inacl1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list inacl1\");",
											"    });",
											"    pm.test('dryrun - contains ipv6 access-list inacl2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list inacl2\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 access-list outacl2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list outacl2\");",
											"    });",
											"    pm.test('dryrun - contains ipv6 access-list outacl1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list outacl1\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos IFC CRUD",
			"description": null,
			"item": [
				{
					"name": "Junos IFC CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"pm.test(\"Description not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"description\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos IFC-ACL CRUD",
			"description": null,
			"item": [
				{
					"name": "Junos IFC-ACL CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create ifc acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset firewall family inet filter {{iacl_in-acl-name1}} term term1 from address 20.20.20.21/32\nset firewall family inet filter {{iacl_in-acl-name2}} term term2 from address 20.20.20.22/32\nset firewall family inet filter {{iacl_out-acl-name1}} term term3 from address 20.20.20.23/32\nset firewall family inet filter {{iacl_out-acl-name2}} term term4 from address 20.20.20.24/32\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC-ACL CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete ifc acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete firewall\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "IFC-ACL CRUD",
					"description": null,
					"item": [
						{
							"name": "IFC-ACL CRUD Full",
							"description": null,
							"item": [
								{
									"name": "create acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV6\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c28825b2-84e0-41a7-9599-be9a4cbafd64",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "245f261c-ac5e-43ff-a000-15f2b37d3158",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl type = frinx-openconfig-acl:ACL_IPV6 \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"pm.test(\"Validate ingress acl type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV6\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV6\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdcbf54d-a452-43f4-a78b-9ea915b8e56b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv6 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv6 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-group inacl2 ingress\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37d1ab08-0bc8-4aed-a312-21aa9253b233",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db05bf5d-4e3e-4b24-9d8e-e5d43b2ca16e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv6 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv6 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "77fd3ff0-4c81-4102-a319-f1934017373a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC-ACL CRUD Parts",
							"description": null,
							"item": [
								{
									"name": "create acl ingress egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV6\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2f37b7b-c74e-4f41-b4cd-ba3aad64cd9a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3def9087-8f70-44ea-abb6-f7f88d9b89df",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "210ee96f-f7ee-46f9-a0f5-6150b0dd6ad9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1dc99075-2812-437c-b099-4b614bec77d0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}",
												"egress-acl-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "update egress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efdffe4f-00ae-4921-a5af-4b03e7687e15",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv6 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv6 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1736b85-2f4c-4664-bcce-422351c9f332",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update egress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV6\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV6\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}",
												"ingress-acl-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ingress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd971902-d2d3-499b-9070-196eb4eec3fd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-group inacl2 ingress\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f06c4ca-c037-4b11-9b93-43fcd4d6ea38",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ingress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d9e58dc-df08-4539-9417-e3388e07fe29",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "16edbf6a-b323-4c52-bf2b-d504f9a50b81",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ingress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}",
												"ingress-acl-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ingress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7c0da3a-7001-4a7b-9e26-4e0a6d12c16d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv6 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv6 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3a4d10e-6e9b-4f84-ae9b-775809ba8642",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ingress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted ingress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete egress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}",
												"egress-acl-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete egress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3110e4f8-5682-443a-9ad5-3b6b95c26047",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a9fa28a5-8683-42d9-8f75-cede4518c37a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete egress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted egress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"egress-acl-sets\")",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{iacl_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC-ACL CRUD Acl-sets",
							"description": null,
							"item": [
								{
									"name": "create acl TEST1 ip protocol",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 6,\n                        \"ipv4\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                \"destination-address\": \"2.2.2.2/32\",\n                                \"source-address\": \"1.1.1.1/32\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 6\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 6 deny ipv4 1.1.1.1/32 2.2.2.2/32', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"6 deny ipv4 1.1.1.1/32 2.2.2.2/32\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl ip protocol",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(6);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(6);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 2.2.2.2/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"2.2.2.2/32\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_PROTOCOL\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_PROTOCOL\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 1.1.1.1/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"1.1.1.1/32\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 icmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 5,\n                        \"ipv4\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                \"destination-address\": \"2.2.2.2/32\",\n                                \"source-address\": \"1.1.1.1/32\"\n                            }\n                        },\n                        \"frinx-acl-extension:icmp\": {\n                            \"config\": {\n                                \"msg-type\": 8\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 5\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains deny icmp 1.1.1.1/32 2.2.2.2/32', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"deny icmp 1.1.1.1/32 2.2.2.2/32\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated acl icmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 5\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(5);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 5\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(5);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 2.2.2.2/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"2.2.2.2/32\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
													"});",
													"//msg-type",
													"pm.test(\"Validate msg-type = 8\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(8);",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 1.1.1.1/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"1.1.1.1/32\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 icmp type",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 10,\n                        \"ipv4\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                \"destination-address\": \"1.1.1.1/32\",\n                                \"source-address\": \"2.2.2.2/32\",\n                                \"frinx-acl-extension:hop-range\": \"3..6\"\n                            }\n                        },\n                        \"frinx-acl-extension:icmp\": {\n                            \"config\": {\n                                \"msg-type\": 123\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 10\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                            }\n                        }\n\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 10 permit icmp 2.2.2.2/32 1.1.1.1/32 123 ttl range 3 6', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"10 permit icmp 2.2.2.2/32 1.1.1.1/32 123 ttl range 3 6\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated TEST1 icmp type",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(10);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(10);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 1.1.1.1/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"1.1.1.1/32\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
													"});",
													"//msg-type",
													"pm.test(\"Validate msg-type = 123\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(123);",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 2.2.2.2/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"2.2.2.2/32\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:ACCEPT \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//frinx-acl-extension:hop-range",
													"pm.test(\"Validate frinx-acl-extension:hop-range = 3..6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"3..6\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 to ipv6 udp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 10,\n                        \"ipv6\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                \"destination-address\": \"10:11:12::2/128\",\n                                \"source-address\": \"100:1:1:2:3::1/128\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 10\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                            }\n                        },\n                         \"transport\": {\n                            \"config\": {\n                                \"source-port\": \"1024\",\n                                \"destination-port\": \"0\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 10 permit udp 100:1:1:2:3::1/128 eq 1024 10:11:12::2/128 eq 0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"10 permit udp 100:1:1:2:3::1/128 eq 1024 10:11:12::2/128 eq 0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated TEST1 ipv6 udp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(10);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(10);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"10:11:12::2/128\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 100:1:1:2:3::1/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"100:1:1:2:3::1/128\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:ACCEPT \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//destination-port",
													"pm.test(\"Validate destination-port =0 \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(0);",
													"});",
													"//source-port",
													"pm.test(\"Validate source-port = 1024\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(1024);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 to ipv6 tcp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 33,\n                        \"ipv6\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                \"destination-address\": \"100:1:1:2:3::1/128\",\n                                \"source-address\": \"10:11:12::2/128\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 33\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        },\n                        \"transport\": {\n                            \"config\": {\n                                \"source-port\": \"1024..6553\",\n                                \"destination-port\": \"ANY\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 33 deny tcp 10:11:12::2/128 range 1024 6553 100:1:1:2:3::1/128', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"33 deny tcp 10:11:12::2/128 range 1024 6553 100:1:1:2:3::1/128\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated TEST1 ipv6 tcp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(33);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(33);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 100:1:1:2:3::1/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"100:1:1:2:3::1/128\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_TCP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"10:11:12::2/128\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//destination-port",
													"pm.test(\"Validate destination-port =ANY \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
													"});",
													"//source-port",
													"pm.test(\"Validate source-port = 1024..6553\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"1024..6553\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 to ipv6 tcp transport",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 33,\n                        \"ipv6\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                \"destination-address\": \"100:1:1:2:3::1/128\",\n                                \"source-address\": \"10:11:12::2/128\"\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 33\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                            }\n                        },\n                        \"transport\": {\n                            \"config\": {\n                                \"source-port\": \"1024..6553\",\n                                \"destination-port\": \"4..1023\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 33 deny tcp 10:11:12::2/128 range 1024 6553 100:1:1:2:3::1/128 range 4 1023', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"33 deny tcp 10:11:12::2/128 range 1024 6553 100:1:1:2:3::1/128 range 4 1023\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated TEST1 ipv6 tcp transport",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(33);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(33);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 100:1:1:2:3::1/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"100:1:1:2:3::1/128\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_TCP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"10:11:12::2/128\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//destination-port",
													"pm.test(\"Validate destination-port =4..1023 \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"4..1023\");",
													"});",
													"//source-port",
													"pm.test(\"Validate source-port = 1024..6553\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"1024..6553\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "update acl TEST1 to ipv4 udp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acl-set\": [\n        {\n            \"name\": \"{{iacl_in-acl-name3}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            },\n            \"acl-entries\": {\n                \"acl-entry\": [\n                    {\n                        \"sequence-id\": 4,\n                        \"ipv4\": {\n                            \"config\": {\n                                \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                \"frinx-acl-extension:source-address-wildcarded\": {\n                                    \"wildcard-mask\": \"0.255.255.255\",\n                                    \"address\": \"0.0.0.0\"\n                                },\n                                \"frinx-acl-extension:destination-address-wildcarded\": {\n                                    \"wildcard-mask\": \"0.255.255.255\",\n                                    \"address\": \"0.0.0.0\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"sequence-id\": 4\n                        },\n                        \"transport\": {\n                            \"config\": {\n                                \"source-port\": 10,\n                                \"destination-port\": \"10..65535\"\n                            }\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 4 permit udp 0.0.0.0 0.255.255.255 eq 10 0.0.0.0 0.255.255.255 gt 10', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"4 permit udp 0.0.0.0 0.255.255.255 eq 10 0.0.0.0 0.255.255.255 gt 10\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated TEST1 ipv4 udp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(4);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 33\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(4);",
													"});",
													"//destination-address",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
													"});",
													"",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
													"});",
													"",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_TCP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
													"});",
													"",
													"pm.test(\"Validate source-address = 10:11:12::2/128\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"0.0.0.0\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//destination-port",
													"pm.test(\"Validate destination-port =4..1023 \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"10..65535\");",
													"});",
													"//source-port",
													"pm.test(\"Validate source-port = 1024..6553\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(10);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete TEST1 ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains no 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no 4\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted acl TEST1 ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete TEST1 ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv6 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains no 33', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no 33\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted acl TEST1 ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "create acl TEST1 ipv6 icmp 133",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"config\": {\n                    \"name\": \"{{iacl_in-acl-name3}}\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 40,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/8\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 40\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/0\",\n                                    \"source-address\": \"::/0\",\n                                    \"frinx-acl-extension:hop-range\": \"0..254\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 133\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 50,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 50\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 20,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"destination-address\": \"2400:2000:3::/48\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 20\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 30,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 30\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"name\": \"inacl2\",\n                \"config\": {\n                    \"name\": \"inacl2\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 2,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"source-address\": \"10:11:12::2/128\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 2\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"name\": \"outacl2\",\n                \"config\": {\n                    \"name\": \"outacl2\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 3,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"source-address\": \"1.1.1.1/32\",\n                                    \"destination-address\": \"2.2.2.2/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 3\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": 1024,\n                                    \"destination-port\": 0\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"name\": \"outacl1\",\n                \"config\": {\n                    \"name\": \"outacl1\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 5,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                    \"source-address\": \"10:11:12::2/128\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 5\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"name\": \"inacl1\",\n                \"config\": {\n                    \"name\": \"inacl1\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8208546-555f-4343-9918-8d0db8d3dd30",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv6 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 10 deny icmpv6 ::/0 ::/0 133 ttl lt 255', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"10 deny icmpv6 ::/0 ::/0 133 ttl lt 255\");",
													"    });",
													"    pm.test('dryrun - contains 50 permit ipv6 ::/0 ::/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"50 permit ipv6 ::/0 ::/0\");",
													"    });",
													"    pm.test('dryrun - contains 20 deny ipv6 ::/0 2400:2000:3::/48 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"20 deny ipv6 ::/0 2400:2000:3::/48\");",
													"    });",
													"    pm.test('dryrun - contains 30 permit icmpv6 ::/0 ::/0  ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"30 permit icmpv6 ::/0 ::/0\");",
													"    });",
													"    pm.test('dryrun - contains 40 deny ipv6 ::/8 ::/0  ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"40 deny ipv6 ::/8 ::/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl TEST1 ipv6 icmp 133",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2c2e6a8-cabf-4329-b69e-356ad409b149",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(40);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/8\");",
													"});",
													"//msg-type",
													"pm.test(\"Validate msg-type = 133\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(133);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(10);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(10);",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
													"});",
													"//frinx-acl-extension:hop-range",
													"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(50);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(50);",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(20);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(20);",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"2400:2000:3::/48\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = ::/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(30);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 30\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(30);",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = ::/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = ::/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "create acl TEST1 ipv4 icmp 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"{{iacl_in-acl-name3}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"config\": {\n                    \"name\": \"{{iacl_in-acl-name3}}\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"0.0.0.0/0\",\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"frinx-acl-extension:hop-range\": \"0..254\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 10\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"name\": \"inacl2\",\n                \"config\": {\n                    \"name\": \"inacl2\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 2,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"source-address\": \"10:11:12::2/128\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 2\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"name\": \"outacl2\",\n                \"config\": {\n                    \"name\": \"outacl2\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 3,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"source-address\": \"1.1.1.1/32\",\n                                    \"destination-address\": \"2.2.2.2/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 3\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": 1024,\n                                    \"destination-port\": 0\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"name\": \"outacl1\",\n                \"config\": {\n                    \"name\": \"outacl1\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 5,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                    \"source-address\": \"10:11:12::2/128\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 5\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"name\": \"inacl1\",\n                \"config\": {\n                    \"name\": \"inacl1\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_PROTOCOL\",\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "updated dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "414afbdc-816c-4b3d-beb4-058f555e31af",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains 10 deny icmp 0.0.0.0/0 0.0.0.0/0 10 ttl lt 255', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"10 deny icmp 0.0.0.0/0 0.0.0.0/0 10 ttl lt 255\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl TEST1 ipv4 icmp 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eb64001-d484-4141-b015-749b7239efca",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//msg-type",
													"pm.test(\"Validate msg-type = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(10);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(10);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
													"});",
													"//protocol",
													"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
													"});",
													"//frinx-acl-extension:hop-range",
													"pm.test(\"Validate frinx-acl-extension:hop-range = 0..254\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:DROP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete TEST1 ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a11ab7c5-92f4-4494-9927-3b0760dacdc7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-list TEST1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-list TEST1\");",
													"    });",
													"    pm.test('dryrun - contains no 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no 10\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC-ACL CRUD Sync-Set",
							"description": null,
							"item": [
								{
									"name": "create ipv4 ACL",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     ipv4 access-list {{iacl_in-acl-name3}}\n     deny ipv4 0.0.0.0 0.255.255.255 any\n     permit ipv4 any any\n     commit\n     end\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ipv4 ACL",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no ipv4 access-list {{iacl_in-acl-name3}}\n     commit\n     end\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "372d7d47-dc55-4342-896c-9b4f3deb3b9b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate-diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3068f6e-7e41-404d-b184-2a1574124834",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e04a348-bae7-4f2f-8335-4f8057a70c82",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4c04e14-b000-406f-a314-2259c14410c9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \"node\": [\n        \"{{node_id}}\"\n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34763463-8508-4e83-9192-212e8b23afb1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created acl ip protocol",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//sequence-id config",
													"pm.test(\"Validate config sequence-id = 20\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(20);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 20\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(20);",
													"});",
													"//destination-address",
													"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
													"});",
													"//source-address",
													"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:ACCEPT \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
													"});",
													"//type config",
													"pm.test(\"Validate config type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"iacl_in-acl-name3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"name\"]).to.eql(pm.environment.get(\"iacl_in-acl-name3\"));",
													"});",
													"pm.test(\"Validate config sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(10);",
													"});",
													"//sequence-id",
													"pm.test(\"Validate sequence-id = 10\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(10);",
													"});",
													"//source-address",
													"pm.test(\"Validate destination-address = 0.0.0.0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"0.0.0.0\");",
													"});",
													"//source-address",
													"pm.test(\"Validate wildcard-mask = 0.255.255.255\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
													"});",
													"//destination-address",
													"pm.test(\"Validate source-address = 1.1.1.1/32\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
													"});",
													"//forwarding-action",
													"pm.test(\"Validate forwarding-action =frinx-openconfig-acl:DROP\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete TEST1 ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted acl TEST1 ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/acl-set/{{iacl_in-acl-name3}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"acl-sets",
												"acl-set",
												"{{iacl_in-acl-name3}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC-FULL CRUD",
					"description": null,
					"item": [
						{
							"name": "create filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id_idx}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains dampening 1 750 2000 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2000 4\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 10 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 10 down 20\");",
											"    });",
											"    pm.test('dryrun - contains bundle id 151 mode on', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bundle id 151 mode on\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate hold-time down\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"pm.test(\"Validate hold-time up\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate damping suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress\")));",
											"});",
											"pm.test(\"Validate damping max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
											"});",
											"pm.test(\"Validate damping half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
											"});",
											"pm.test(\"Validate damping reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
											"});",
											"pm.test(\"Validate damping enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_idx\"));",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interface ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n        \t\"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca0a420a-578f-46e2-ae2a-fa713c752ba4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no bundle id', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bundle id\");",
											"    });",
											"    pm.test('dryrun - contains no lacp period short', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no lacp period short\");",
											"    });",
											"    pm.test('dryrun - contains dampening 1 750 2500 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2500 4\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 20 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 20 down 20\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"    pm.test('dryrun - contains ipv4 address 6.6.6.6 255.255.255.0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 address 6.6.6.6 255.255.255.0\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46dbf27c-8768-4534-8440-6ab982c7cadf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate hold-time down\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"pm.test(\"Validate hold-time up\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate damping suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress_upd\")));",
											"});",
											"pm.test(\"Validate damping max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
											"});",
											"pm.test(\"Validate damping half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
											"});",
											"pm.test(\"Validate damping reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
											"});",
											"pm.test(\"Validate damping enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC CRUD",
					"description": null,
					"item": [
						{
							"name": "IFC CRUD Config",
							"description": null,
							"item": [
								{
									"name": "update interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-interfaces:config\": {\n    \t\t\"type\": \"iana-if-type:ethernetCsmacd\",\n            \"mtu\": {{eth_mtu}},\n\t\t    \"description\": \"{{eth_description_upd}}\",\n            \"enabled\": {{eth_enabled_true}},\n            \"name\": \"{{eth_intf-id}}\"\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description_upd\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD HoldTime",
							"description": null,
							"item": [
								{
									"name": "create hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"hold-time"
											]
										}
									},
									"response": []
								},
								{
									"name": "create hold-time commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
													"});",
													"pm.test(\"Validate hold-time down\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
													"});",
													"pm.test(\"Validate hold-time up\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"hold-time"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
													"});",
													"pm.test(\"Validate hold-time down\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});",
													"pm.test(\"Validate hold-time up\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"hold-time"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Subinterface-IPv4",
							"description": null,
							"item": [
								{
									"name": "create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Subinterface-IPv6",
							"description": null,
							"item": [
								{
									"name": "create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length6}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ipv6\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ipv6\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length6\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6_upd}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6_upd}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length6_upd}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ipv6_upd\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ipv6_upd\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length6_upd\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Damping",
							"description": null,
							"item": [
								{
									"name": "create frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-damping:damping"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate damping suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress\")));",
													"});",
													"pm.test(\"Validate damping max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
													"});",
													"pm.test(\"Validate damping half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
													"});",
													"pm.test(\"Validate damping reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
													"});",
													"pm.test(\"Validate damping enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-damping:damping"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate damping suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress_upd\")));",
													"});",
													"pm.test(\"Validate damping max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
													"});",
													"pm.test(\"Validate damping half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
													"});",
													"pm.test(\"Validate damping reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse_upd\")));",
													"});",
													"pm.test(\"Validate damping enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-damping:damping"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Ethernet",
							"description": null,
							"item": [
								{
									"name": "create frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id_idx}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_idx\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id_upd_idx}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_upd_idx\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c06cfce4-5a03-4c39-9c07-1fa3e3f78996",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"//    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"//        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"//    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a5ce55e1-edb3-4808-8954-bb3cdbc19ed6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Statistics",
							"description": null,
							"item": [
								{
									"name": "create frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-cisco-if-extension:statistics"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate load-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_load_interval\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-cisco-if-extension:statistics"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate load-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_load_interval_upd\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-cisco-if-extension:statistics"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Flows",
							"description": null,
							"item": [
								{
									"name": "show no ETH IFC flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (delete ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow (deleted ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow (deleted ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-flows is not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ETH IFC netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted ETH IFC netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"//This should not be present",
													"pm.test(\"No IPv4 ingress flow present\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  var is_ipv4_ingress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      is_ipv4_ingress = true;",
													"    }",
													"  }",
													"  if (is_ipv4_ingress) {",
													"    pm.expect.fail(null,null,'An ipv4 ingress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no ETH IFC flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Acls",
							"description": null,
							"item": [
								{
									"name": "show no ETH IFC acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl second",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl second",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ingress-acl-set\": [\n        {\n            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv4_acl1}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv4_acl1}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status = fail\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status= fail\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 1; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (delete ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl (deleted ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl (deleted ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-acl-sets are  present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv6_acl2}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv6_acl2}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 ingress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 ingress-acl was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no ETH IFC acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Rpf",
							"description": null,
							"item": [
								{
									"name": "update interface rpf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\": {\n        \"ipv4\": {\n\t    \t\"rpf-check\": \"ANY\"\n\t    },\n\t   \"ipv6\": {\n\t\t\t\"rpf-check\": \"ANY\"\n\t    }\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:verify-unicast-source-reachable-via",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"frinx-cisco-if-extension:verify-unicast-source-reachable-via"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated IFC rpf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate rpf-check ipv4= ANY\", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv4\"][\"rpf-check\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate rpf-check ipv6= ANY \", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv6\"][\"rpf-check\"]).to.eql(\"ANY\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}