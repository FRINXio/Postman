{
	"info": {
		"_postman_id": "feb68a15-aa2b-4672-85a7-050ed13e93aa",
		"name": "pc_unative_RPC_commit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 Commit",
			"item": [
				{
					"name": "XR6 Commit Setup",
					"item": [
						{
							"name": "install XR6 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{xr_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 5,\n            \"netconf-node-topology:max-connection-attempts\": 1,\n            \"netconf-node-topology:connection-timeout-millis\": 60000,\n            \"netconf-node-topology:default-request-timeout-millis\": 60000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n            \"uniconfig-config:blacklist\": {\n                \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"],\n                \"extension\": [\n                    \"tailf:display-when false\"\n                ]\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "install XR6 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{xr2_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 5,\n            \"netconf-node-topology:max-connection-attempts\": 1,\n            \"netconf-node-topology:connection-timeout-millis\": 60000,\n            \"netconf-node-topology:default-request-timeout-millis\": 60000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n            \"uniconfig-config:blacklist\": {\n            \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"],\n\n                \"extension\": [\n                    \"tailf:display-when false\"\n                ]\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete loopback from R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete loopback from R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\") {",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"status\"]).to.eq(\"complete\")",
											"        });",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loopback from R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loopback from R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR6  Commit Teardown",
					"item": [
						{
							"name": "delete loopback from R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete loopback from R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loopback from R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loopback from R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall XR6 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"connection-type\": \"netconf\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"connection-type\": \"netconf\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "RPC commit all-routers",
					"item": [
						{
							"name": "configure loopback on R1 all router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure loopback on R2 all router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"var results = [];",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i = 0; i < result.length; i++){",
											"        results[i] = result[i][\"node-id\"];",
											"    }",
											"",
											"    ",
											"pm.test(\"Commited node R1 status: complete \", function () {",
											"    for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"node-id\"] == \"R1\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R1\");",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"            break;",
											"        }",
											"            var found = results.includes('R1');",
											"            pm.expect(found).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"pm.test(\"Commited node R2 status: complete \", function () {",
											"    for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"node-id\"] == \"R2\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R2\");",
											"            pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"            break;",
											"        }",
											"            var found = results.includes('R2');",
											"            pm.expect(found).to.be.true;",
											"",
											"    }",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check existing interface on oper R1 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Interface configuration \", function () {",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"active\"]).to.eql(\"act\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback123\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"description\"]).to.eql(\"description from uniconfig native\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"address\"]).to.eql(\"1.2.3.4\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"netmask\"]).to.eql(\"255.255.255.128\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"route-tag\"]).to.eql(22);",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-virtual\"]).to.eql([ null ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check existing interface on oper R2 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Interface configuration \", function () {",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"active\"]).to.eql(\"act\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback123\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"description\"]).to.eql(\"description from uniconfig native\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"address\"]).to.eql(\"1.2.3.4\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"netmask\"]).to.eql(\"255.255.255.128\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"route-tag\"]).to.eql(22);",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-virtual\"]).to.eql([ null ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface configuration on R1 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Interface configuration \", function () {",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"active\"]).to.eql(\"act\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback123\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"description\"]).to.eql(\"description from uniconfig native\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"address\"]).to.eql(\"1.2.3.4\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"netmask\"]).to.eql(\"255.255.255.128\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"route-tag\"]).to.eql(22);",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-virtual\"]).to.eql([ null ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface configuration on R2 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Interface configuration \", function () {",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"active\"]).to.eql(\"act\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback123\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"description\"]).to.eql(\"description from uniconfig native\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"address\"]).to.eql(\"1.2.3.4\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"netmask\"]).to.eql(\"255.255.255.128\");",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\"][\"addresses\"][\"primary\"][\"route-tag\"]).to.eql(22);",
											"    pm.expect(pm.response.json()[\"interface-configuration\"][0][\"interface-virtual\"]).to.eql([ null ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC commit no-change all-routers",
					"item": [
						{
							"name": "mount IOS XR netconf R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"R1\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:confirmed-commit-enabled\": false,\n      \"uniconfig-config:blacklist\": {\n          \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R1');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R1');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR netconf R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"R2\",\n      \"netconf-node-topology:host\": \"{{xr2_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:confirmed-commit-enabled\": false,\n      \"uniconfig-config:blacklist\": {\n          \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R2');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R2');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "show history R1 before commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// here count the commit number and store in a variable",
											"// this variable will be used to after to compere with the number of commits after the commit",
											"pm.environment.set(\"R1_commit_number_before\", pm.response.json()[\"cfg-hist-gl\"][\"record-type\"][1][\"record\"].length);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/R1/yang-ext:mount/Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"topology-netconf",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl"
									]
								}
							},
							"response": []
						},
						{
							"name": "show history R2 before commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// here count the commit number and store in a variable",
											"// this variable will be used to after to compere with the number of commits after the commit",
											"pm.environment.set(\"R2_commit_number_before\", pm.response.json()[\"cfg-hist-gl\"][\"record-type\"][1][\"record\"].length);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/R2/yang-ext:mount/Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"topology-netconf",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit no change all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eq(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show history R1 after commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"Nothing committed\"] = pm.response.json()[\"cfg-hist-gl\"][\"record-type\"][1][\"record\"].length === pm.environment.get(\"R1_commit_number_before\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/R1/yang-ext:mount/Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"topology-netconf",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl"
									]
								}
							},
							"response": []
						},
						{
							"name": "show history R2 after commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"tests[\"Nothing committed\"] = pm.response.json()[\"cfg-hist-gl\"][\"record-type\"][1][\"record\"].length === pm.environment.get(\"R2_commit_number_before\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/R2/yang-ext:mount/Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"topology-netconf",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-config-cfgmgr-exec-oper:cfg-hist-gl"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC commit bad-input",
					"item": [
						{
							"name": "configure loopback on R1 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure loopback on R2 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit  bad input R1 and R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var results = [];",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for (var i = 0; i < result.length; i++) {",
											"        results[i] = result[i][\"node-id\"];",
											"    }",
											"    ",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(results.length).to.eql(2);",
											"    })",
											"",
											"    pm.test(\"Commited node R1 status: fail\", function() {",
											"        for (var i = 0; i < result.length; i++) {",
											"            if (result[i][\"node-id\"] == \"R1\") {",
											"                pm.expect(result[i][\"node-id\"]).to.eql(\"R1\");",
											"                pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"                break;",
											"            }",
											"            var found = results.includes('R1');",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    pm.test(\"Commited node R2 status: fail\", function() {",
											"        for (var i = 0; i < result.length; i++) {",
											"            if (result[i][\"node-id\"] == \"R2\") {",
											"                pm.expect(result[i][\"node-id\"]).to.eql(\"R2\");",
											"                pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"                break;",
											"            }",
											"            var found = results.includes('R2');",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    pm.test(\"Commited node R3 status: fail\", function() {",
											"        for (var i = 0; i < result.length; i++) {",
											"            var found = results.includes('R3');",
											"            pm.expect(found).to.be.false;",
											"        }",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R3\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on oper R1 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on oper R2 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show no interface configuration on R1 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show no interface configuration on R2 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC commit bad-config-one-router",
					"item": [
						{
							"name": "configure loopback on R1 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \n            \"mtus\": {\n                    \"mtu\": [{\n                           \"owner\": \"loopback\",\n                           \"mtu\": 1400\n                          }]\n            },\n\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure loopback on R2 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"    });",
											"",
											"    var results = [];",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for (var i = 0; i < result.length; i++) {",
											"        results[i] = result[i][\"node-id\"];",
											"    }",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(results.length).to.eql(2);",
											"    })",
											"    ",
											"    pm.test(\"Commited node R1 status: 'fail'\", function() {",
											"        for (var i = 0; i < result.length; i++) {",
											"            if (result[i][\"node-id\"] == \"R1\") {",
											"                pm.expect(result[i][\"node-id\"]).to.eql(\"R1\");",
											"                pm.expect(result[i][\"configuration-status\"]).to.eql(\"fail\");",
											"                pm.expect(result[i][\"error-type\"]).to.eql(\"processing-error\");",
											"                pm.expect(result[i][\"rollback-status\"]).to.eql(\"complete\");",
											"                pm.expect(result[i][\"error-message\"]).to.contain(\"This operation is not supported: The interface owner has not registered support for MTU\");",
											"                break;",
											"            }",
											"            var found = results.includes('R1');",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"",
											"    pm.test(\"Commited node R2 status: 'complete'\", function() {",
											"        for (var i = 0; i < result.length; i++) {",
											"            if (result[i][\"node-id\"] == \"R2\") {",
											"                pm.expect(result[i][\"node-id\"]).to.eql(\"R2\");",
											"                pm.expect(result[i][\"configuration-status\"]).to.eql(\"complete\");",
											"                pm.expect(result[i][\"rollback-status\"]).to.eql(\"complete\");",
											"                break;",
											"            }",
											"            var found = results.includes('R2');",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on R1 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on R2 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show  no interface configuration on R1 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "show  no interface configuration on R2 bad config one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC commit no-rollback",
					"item": [
						{
							"name": "configure loopback on R1 bad config no rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"mtus\": {\n                    \"mtu\": [{\n                           \"owner\": \"loopback\",\n                           \"mtu\": 1400\n                          }]\n            },\n\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure loopback on R2 no rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit no-rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"    });",
											"    pm.test(\"Validate configuration-status\", function() {",
											"        var jstring = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"        for (var i = 0; i < jstring.length; i++) {",
											"            if (jstring[i][\"node-id\"] === \"R1\") {",
											"                pm.expect(jstring[i][\"node-id\"]).to.eql(\"R1\");",
											"                pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
											"                pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"                //this is no rollback use case we do not expected to have rollback here",
											"                pm.expect(jstring[i][\"rollback-status\"]).to.not.exist",
											"                pm.expect(jstring[i][\"error-message\"]).to.contain(\"This operation is not supported: The interface owner has not registered support for MTU\")",
											"            }",
											"            if (jstring[i][\"node-id\"] === \"R2\") {",
											"                pm.expect(jstring[i][\"node-id\"]).to.eql(\"R2\");",
											"                pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
											"            }",
											"        }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n            \t\"do-rollback\": false,\n                \"target-nodes\": {\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on R1 no rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface on R2 no rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}