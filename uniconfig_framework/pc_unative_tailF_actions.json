{
	"info": {
		"_postman_id": "75605a11-b6e9-480c-b50e-2f350e522262",
		"name": "pc_unative_tailF_actions.json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Non null output non null input",
			"item": [
				{
					"name": "add new interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d95c28c5-fd24-468d-942a-3ad80bb2c8f6",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"tvi-0/3\",\n            \"description\": \"ESP Tunnel Interface for Provider Control VR\",\n            \"type\": \"p2mp-esp\",\n            \"enable\": true,\n            \"mode\": \"ipsec\",\n            \"unit\": [\n                {\n                    \"name\": 0,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"10.1.64.105/32\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/tvi=tvi-0%2F3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"tvi=tvi-0%2F3"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16774a30-2107-4747-a9b7-a9c926f3df1d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6fa63e8-226a-41c7-a883-3032c42a5b82",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"  pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: bring interface up",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a374d2f8-e54c-4c6d-91cf-361814c43f02",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"interfaces:output\"][\"interfaces:status\"]).to.eql(postman.getEnvironmentVariable(\"interfaces:status\"));",
									"  pm.expect(pm.response.json()[\"interfaces:output\"][\"interfaces:result\"]).to.eql(postman.getEnvironmentVariable(\"interfaces:result\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-up",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: create snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ed92d6-3c5b-4576-bddf-0af1058dcb11",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"system:output\"][\"system:status\"]).to.eql(postman.getEnvironmentVariable(\"system:status\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"description\": \"this is test\",\n        \"no-confirm\": [\n            null\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/system:system/create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"system:system",
								"create-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: traceroute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16de90b3-e8b2-40d2-bf4d-e6c4b5936dfc",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"diagnostics:output\"][\"diagnostics:status\"]).to.eql(postman.getEnvironmentVariable(\"diagnostics:status\"));",
									"  pm.expect(pm.response.json()[\"diagnostics:output\"][\"diagnostics:result\"].has(\"traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets\\n\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"hostname\": \"8.8.8.8\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/diagnostics:diagnostics/traceroute",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"diagnostics:diagnostics",
								"traceroute"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Not null output null input",
			"item": [
				{
					"name": "ACTION: list package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "759e0504-51d4-4458-b805-34befa76ab72",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with null input\", function() {",
									"",
									"            pm.expect(pm.response.json()[\"system:output\"][\"system:packages\"][0][\"name\"]).to.eql(\"versa-flexvnf-20200213-073051-47e18e0-20.2.1.deb\");",
									"            pm.expect(pm.response.json()[\"system:output\"][\"system:packages\"][1][\"name\"]).to.eql(\"versa-flexvnf-20200213-073051-47e18e0-20.2.1.bin\");",
									"        }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/system:system/package/list",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"system:system",
								"package",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Null output not null input",
			"item": [
				{
					"name": "ACTION: clear interface statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10c66ff2-f342-4d67-820f-258dbba68ec3",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate null output of tailf-action with non-null input\", function() {",
									"    pm.expect(responseBody!=null && responseBody.length==0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/clear:clear/interfaces:interfaces/statistics",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"clear:clear",
								"interfaces:interfaces",
								"statistics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Null output null input",
			"item": [
				{
					"name": "ACTION: clear statistics lacp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c6386b5-4d57-4e46-97fb-074be1a0a8cd",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate null output of tailf-action with null input\", function() {",
									"    pm.expect(responseBody!=null && responseBody.length==0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/clear:clear/interfaces:lacp/statistics",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"clear:clear",
								"interfaces:lacp",
								"statistics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bad action requests",
			"item": [
				{
					"name": "non existing action",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3efa8aa3-5a5e-4f36-8f89-30a2bbaf0a13",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking non existing action\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"]).to.include(postman.getEnvironmentVariable(\"bad-action-error-message\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"bad-action-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"bad-action-error-type\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"month\": \"April\",\n        \"year\": 2018,\n        \"percentile\": 50\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/foo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "action with missing mandatory field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b93f108d-0019-471d-b8af-f4a7aaea2a17",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking action with missing mandatory field\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-message\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-type\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-info\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-info\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-down",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-down"
							]
						}
					},
					"response": []
				},
				{
					"name": "action with extra field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef7c38d9-a7f2-4cd5-a82a-86f23f55e640",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking action with missing mandatory field\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"].has(postman.getEnvironmentVariable(\"missing-exception-error-message\")));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"missing-exception-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"missing-exception-error-type\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-info\"].has(postman.getEnvironmentVariable(\"missing-exception-error-info\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\",\n        \"foo\" : 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-up",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-up"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}