{
	"info": {
		"_postman_id": "4066d95c-5e87-4efa-abc1-7ba11dba8475",
		"name": "pc_unative_template_system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 Apply template",
			"item": [
				{
					"name": "XR6 Apply template Setup",
					"item": [
						{
							"name": "mount IOS XR netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}_1\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t    \"netconf-node-topology:dry-run-journal-size\": 180,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:blacklist\": {\n        \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR netconf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}_2\",\n      \"netconf-node-topology:host\": \"{{xr2_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t    \"netconf-node-topology:dry-run-journal-size\": 180,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:blacklist\": {\n        \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}_1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id}}",
										"node={{node_id}}_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua uniconfig available');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua2 status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua2 status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua2 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua2 unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr6ua2 uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr6ua2 uniconfig available');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR6 Apply template Teardown",
					"item": [
						{
							"name": "unmount IOS XR netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted IOS XR netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount IOS XR netconf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted IOS XR netconf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "VNF20 Apply template",
			"item": [
				{
					"name": "VNF20 Apply template Setup",
					"item": [
						{
							"name": "unmount VNF20 netconf before test starts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check VNF20 netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "mount VNF20 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"node\": [\n        {\n            \"node-id\": \"{{node_id}}_2\",\n            \"netconf-node-topology:host\": \"{{VNF20_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 5,\n            \"netconf-node-topology:max-connection-attempts\": 100,\n            \"netconf-node-topology:connection-timeout-millis\": 60000,\n            \"netconf-node-topology:default-request-timeout-millis\": 60000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n\t\t\t\"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n \t\t\t\"uniconfig-config:blacklist\": {\n\t           \"extension\": [\n\t\t\t\t\t\"tailf:display-when false\"\n\t           ]\n            }\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount VNF16 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Request data: \" + request.data.toString());",
											"//console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"node\": [\n        {\n            \"node-id\": \"{{node_id}}\",\n            \"netconf-node-topology:host\": \"{{VNF16_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 10,\n            \"netconf-node-topology:connection-timeout-millis\": 30000,\n            \"netconf-node-topology:default-request-timeout-millis\": 30000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n            \"netconf-node-topology:schema-cache-directory\": \"schemas\",\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n            \"uniconfig-config:blacklist\": {\n                \"uniconfig-config:extension\": [\n\t\t\t\"tailf:display-when false\"\n\t           ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check VNF20 ua connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    pm.test(\"Validate capability = tailf-netconf-with-transaction-id\", function() {",
											"    pm.expect(pm.response.json()[\"node\"][0][\"netconf-node-topology:unavailable-capabilities\"][\"unavailable-capability\"][0][\"capability\"]).to.eql(\"(http://tail-f.com/ns/netconf/with-transaction-id?revision=2018-11-23)tailf-netconf-with-transaction-id\");",
											"    });",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check VNF20 ua connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check all layers connected VNF20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-status",
											"pm.test(\"Validate overall-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = Success\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"status-message\"]).to.eql(\"Success\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = netconf\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"protocol\"]).to.eql(\"netconf\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = connected\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"connection-status\"]).to.eql(\"connected\");",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = created unified mountpoint\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"unified-layer\"][\"status-message\"]).to.eql(\"created unified mountpoint\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = installed\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"unified-layer\"][\"connection-status\"]).to.eql(\"installed\");",
											"});",
											"//node-id",
											"pm.test(\"Validate node-id = \" + pm.environment.get(\"node_id\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2\");",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = installed uniconfig node\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"uniconfig-layer\"][\"status-message\"]).to.eql(\"installed uniconfig node\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = installed \", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"uniconfig-layer\"][\"connection-status\"]).to.eql(\"installed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 60000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\"node\": [\"{{node_id}}_2\"]\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:show-connection-status",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:show-connection-status"
									]
								}
							},
							"response": []
						},
						{
							"name": "check VNF16 ua connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check VNF16 ua connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check all layers connected VNF16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-status",
											"pm.test(\"Validate overall-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = Success\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"status-message\"]).to.eql(\"Success\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = netconf\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"protocol\"]).to.eql(\"netconf\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = connected\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"southbound-layer\"][\"connection-status\"]).to.eql(\"connected\");",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = created unified mountpoint\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"unified-layer\"][\"status-message\"]).to.eql(\"created unified mountpoint\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = installed\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"unified-layer\"][\"connection-status\"]).to.eql(\"installed\");",
											"});",
											"//node-id",
											"pm.test(\"Validate node-id = \" + pm.environment.get(\"node_id\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
											"});",
											"//status-message",
											"pm.test(\"Validate status-message = installed uniconfig node\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"uniconfig-layer\"][\"status-message\"]).to.eql(\"installed uniconfig node\");",
											"});",
											"//connection-status",
											"pm.test(\"Validate connection-status = installed \", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"uniconfig-layer\"][\"connection-status\"]).to.eql(\"installed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 60000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:show-connection-status",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:show-connection-status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "VNF20 Apply template Teardown",
					"item": [
						{
							"name": "unmount VNF20 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check VNF20 netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}_2?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}_2"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount VNF16 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check VNF16 netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Apply template xr621-CRUD-template",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1757284974\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_1",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "datastore templates does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Before any template is put - Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"ipv4\",\n                  \"saf-name\":\"unicast\",\n                  \"topology-name\":\"default\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1980\",\n                                       \"as-index\":\"19801980\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1990\",\n                                       \"as-index\":\"19901990\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"33\",\n                     \"mid-threshold\":\"4\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"vrf_name STANO\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"template variable is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"      (m => m[\"vrf-name\"] === \"{$vrf-var}\");",
											"  pm.expect(vrf_objekt)",
											"    .to.be.an(\"object\", \"Could not find the vrf-name {$vrf-var}\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template portion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"configuration is empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template portion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"configuration is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"]).is.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template portion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.include(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include('{\"topology\":[{\"topology-id\":\"templates\"}]}');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"ipv4\",\n                  \"saf-name\":\"unicast\",\n                  \"topology-name\":\"default\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1980\",\n                                       \"as-index\":\"19801980\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1990\",\n                                       \"as-index\":\"19901990\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"33\",\n                     \"mid-threshold\":\"4\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"vrf_name STANO\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"template variable is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"      (m => m[\"vrf-name\"] === \"{$vrf-var}\");",
											"  pm.expect(vrf_objekt)",
											"    .to.be.an(\"object\", \"Could not find the vrf-name {$vrf-var}\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template - similar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"ipv4\",\n                  \"saf-name\":\"unicast\",\n                  \"topology-name\":\"default\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1980\",\n                                       \"as-index\":\"19801980\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1990\",\n                                       \"as-index\":\"19901990\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"33\",\n                     \"mid-threshold\":\"4\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"vrf_name STANO\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.templatesimilar/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.templatesimilar",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read template - both",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check template is present\", () => {",
											"    const node_objekt = jsonData[\"topology\"][0][\"node\"].find(m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt).to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"Check template is present\", () => {",
											"    const node_objekt = jsonData[\"topology\"][0][\"node\"].find(m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".templatesimilar\");",
											"    pm.expect(node_objekt).to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".templatesimilar\");",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template - similar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.templatesimilar",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.templatesimilar"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"Template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.include(pm.environment.get(\"node_id\") + \".templatesimilar\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "update template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"ipv4\",\n                  \"saf-name\":\"unicast\",\n                  \"topology-name\":\"default\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1111\",\n                                       \"as-index\":\"11111111\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"2222\",\n                                       \"as-index\":\"22222222\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"33\",\n                     \"mid-threshold\":\"4\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"vrf_name STANO\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Template is updated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"11111111\");",
											"});",
											"",
											"pm.test(\"Template is updated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"22222222\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"@\": {\n                \"template-tags:operation\": \"update\"\n            },\n\n\n            \"af\":[\n               {\n                  \"af-name\":\"ipv4\",\n                  \"saf-name\":\"unicast\",\n                  \"topology-name\":\"default\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1980\",\n                                       \"as-index\":\"19801980\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"33\",\n                     \"mid-threshold\":\"4\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"vrf_name STANO\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template3/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template3",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read template 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template3\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template3",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template3"
									]
								}
							},
							"response": []
						},
						{
							"name": "read all templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check template is present\", () => {",
											"    const node_objekt = jsonData[\"topology\"][0][\"node\"].find(m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt).to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"Check template is present\", () => {",
											"    const node_objekt = jsonData[\"topology\"][0][\"node\"].find(m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".template3\");",
											"    pm.expect(node_objekt).to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".template3\");",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template3",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template3"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template 4 - tag present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"@\": {\n                \"template-tags:operation\": \"update\"\n            },\n\n\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$as-xx-var}\",\n                                       \"as\":\"{$as-var}\",\n                                       \"as-index\":\"{$as-index-var}\",\n                                       \"stitching-rt\":\"{$stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var}\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template4/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository=schema-1757284974",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template4",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "schema-1757284974"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \".template4\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"template variable is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"      (m => m[\"vrf-name\"] === \"{$vrf-var}\");",
											"  pm.expect(vrf_objekt)",
											"    .to.be.an(\"object\", \"Could not find the vrf-name {$vrf-var}\");",
											"});",
											"",
											"pm.test(\"template tag is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"afs\"][\"@\"][\"template-tags:operation\"]).to.eql(\"update\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template4"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - tag should be present in template 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"template tag is present\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    const template_objekt = jsonData[\"topology\"][0][\"node\"].find",
											"        (m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".template4\");",
											"    pm.expect(template_objekt)",
											"      .to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".template4\");",
											"",
											"    const vrf_objekt = template_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"        (m => m[\"vrf-name\"] === \"{$vrf-var}\");",
											"    pm.expect(vrf_objekt)",
											"      .to.be.an(\"object\", \"Could not find the vrf-name {$vrf-var}\");",
											"",
											"    pm.expect(vrf_objekt[\"afs\"][\"@\"][\"template-tags:operation\"]).to.eql(\"update\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template4"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template4"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Template is updated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"11111111\");",
											"});",
											"",
											"pm.test(\"Template is updated\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"22222222\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "update template - add tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vrf\": [\n        {\n            \"@\": {\n                \"template-tags:operation\": \"create\"\n            },\n            \"#\": {\n                \"vrf-name\": \"{$vrf-var}\",\n                \"description\": \"vrf_name STANO\",\n                \"create\": [\n                    null\n                ],\n                \"afs\": {\n                    \"af\": [\n                        {\n                            \"af-name\": \"ipv4\",\n                            \"saf-name\": \"unicast\",\n                            \"topology-name\": \"default\",\n                            \"create\": [\n                                null\n                            ],\n                            \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\": {\n                                \"export-route-targets\": {\n                                    \"route-targets\": {\n                                        \"route-target\": [\n                                            {\n                                                \"type\": \"as\",\n                                                \"as-or-four-byte-as\": [\n                                                    {\n                                                        \"as-xx\": 0,\n                                                        \"as\": 1111,\n                                                        \"as-index\": 11111111,\n                                                        \"stitching-rt\": 0\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"import-route-targets\": {\n                                    \"route-targets\": {\n                                        \"route-target\": [\n                                            {\n                                                \"type\": \"as\",\n                                                \"as-or-four-byte-as\": [\n                                                    {\n                                                        \"as-xx\": 0,\n                                                        \"as\": 2222,\n                                                        \"as-index\": 22222222,\n                                                        \"stitching-rt\": 0\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                }\n                            },\n                            \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\": {\n                                \"mid-threshold\": 4,\n                                \"prefix-limit\": 33\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check template with tag is present\", () => {",
											"    const node_objekt = jsonData[\"topology\"][0][\"node\"].find(m => m[\"node-id\"] === pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt).to.be.an(\"object\", \"Could not find the template \" + pm.environment.get(\"node_id\") + \".template\");",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"]).is.not.empty;",
											"    pm.expect(node_objekt[\"frinx-uniconfig-topology:configuration\"][\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"@\"][\"template-tags:operation\"]).eql(\"create\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template xr621-NEG-test-template",
					"item": [
						{
							"name": "apply nonexisting template on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"error-message\"]).to.eql(\"Template with node ID 'xr6.template1' is not present in CONFIG datastore.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1757284974\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_1",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply existing template do not provide 1 param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"String substitution failed: Node \");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"has defined variable/s: '[description-var]', but there is not provided or default value for all of these variables\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-varx\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply existing template do not provide 2 params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"String substitution failed: Node \");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"has defined variable/s: '[mid-threshold-var]', but there is not provided or default value for all of these variables\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).not.to.include(\"has defined variable/s: '[description-var]', but there is not provided or default value for all of these variables\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-varx\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-varx\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply existing template do not provide 2 params for different devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"String substitution failed: Node \");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"has defined variable/s: '[mid-threshold-var]', but there is not provided or default value for all of these variables\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"String substitution failed: Node \");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"has defined variable/s: '[description-var]', but there is not provided or default value for all of these variables\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-varx\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-varx\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply existing template provide string param instead integer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][1][\"error-message\"]).to.include(\"it accepts only values with following YANG types:\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32x\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "delete template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template simple-test",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1757284974\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_1",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$export-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$export-rt-as-xx-var}\",\n                                       \"as\":\"{$export-rt-as-var}\",\n                                       \"as-index\":\"{$export-rt-as-index-var}\",\n                                       \"stitching-rt\":\"{$export-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"{$import-rt-type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\": \"{$import-rt-as-xx-var}\",\n                                       \"as\":\"{$import-rt-as-var}\",\n                                       \"as-index\":\"{$import-rt-as-index-var}\",\n                                       \"stitching-rt\": \"{$import-rt-stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var} FOR {$vrf-var} WHERE {$af-name-var}/{$saf-name-var}/{$topology-name-var}\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template1\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"export-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"import-rt-stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "show R1 (nonconfig)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R1 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check vrf name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R2 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check vrf name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template simple-tag-test",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1757284974\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_1/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_1",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"vrf\":[\n      {\n         \"vrf-name\":\"{$vrf-var}\",\n         \"afs\":{\n            \"@\": {\n                \"template-tags:operation\": \"delete\"\n            },\n\n\n            \"af\":[\n               {\n                  \"af-name\":\"{$af-name-var}\",\n                  \"saf-name\":\"{$saf-name-var}\",\n                  \"topology-name\":\"{$topology-name-var}\",\n                  \"Cisco-IOS-XR-ipv4-bgp-cfg:bgp\":{\n                     \"export-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                               {\n                                 \"type\":\"{$type-var}\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":\"{$as-xx-var}\",\n                                       \"as\":\"{$as-var}\",\n                                       \"as-index\":\"{$as-index-var}\",\n                                       \"stitching-rt\":\"{$stitching-rt-var}\"\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     },\n                     \"import-route-targets\":{\n                        \"route-targets\":{\n                           \"route-target\":[\n                              {\n                                 \"type\":\"as\",\n                                 \"as-or-four-byte-as\":[\n                                    {\n                                       \"as-xx\":0,\n                                       \"as\":\"1970\",\n                                       \"as-index\":\"19701970\",\n                                       \"stitching-rt\":0\n                                    }\n                                 ]\n                              }\n                           ]\n                        }\n                     }\n                  },\n                  \"Cisco-IOS-XR-ip-rib-cfg:maximum-prefix\":{\n                     \"prefix-limit\":\"{$prefix-limit-var}\",\n                     \"mid-threshold\":\"{$mid-threshold-var}\"\n                  },\n                  \"create\":[\n                     null\n                  ]\n               }\n            ]\n         },\n         \"create\":[\n            null\n         ],\n         \"description\":\"{$description-var}\"\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template5/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs/vrf=%7B%24vrf-var%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template5",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs",
										"vrf=%7B%24vrf-var%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}.template5\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf2}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv4\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf2\"\n                    }\n,\n                    {\n                        \"variable-id\": \"type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"as-var\",\n                        \"leaf-value\": \"1972\"\n                    },\n                    {\n                        \"variable-id\": \"as-index-var\",\n                        \"leaf-value\": \"19721972\"\n                    },\n                    {\n                        \"variable-id\": \"stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_1\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"vrf-var\",\n                        \"leaf-value\": \"{{l3_vpn_bgp_vrf}}\"\n                    },\n                    {\n                        \"variable-id\": \"af-name-var\",\n                        \"leaf-value\": \"ipv6\"\n                    },\n                    {\n                        \"variable-id\": \"saf-name-var\",\n                        \"leaf-value\": \"flow-spec\"\n                    },\n                    {\n                        \"variable-id\": \"topology-name-var\",\n                        \"leaf-value\": \"vrf1\"\n                    }\n,\n                    {\n                        \"variable-id\": \"type-var\",\n                        \"leaf-value\": \"as\"\n                    },\n                    {\n                        \"variable-id\": \"as-xx-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"as-var\",\n                        \"leaf-value\": \"1970\"\n                    },\n                    {\n                        \"variable-id\": \"as-index-var\",\n                        \"leaf-value\": \"19701970\"\n                    },\n                    {\n                        \"variable-id\": \"stitching-rt-var\",\n                        \"leaf-value\": \"0\"\n                    },\n                    {\n                        \"variable-id\": \"prefix-limit-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"mid-threshold-var\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description-var\",\n                        \"leaf-value\": \"32cccc\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "show R1 (nonconfig)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R1 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check vrf name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"",
											"pm.test(\"part with delete tag does not exist\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"      (m => m[\"vrf-name\"] === pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"    pm.expect(vrf_objekt).to.be.an(\"object\", \"Could not find the vrf-name \" + pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"    pm.expect(vrf_objekt.afs).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R2 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check vrf name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"][0][\"vrf-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
											"});",
											"",
											"pm.test(\"part with delete tag does not exist\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"Cisco-IOS-XR-infra-rsi-cfg:vrfs\"][\"vrf\"].find",
											"      (m => m[\"vrf-name\"] === pm.environment.get(\"l3_vpn_bgp_vrf2\"));",
											"    pm.expect(vrf_objekt).to.be.an(\"object\", \"Could not find the vrf-name \" + pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"    pm.expect(vrf_objekt.afs).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-infra-rsi-cfg:vrfs?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-infra-rsi-cfg:vrfs"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}.template5",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}.template5"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template vnf-version-drop",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": true,\n            \"unit\": [\n                {\n                    \"name\": 0,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"10.4.64.105/32\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"ipsec\",\n            \"type\": \"p2mp-esp\",\n            \"description\": \"test description\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 vni",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vni\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": true,\n            \"unit\": [\n                {\n                    \"name\": 2,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.5/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 2\n                },\n                {\n                    \"name\": 1,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.2/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 1\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatevni/frinx-uniconfig-topology:configuration/interfaces:interfaces/vni=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatevni",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"vni=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"node_id\") + \"_2.templatevni\");",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][1][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatevni\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][1][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatevni\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{ifvni_name2}}\"\n                    }\n\n                ]\n            },\n            {\n                \"uniconfig-node-id\": \"{{node_id}}\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{ifvni_name1}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "show R1 (nonconfig)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R1 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check vrf name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"interfaces:interfaces\"][\"vni\"][0][\"name\"]).to.eql(pm.environment.get(\"ifvni_name2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R1 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"vni\"][0][\"name\"]).to.eql(pm.environment.get(\"ifvni_name2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/vni={{ifvni_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"vni={{ifvni_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show R2 (config)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"vni\"][0][\"name\"]).to.eql(pm.environment.get(\"ifvni_name1\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/interfaces:interfaces/vni={{ifvni_name1_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"vni={{ifvni_name1_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 vni",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatevni",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatevni"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template vnf-CRUD-template",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"template variable is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"][\"tvi\"].find",
											"      (m => m[\"name\"] === \"{$name}\");",
											"  pm.expect(vrf_objekt)",
											"    .to.be.an(\"object\", \"Could not find the tvi name {$name}\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "attempt to modify template for vnf20 tvi with bad schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number} XXX\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}XXX",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}XXX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "attempt to create template for vnf20 tvi with bad schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}XXX",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}XXX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"template variable is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    const vrf_objekt = jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"][\"tvi\"].find",
											"      (m => m[\"name\"] === \"{$name}\");",
											"  pm.expect(vrf_objekt)",
											"    .to.be.an(\"object\", \"Could not find the tvi name {$name}\");",
											"});",
											"",
											"pm.test(\"only one template is present\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][1]).is.undefined;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"]).not.to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "update template - put will add container sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"interfaces:interfaces\"]).is.not.empty;",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"sfc:service-node-groups\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi + sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"]).not.to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Apply template vnf-leaf-list",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng (without tag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatesng\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"sfc:service-node-groups\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template - sng only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatesng\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"sfc:service-node-groups\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node=versa_2.templatesng",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node=versa_2.templatesng"
									]
								}
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).to.eql(\"default-sng\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - bad value xxxx for services variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"it accepts only values with following YANG types: [type: enumeration, constraints: [Enums[adc, cgnat, stateful-firewall, nextgen-firewall, ipsec, tdf, test, sdwan, secure-proxy, web-proxy-test]]]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": \"xxxx\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply template - bad value [ xxx ] for services variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"it accepts only values with following YANG types: [type: enumeration, constraints: [Enums[adc, cgnat, stateful-firewall, nextgen-firewall, ipsec, tdf, test, sdwan, secure-proxy, web-proxy-test]]]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": [ \"xxx\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply template - leaf-value key accepted instead leaf-list-values key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": \"cgnat\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - leaf-value key accepted instead leaf-list-values key - value is array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": [ \"cgnat\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template -  leaf-value-list key filled with simple value (bad)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-list-values\": \"cgnat\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply template -  leaf-value-list key with array value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-list-values\": [ \"cgnat\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add (besides cgnat) more values (cgnat included) to leaf-list fails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-message\"]).to.include(\"Error parsing input\");",
											"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-message\"]).to.include(\"has already set its value to 'cgnat'\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add (besides cgnat) more values (cgnat included) to leaf-list-values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-list-values\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"all configured services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).to.have.members([\"ipsec\", \"cgnat\", \"nextgen-firewall\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng (without tag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Apply template vnf-leaf-list-join",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng - demonstrate join of arrays",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services_part_1}{$services_part_2}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_multiply/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_multiply",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - leaf-value in-place of leaf-list-value works",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.warn(\"This should be fixed and work\");",
											"",
											"// no error present",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-value\": \"s\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"tateful-firewall\", \"dwan\", \"ecure-proxy\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check service-node-group three services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"stateful-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"secure-proxy\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - two leaf-list-values structures with unique memebers works",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.warn(\"This should be fixed and work\");",
											"",
											"// no error present",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-list-values\": [ \"s\", \"sd\", \"sec\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"tateful-firewall\", \"wan\", \"ure-proxy\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check service-node-group three services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"stateful-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"secure-proxy\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - two leaf-list-values structures with unique memebers works",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.warn(\"This should be fixed and work\");",
											"",
											"// no error present",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-list-values\": [ \"stateful-firewal\", \"sdwa\", \"secure-prox\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"l\", \"n\", \"y\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check service-node-group three services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"stateful-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"secure-proxy\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=mmmmm",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=mmmmm"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - in array must be sufficient number of unique values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to substitute values to leaf-list\");",
											"});",
											"",
											"pm.test(\"error-message present - the same values in array are taken as a only one value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"all input collections must have equal length\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-list-values\": [ \"s\", \"s\", \"s\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"tateful-firewall\", \"dwan\", \"ecure-proxy\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).not.to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check default service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).to.eql(\"default-sng\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - in array must be sufficient number of unique values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to substitute values to leaf-list\");",
											"});",
											"",
											"pm.test(\"error-message present - the same values in array are taken as a only one value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"all input collections must have equal length\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-list-values\": [ \"s\", \"sx\", \"s\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"stateful-firewall\", \"sdwan\", \"secure-proxy\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).not.to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check default service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).to.eql(\"default-sng\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - in array must be sufficient number of values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to substitute values to leaf-list\");",
											"});",
											"",
											"pm.test(\"error-message present - the same values in array are taken as a only one value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"all input collections must have equal length\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_multiply\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"mmmmm\"\n                    },\n                    {\n                        \"variable-id\": \"services_part_1\",\n                        \"leaf-list-values\": [\"s\"]\n                    },\n                    {\n                        \"variable-id\": \"services_part_2\",\n                        \"leaf-list-values\": [ \"tateful-firewall\", \"dwan\", \"ecure-proxy\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).not.to.eql(\"mmmmm\");",
											"});",
											"",
											"pm.test(\"check default service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).to.eql(\"default-sng\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_multiply",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_multiply"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"]).not.to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template vnf-escaping",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng - demonstrate escaping in variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$\\\\$name\\\\{1\\\\}}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$\\\\$services_part\\\\{\\\\}}\"\n                    ],\n                    \"id\": 0,\n                    \"description\": \"sss\"\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_varnameescaping/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_varnameescaping",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - no need to escape",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_varnameescaping\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"$name{1}\",\n                        \"leaf-value\": \"eeee\"\n                    },\n                    {\n                        \"variable-id\": \"$services_part{}\",\n                        \"leaf-list-values\": [ \"ipsec\", \"sdwan\", \"stateful-firewall\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"eeee\");",
											"});",
											"",
											"pm.test(\"all configured services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).to.have.members([\"ipsec\", \"sdwan\", \"stateful-firewall\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=eeee",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=eeee"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng - demonstrate escaping in variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$\\\\{\\\\$name\\\\}}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$\\\\{\\\\$services_part\\\\}}\"\n                    ],\n                    \"id\": 0,\n                    \"description\": \"sss\"\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_varnameescaping2/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_varnameescaping2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template2 - no need to escape",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_varnameescaping2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"{$name}\",\n                        \"leaf-value\": \"eeee3\"\n                    },\n                    {\n                        \"variable-id\": \"{$services_part}\",\n                        \"leaf-list-values\": [ \"ipsec\", \"sdwan\", \"stateful-firewall\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"eeee3\");",
											"});",
											"",
											"pm.test(\"all configured services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).to.have.members([\"ipsec\", \"sdwan\", \"stateful-firewall\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=eeee3",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=eeee3"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_varnameescaping",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_varnameescaping"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_varnameescaping2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_varnameescaping2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=eeee",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=eeee"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=eeee3",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=eeee3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Apply template vnf-leaf-list-tagged-templates",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng (without tag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatesng\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"sfc:service-node-groups\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template - sng only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\") + \"_2.templatesng\");",
											"});",
											"",
											"pm.test(\"configuration is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"node\"][0][\"frinx-uniconfig-topology:configuration\"][\"sfc:service-node-groups\"]).is.not.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node=versa_2.templatesng",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node=versa_2.templatesng"
									]
								}
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"sfc:service-node-groups\"][\"service-node-group\"][0][\"name\"]).to.eql(\"default-sng\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add (besides cgnat) more values (cgnat included) to leaf-list-values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-list-values\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group three services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"cgnat\");",
											"});",
											"",
											"pm.test(\"all configured services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).to.have.members([\"ipsec\", \"cgnat\", \"nextgen-firewall\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng (without tag) - more values in leaf list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services1}\",\n                        \"cgnat\",\n                        \"{$services2}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_mv/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_mv",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_mv\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"yyyy\"\n                    },\n                    {\n                        \"variable-id\": \"services1\",\n                        \"leaf-list-values\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services2\",\n                        \"leaf-list-values\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"yyyy\");",
											"});",
											"",
											"pm.test(\"check service-node-group three services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"cgnat\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=yyyy",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=yyyy"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_mv\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"zzzz\"\n                    },\n                    {\n                        \"variable-id\": \"services1\",\n                        \"leaf-list-values\": [  \"nextgen-firewall\", \"ipsec\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services2\",\n                        \"leaf-list-values\": [  \"tdf\", \"sdwan\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "leaf-list nemoze obsahovat duplicity\n12:53\na merge/update spaja podstromy, takze sa pokusa pridat do toho leaf-listu novy zaznam"
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"zzzz\");",
											"});",
											"",
											"pm.test(\"check service-node-group five services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"cgnat\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=zzzz",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=zzzz"
									]
								}
							},
							"response": []
						},
						{
							"name": "update template for sng - tag delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": {\n                        \"@\": {\n                            \"template-tags:operation\": \"delete\"\n                        },\n                        \"#\": [\n                            \"{$services}\"\n                        ]\n                    },\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"tag delete is present\", function () {",
											"    pm.expect(pm.response.text()).to.include('\"template-tags:operation\":\"delete\"');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"tag delete is present\", function () {",
											"    pm.expect(pm.response.text()).to.include('\"template-tags:operation\":\"delete\"');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node=versa_2.templatesng",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node=versa_2.templatesng"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": [ \"cgnat\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group services is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng TAG default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": [\n                        \"{$services}\"\n                    ],\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_C/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_C",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_C\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-value\": [ \"cgnat\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group service is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"][0]).to.eql(\"cgnat\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_C\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services\",\n                        \"leaf-list-values\": [ \"cgnat\", \"nextgen-firewall\", \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"cgnat\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng - service delete + service create tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": \n                        [\n                            {\n                            \"@\": {\n                                \"template-tags:operation\": \"delete\"\n                            },\n                            \"#\": \"{$services_D}\"\n                            },\n                            {\n                            \"@\": {\n                                \"template-tags:operation\": \"create\"\n                            },\n                            \"#\": \"{$services_C}\"\n                            }\n                            \n                            \n                        ]\n                    ,\n\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_D2/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_D2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - cannot create already created ipsec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to create data: data on the following path already exists\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"services[ipsec]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"cgnat\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_C\",\n                        \"leaf-list-values\": [ \"ipsec\", \"tdf\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"cgnat\"  ]\n                    },\n                    {\n                        \"variable-id\": \"services_C\",\n                        \"leaf-list-values\": [ \"sdwan\", \"tdf\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two older services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"});",
											"",
											"pm.test(\"check service-node-group two new services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});",
											"",
											"pm.test(\"check service-node-group one older services is not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.includes(\"cgnat\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": \n                        [\n                            {\n                            \"@\": {\n                                \"template-tags:operation\": \"delete\"\n                            },\n                            \"#\": \"{$services_D}\"\n                            }\n                            \n                        ]\n                    ,\n\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_D_only/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_D_only",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": \n                        [\n                            {\n                            \"@\": {\n                                \"template-tags:operation\": \"update\"\n                            },\n                            \"#\": \"{$services_U}\"\n                            }\n                            \n                            \n                        ]\n                    ,\n\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_U_only/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_U_only",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for sng create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"sfc:service-node-groups\": {\n            \"service-node-group\": [\n                {\n                    \"name\": \"{$name}\",\n                    \"type\": \"internal\",\n                    \"services\": \n                        [\n                            {\n                            \"@\": {\n                                \"template-tags:operation\": \"create\"\n                            },\n                            \"#\": \"{$services_C}\"\n                            }\n                            \n                            \n                        ]\n                    ,\n\n                    \"id\": 0\n                }\n            ]\n        }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_C_only/frinx-uniconfig-topology:configuration/sfc:service-node-groups?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_C_only",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template not existant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"error-message\"]).equals(\"Template with node ID 'versa_2.templatesng_D_onlyX' is not present in CONFIG datastore.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D_onlyX\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "apply template - D cgnat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"cgnat\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group four older services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"sdwan\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.to.includes(\"cgnat\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - D sdwan ipsec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"sdwan\",\"ipsec\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two older services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});",
											"",
											"pm.test(\"check service-node-group two older services are deleted\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.includes(\"ipsec\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.includes(\"sdwan\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template D xxxx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_D_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n                    {\n                        \"variable-id\": \"services_D\",\n                        \"leaf-list-values\": [ \"xxxx\"  ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template U secure-proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_U_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n\n                    {\n                        \"variable-id\": \"services_U\",\n                        \"leaf-list-values\": [ \"secure-proxy\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group - Updated secure-rpoxy not present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});",
											"",
											"pm.test(\"attempt to update non existant service failed silently\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).not.includes(\"secure-proxy\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template C secure-proxy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_C_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n\n                    {\n                        \"variable-id\": \"services_C\",\n                        \"leaf-list-values\": [ \"secure-proxy\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group - Created secure-rpoxy is present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two older services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});",
											"",
											"pm.test(\"check service-node-group one newly created services is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"secure-proxy\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template C secure-proxy (which exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to create data: data on the following path already exists\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"services[secure-proxy]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatesng_C_only\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"xxxx\"\n                    },\n\n                    {\n                        \"variable-id\": \"services_C\",\n                        \"leaf-list-values\": [ \"secure-proxy\" ]\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": []
						},
						{
							"name": "check sfc:service-node-group - Created secure-rpoxy is present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check service-node-group is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"name\"]).to.eql(\"xxxx\");",
											"});",
											"",
											"pm.test(\"check service-node-group two older services are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"nextgen-firewall\");",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"tdf\");",
											"});",
											"",
											"pm.test(\"check service-node-group one newly created services is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"service-node-group\"][0][\"services\"]).includes(\"secure-proxy\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/sfc:service-node-group=xxxx",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"sfc:service-node-group=xxxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/sfc:service-node-group=zzzz",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"sfc:service-node-group=zzzz"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service-node-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/sfc:service-node-groups/sfc:service-node-group=yyyy",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"sfc:service-node-groups",
										"sfc:service-node-group=yyyy"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_C_only",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_C_only"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_D_only",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_D_only"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_U_only",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_U_only"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_C",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_D2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_D2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for sng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatesng_mv",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatesng_mv"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"]).not.to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Apply template vnf-version-drop-more-params",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node=versa_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node=versa_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"errorAppTag=invalid-regular-expression\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}x\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"errorAppTag=invalid-regular-expression\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/20000\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"String substitution failed: Node\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"has defined variable/s: '[name-number]', but there is not provided or default value for all of these variables\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-numberx\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"it accepts only values with following YANG types: [type: uint16, constraints: [Range[[0..65535]], Range[[0..4095]]]]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"String substitution failed: Node\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"but there is not provided or default value for all of these variables\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"errorAppTag=invalid-regular-expression\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"4095\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "show interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"iftvi_name2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check default enable1 true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.true;",
											"});",
											"",
											"pm.test(\"check default enable2 true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}/unit=4095?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}",
										"unit=4095"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - provide not boolean value for enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"it accepts only values with following YANG types: [type: boolean, constraints: []]\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"falsex\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"falsex\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template - provide false for enable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "show interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": { \"0.0.0.0\", \"1.0.0.0\" }\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": { \"32\", \"31\" }\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template - utf8 in description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description &cacute; 0xC4 0x87 ćôŠ\"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"utf8 in description\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"description\"]).contains(\"ćôŠ\");",
											"});",
											"\"\""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - escaping in description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"\\\\{\\\\$description\\\\} = this is description for  \\\\{\\\\$name\\\\} + \\\\{\\\\$name-number\\\\} =\"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"utf8 in description\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"description\"]).contains(\"{$description} = this is description for  {$name} + {$name-number} = tvi-12/19999 4095\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr (merge)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description &cacute; 0xC4 0x87 ćôŠ\"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check the added ip4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"utf8 in description\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"description\"]).contains(\"ćôŠ\");",
											"});",
											"",
											"pm.test(\"two ipv4-addr\", function () {",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"1.0.0.0/32\"}');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add more ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"cannot be applied to leaf\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-list-values\": [ \"2.0.0.0\", \"3.0.0.0\", \"4.0.0.0\" ]\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-list-values\": [ \"22\", \"23\", \"24\" ]\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description &cacute; 0xC4 0x87 ćôŠ\"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "create template for vnf20 tvi - D address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"delete\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_D_address/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_D_address",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to delete other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_D_address\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description &cacute; 0xC4 0x87 ćôŠ\"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check the added ip4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check if name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"utf8 in description\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"tvi\"][0][\"description\"]).contains(\"ćôŠ\");",
											"});",
											"",
											"pm.test(\"two ipv4-addr - one deleted\", function () {",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"1.0.0.0/32\"}');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_D_address",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_D_address"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"check template is not present\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"node_id\") + \"_2.templatetvi\");",
											"});",
											"",
											"pm.test(\"configuration does not exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"topology\"][0][\"node\"]).not.to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Apply template vnf-exhaustive-tag-test1",
					"item": [
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"tvi-12/19999\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    },\n                    {\n                        \"variable-id\": \"enable1\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "create template for vnf20 tvi - ipv4 no tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_implicit_merge/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_implicit_merge",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_implicit_merge\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.21\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "merge: Merges with a node if it exists, otherwise creates the node."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 true\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.true;",
											"});",
											"",
											"pm.test(\"two ipv4-addr\", function () {",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"    //expected merge: Merges with a node if it exists",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"1.0.0.21/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"  console.log(unitName4095_objekt);",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  console.log(addr_objekt);",
											"",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 1.0.0.21/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_implicit_merge\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4094\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.22\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "merge: Merges with a node if it exists, otherwise creates the node."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"check enable1 false\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"enable\"]).to.false;",
											"});",
											"",
											"pm.test(\"check enable2 true\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"unit\"][0][\"enable\"]).to.true;",
											"});",
											"",
											"pm.test(\"two ipv4-addr\", function () {",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"    pm.expect(pm.response.text()).to.include('{\"addr\":\"1.0.0.21/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 1.0.0.21/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi - ipv4 merge tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"merge\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_merge/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_merge",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_merge\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.31\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"  pm.expect(addr_objekt2[\"@\"][\"template-tags:operation\"]).to.eql(\"merge\");",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to add other ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_merge\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.32\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"  pm.expect(addr_objekt[\"@\"][\"template-tags:operation\"]).to.eql(\"merge\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi - ipv4 replace tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"replace\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_replace/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_replace",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to replace existing  ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_replace\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.23\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to replace nonexisting  ipv4-addr - adding new ipv4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_replace\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.41\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi - ipv4 delete tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"delete\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_delete/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_delete",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to delete nonexistant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_delete\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.111\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to delete existant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_delete\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.21/32\");",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.21/32\");    ",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"    //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"    //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to delete existant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_delete\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.21\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi - ipv4 create tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"create\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_create/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_create",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to create existant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to create data: data on the following path already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_create\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.23\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template - attempt to create nonexistant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_create\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4095\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.51\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");",
											"  pm.expect(addr_objekt[\"@\"][\"template-tags:operation\"]).to.eql(\"merge\");",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"   //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi - ipv4 update tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unit\": [\n                {\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"update\"\n                                    },\n                                    \"#\": {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }    \n                                }\n                            ]\n                        }\n                    }\n                }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_update/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D/unit=%7B%24name-number%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_update",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D",
										"unit=%7B%24name-number%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to update exitant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_update\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.32\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly updated (tag is changed)\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt[\"@\"][\"template-tags:operation\"]).to.eql(\"update\");",
											"",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to update nonexistant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_update\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.61\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"   //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly updated (tag is changed)\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt[\"@\"][\"template-tags:operation\"]).to.eql(\"update\");",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template - attempt to update nonexistant ipv4-addr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_ipv4_update\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4094\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"1.0.0.61\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly updated (tag is changed)\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.32/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.32/32\");",
											"",
											"  pm.expect(addr_objekt[\"@\"][\"template-tags:operation\"]).to.eql(\"update\");",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_create",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_create"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_delete",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_merge",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_merge"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_implicit_merge",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_implicit_merge"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_update",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_update"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_ipv4_replace",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_ipv4_replace"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Apply template vnf-exhaustive-tag-test2",
					"item": [
						{
							"name": "prepare interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{{iftvi_name2}}\",\n            \"description\": \"this is description  tvi-12/19999 4095\",\n            \"type\": \"ipsec\",\n            \"enable\": false,\n            \"mode\": \"ipsec\",\n            \"unit\": [\n                {\n                    \"name\": 4095,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"1.0.0.23/32\"\n                                },\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"merge\"\n                                    },\n                                    \"addr\": \"1.0.0.31/32\"\n                                },\n                                {\n                                    \"addr\": \"1.0.0.41/32\"\n                                },\n                                {\n                                    \"addr\": \"1.0.0.51/32\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                {\n                    \"name\": 4094,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"1.0.0.22/32\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                {\n                    \"name\": 4093,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"@\": {\n                                        \"template-tags:operation\": \"update\"\n                                    },\n                                    \"addr\": \"1.0.0.32/32\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "find schema-cache-directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"get cache_dir env variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"cache_dir\", jsonData[\"netconf-node-topology:schema-cache-directory\"]);",
											"    if (jsonData[\"netconf-node-topology:schema-cache-directory\"] == \"schema-1779846763\") {",
											"        console.log(\"looks good\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node={{node_id}}_2/netconf-node-topology:schema-cache-directory",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=topology-netconf",
										"node={{node_id}}_2",
										"netconf-node-topology:schema-cache-directory"
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi merge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"merge\"\n                    },\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_M/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_M",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi replace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"replace\"\n                    },\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_R/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_R",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"delete\"\n                    },\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_D/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_D",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"create\"\n                    },\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_C/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_C",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"update\"\n                    },\n                    \"name\": \"{$name-number}\",\n                    \"enable\": \"{$enable2}\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_U/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_U",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create template for vnf20 tvi update2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"{$name}\",\n            \"enable\": \"{$enable1}\",\n            \"unit\": [\n                {\n                    \"@\": {\n                        \"template-tags:operation\": \"update\"\n                    },\n                    \"#\": {\n                        \"name\": \"{$name-number}\",\n                        \"enable\": \"{$enable2}\",\n                        \"family\": {\n                            \"inet\": {\n                                \"address\": [\n                                    {\n                                        \"addr\": \"{$ipv4-addr}/{$ipv4-prefix}\"\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"{$mode}\",\n            \"type\": \"{$type}\",\n            \"description\": \"{$description} {$name} {$name-number}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_U2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=%7B%24name%7D?uniconfig-schema-repository={{cache_dir}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_U2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi=%7B%24name%7D"
									],
									"query": [
										{
											"key": "uniconfig-schema-repository",
											"value": "{{cache_dir}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_D\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"0.0.0.0\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly deleted\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_C\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.10\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly created\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.10/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.10/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.10/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template C (create already existing)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:fail\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"",
											"pm.test(\"error-message present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"node-result\"][0][\"error-message\"]).to.include(\"Failed to create data: data on the following path already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_C\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.10\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "apply template U (enable2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_U\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"false\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.10\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"       //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly updated\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.false;   ",
											"  pm.expect(unitName4093_objekt[\"@\"][\"template-tags:operation\"]).eql(\"update\");   ",
											"",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.10/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.10/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.10/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template U (enable2 + ipv4-addr/ipv4-prefix changed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_U\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.20\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"20\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly updated\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											"  pm.expect(unitName4093_objekt[\"@\"][\"template-tags:operation\"]).eql(\"update\");   ",
											"",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.10/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.10/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.10/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								},
								"description": "a problem je v tom, ze sa nevytvori nova adresa pod \"address\" listom?\nano, problem je v tom, ze\naddress (cely list) zdedi update tag - podla tohto, by sa tam mala pridat adresa\naddress entry tiez zdedi ten update tag - pred tym, adresa neexistovala, takze ta adresa by sa tam nemala pridat\nniesom si ale s tym na 100% isty... asi sa budeme musiet spytat Versa-y, ako si oni predstavuju, ze to ma fungovat\nzatial predpokladajme, ze je to spravne naimplementovane - ta adresa sa tam nevytvori"
							},
							"response": []
						},
						{
							"name": "apply template U2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_U2\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.20\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"20\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly updated\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											"  pm.expect(unitName4093_objekt[\"@\"][\"template-tags:operation\"]).eql(\"update\");   ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.10/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.10/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.10/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template U nonexisting unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_U\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4092\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"3.0.0.30\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"30\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly updated\", () => {",
											"   //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											"  pm.expect(unitName4093_objekt[\"@\"][\"template-tags:operation\"]).eql(\"update\");   ",
											"",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.10/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.10/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.10/32\");   ",
											"});",
											"",
											"pm.test(\"Check if unit was properly updated - new unit is not created\", () => {",
											"  //get the unitName4092_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template R",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_R\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4093\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.20\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"20\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.20/20\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.20/20\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.20/20\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template R",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_R\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4092\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"2.0.0.22\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"22\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.20/20\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.20/20\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.20/20\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if nonexistant unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4092\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.22/22\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.22/22\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.22/22\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template M",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_M\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4092\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"3.0.0.33\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.20/20\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.20/20\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.20/20\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if nonexistant unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4092\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.22/22\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.22/22\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.22/22\");   ",
											"});",
											"",
											"pm.test(\"Check if existant unit was properly merged - new ip was added\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4092\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"3.0.0.33/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 3.0.0.33/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"3.0.0.33/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "apply template M (nonexisting)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi_M\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    },\n                    {\n                        \"variable-id\": \"name-number\",\n                        \"leaf-value\": \"4091\"\n                    },\n                    {\n                        \"variable-id\": \"enable2\",\n                        \"leaf-value\": \"true\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-addr\",\n                        \"leaf-value\": \"4.0.0.44\"\n                    },\n                    {\n                        \"variable-id\": \"ipv4-prefix\",\n                        \"leaf-value\": \"32\"\n                    },\n                    {\n                        \"variable-id\": \"description\",\n                        \"leaf-value\": \"this is description \"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"template-manager:apply-template"
									]
								},
								"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
							},
							"response": [
								{
									"name": "ERR name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"template-node-id\": \"{{node_id}}_2.templatetvi\",\n        \"uniconfig-node\": [\n            {\n                \"uniconfig-node-id\": \"{{node_id}}_2\",\n                \"variable\": [\n                    {\n                        \"variable-id\": \"name\",\n                        \"leaf-value\": \"{{iftvi_name2}}\"\n                    }\n\n                ]\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/template-manager:apply-template",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"template-manager:apply-template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 11 Feb 2021 19:55:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "562"
										},
										{
											"key": "Server",
											"value": "Jetty(9.4.12.v20180830)"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"overall-status\": \"fail\",\n        \"node-result\": [\n            {\n                \"node-id\": \"versa_2\",\n                \"error-type\": \"processing-error\",\n                \"status\": \"fail\",\n                \"error-message\": \"Value '{{iftvi_name2}}' cannot be applied to leaf /network-topology:network-topology/topology=templates/node=versa_2.templatetvi/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={%24name}/name - it accepts only values with following YANG types: [type: string, constraints: [Length[[5..12]], PatternConstraintImpl{regex=^(?:tvi-([0-9]|1[0-5])/([0-1]?[0-9]{1,4}))$, errorAppTag=invalid-regular-expression}]]\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"check if name\", function () {",
											"    pm.expect(jsonData[\"tvi\"][0][\"name\"]).to.eql(pm.environment.get(\"iftvi_name2\"));",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt2 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.31/32\");",
											"  pm.expect(addr_objekt2)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.31/32\");",
											"  pm.expect(addr_objekt2.addr).to.eql(\"1.0.0.31/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt3 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.41/32\");",
											"  pm.expect(addr_objekt3)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.41/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt3.addr).to.eql(\"1.0.0.41/32\");    ",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt4 = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.51/32\");",
											"  pm.expect(addr_objekt4)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.51/32\");",
											"  console.log();",
											"  pm.expect(addr_objekt4.addr).to.eql(\"1.0.0.51/32\");    ",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4095_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.22/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 1.0.0.22/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"1.0.0.22/32\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"    pm.expect(pm.response.text()).not.to.include('{\"addr\":\"0.0.0.0/32\"}');",
											"});",
											"",
											"pm.test(\"Check if ipv4addr was properly deleted\", () => {",
											"  //get the unitName4095_objekt object",
											"  const unitName4095_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4095);",
											"  pm.expect(unitName4095_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4095\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4095_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.21/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check ipv4addr non existant update - no ip added\", () => {",
											"  pm.expect(jsonData[\"tvi\"][0][\"unit\"]).not.to.be.empty;",
											"",
											"  //get the unitName4094_objekt object",
											"  const unitName4094_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4094);",
											"  pm.expect(unitName4094_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4094\");",
											"",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4094_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"1.0.0.61/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.undefined;",
											"});",
											"",
											"pm.test(\"Check if unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4093_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4093);",
											"  pm.expect(unitName4093_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4093\");",
											"",
											"  pm.expect(unitName4093_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4093_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.20/20\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.20/20\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.20/20\");   ",
											"});",
											"",
											"",
											"pm.test(\"Check if nonexistant unit was properly replaced\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4092\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"2.0.0.22/22\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 2.0.0.22/22\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"2.0.0.22/22\");   ",
											"});",
											"",
											"pm.test(\"Check if existant unit was properly merged - new ip was added\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4092);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4092\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"3.0.0.33/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 3.0.0.33/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"3.0.0.33/32\");   ",
											"});",
											"",
											"pm.test(\"Check if nonexistant unit was properly merged - new unit was added\", () => {",
											"  //get the unitName4093_objekt object",
											"  const unitName4092_objekt = jsonData[\"tvi\"][0][\"unit\"].find",
											"      (m => m.name === 4091);",
											"  pm.expect(unitName4092_objekt)",
											"    .to.be.an(\"object\", \"Could not find the name 4091\");",
											"",
											"  pm.expect(unitName4092_objekt.enable).to.be.true;   ",
											" ",
											"  //get the addr_objekt object",
											"  const addr_objekt = unitName4092_objekt[\"family\"][\"inet\"][\"address\"].find",
											"      (m => m.addr === \"4.0.0.44/32\");",
											"  pm.expect(addr_objekt)",
											"    .to.be.an(\"object\", \"Could not find the addr 4.0.0.44/32\");",
											"",
											"  pm.expect(addr_objekt.addr).to.eql(\"4.0.0.44/32\");   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}_2/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi={{iftvi_name2_url}}?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}_2",
										"frinx-uniconfig-topology:configuration",
										"interfaces:interfaces",
										"tvi={{iftvi_name2_url}}"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_C",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_D",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_D"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_M",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_M"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_R",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_R"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_U",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_U"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete template for vnf20 tvi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates/node={{node_id}}_2.templatetvi_U2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates",
										"node={{node_id}}_2.templatetvi_U2"
									]
								}
							},
							"response": []
						},
						{
							"name": "read templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=templates",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=templates"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}