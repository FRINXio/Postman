{
	"info": {
		"_postman_id": "0cf9bd04-d2a9-44d5-be79-3d0068747e0b",
		"name": "pc_unative_is_in_sync.json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "VNF20 is in sync",
			"item": [
				{
					"name": "unmount VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount XR5 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount XR6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"node\": [\n        {\n            \"node-id\": \"{{node_id}}\",\n            \"netconf-node-topology:host\": \"{{VNF20_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 5,\n            \"netconf-node-topology:max-connection-attempts\": 100,\n            \"netconf-node-topology:connection-timeout-millis\": 60000,\n            \"netconf-node-topology:default-request-timeout-millis\": 60000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n\t\t\t\"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n \t\t\t\"uniconfig-config:blacklist\": {\n\t           \"extension\": [\n\t\t\t\t\t\"tailf:display-when false\"\n\t           ]\n            }\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount XR5 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    [{\n      \"network-topology:node-id\" : \"{{nodeXR_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"5.3.4\",\n      \n      \"cli-topology:username\" : \"{{XRusername}}\",\n      \"cli-topology:password\" : \"{{XRpassword}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }]\n  }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount XR6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{nodeXR6_id}}\",\n      \"netconf-node-topology:host\": \"{{xr6_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{XRusername}}\",\n      \"netconf-node-topology:password\": \"{{XRpassword}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check VNF20 connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    pm.test(\"Validate capability = tailf-netconf-with-transaction-id\", function() {",
									"    pm.expect(pm.response.json()[\"node\"][0][\"netconf-node-topology:unavailable-capabilities\"][\"unavailable-capability\"][0][\"capability\"]).to.eql(\"(http://tail-f.com/ns/netconf/with-transaction-id?revision=2018-11-23)tailf-netconf-with-transaction-id\");",
									"    });",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check VNF20 connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check XR6 connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check XR6 connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check XR5 connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check XR5 connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface on VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vni\": [\n        {\n            \"name\": \"vni-0/3\",\n            \"enable\": true,\n            \"unit\": [\n                {\n                    \"name\": 2,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.5/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 2\n                },\n                {\n                    \"name\": 1,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.2/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 1\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network all nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\", \"{{nodeXR_id}}\", \"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "get uniconfig metadata from VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"fingerprint\", function() {",
									"  if ( \"last-configuration-fingerprint\" in pm.response.json()[\"frinx-configuration-metadata:configuration-metadata\"] ){",
									"    pm.expect(pm.response.json()[\"frinx-configuration-metadata:configuration-metadata\"][\"last-configuration-fingerprint\"].has(\"@\"));",
									"  }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-configuration-metadata:configuration-metadata?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_uniconfig}}",
								"node={{node_id}}",
								"frinx-configuration-metadata:configuration-metadata"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get unified metadata from VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"fingerprint\", function() {",
									"    pm.expect(pm.response.json()[\"last-configuration-fingerprint\"].has(\"@\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}/yang-ext:mount/frinx-configuration-metadata:configuration-metadata/last-configuration-fingerprint?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"frinx-configuration-metadata:configuration-metadata",
								"last-configuration-fingerprint"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check is-in-sync for all nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\",\"{{nodeXR_id}}\",\"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface description on VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"VXLAN Tunnel Interface for Provider Control VR (temp\"\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3/description",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface description on XR6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native test\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback123",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}",
								"yang-ext:mount",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback123"
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface description on XR5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure terminal\ninterface loopback123\ndescription testing\nexit\ncommit\nend\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "check is-in-sync not for all nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(false);",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(false);",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(false);",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\",\"{{nodeXR_id}}\",\"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network all nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\", \"{{nodeXR_id}}\", \"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "check is-in-sync status after sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(true);",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\",\"{{nodeXR_id}}\",\"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "set default description VNF20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"VXLAN Tunnel Interface for Provider Control VR\"\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3/description",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete interface XR6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback123",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}",
								"yang-ext:mount",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback123"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete interface XR5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure terminal\nno interface loopback123\ncommit\nend\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network all nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node xr status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Commited node xr6 status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"xr6\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"nodeXR6_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            break;",
									"        }",
									"            var found = results.includes('xr6');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\", \"{{nodeXR_id}}\", \"{{nodeXR6_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount XR6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeXR6_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{nodeXR6_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount XR5 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{nodeXR_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{nodeXR_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "VNF16 is in sync",
			"item": [
				{
					"name": "unmount VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Request data: \" + request.data.toString());",
									"//console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"node\": [\n        {\n            \"node-id\": \"{{node_id}}\",\n            \"netconf-node-topology:host\": \"{{VNF16_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 10,\n            \"netconf-node-topology:connection-timeout-millis\": 30000,\n            \"netconf-node-topology:default-request-timeout-millis\": 30000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n            \"uniconfig-config:blacklist\": {\n                \"uniconfig-config:extension\": [\n\t\t\t\"tailf:display-when false\"\n\t           ]\n            },\n            \"netconf-node-topology:yang-module-capabilities\": {\n                \"capability\": [\n                    \"http://tail-f.com/yang/acm?module=tailf-acm&amp;revision=2013-03-07\",\n                    \"http://www.versa-networks.com/rfd?module=rfd&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/fb-mib?module=fb-mib&amp;revision=2014-06-09\",\n                    \"http://tail-f.com/ns/mibs/ATM-TC-MIB/199810190200Z?module=ATM-TC-MIB&amp;revision=1998-10-19\",\n                    \"http://www.versa-networks.com/thresholds?module=thresholds&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/predefined-appid-groups-filters?module=predefined-appid-groups-filters&amp;revision=2017-09-17\",\n                    \"http://www.versa-networks.com/lced?module=lced&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/predefined?module=predefined&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/routing-policy?module=routing-policy&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/rtm?module=router-rtm&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/vnf?module=vnf&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/predefined-iprep?module=predefined-iprep&amp;revision=2016-03-10\",\n                    \"http://www.versa-networks.com/predefined-geoip?module=predefined-geoip&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/crypto?module=crypto&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-CR-LDP-MIB/200401210000Z?module=DC-CR-LDP-MIB&amp;revision=2004-01-21\",\n                    \"http://www.versa-networks.com/types?module=versa-types&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/ipv6-neighbor?module=ipv6-neighbor&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/IANA-GMPLS-TC-MIB/200510130001Z?module=IANA-GMPLS-TC-MIB&amp;revision=2005-10-13\",\n                    \"http://tail-f.com/yang/common?module=tailf-common&amp;revision=2018-03-01\",\n                    \"http://tail-f.com/ns/mibs/DC-BGP-MIB/201006280000Z?module=DC-BGP-MIB&amp;revision=2018-04-25\",\n                    \"http://www.versa-networks.com/tzones?module=tzoneinfo&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/IPV6-TC/199812010000Z?module=IPV6-TC&amp;revision=1998-12-01\",\n                    \"http://tail-f.com/ns/mibs/DC-RSM-MIB/200207101700Z?module=DC-RSM-MIB&amp;revision=2002-07-10\",\n                    \"http://www.versa-networks.com/org?module=org&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/ddos-mib?module=ddos-mib&amp;revision=2015-05-13\",\n                    \"http://www.versa-networks.com/snat-mib?module=snat-mib&amp;revision=2016-02-04\",\n                    \"http://www.versa-networks.com/ra?module=ra&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/IP-MIB/200602020000Z?module=IP-MIB&amp;revision=2015-09-25\",\n                    \"http://tail-f.com/ns/mibs/IF-MIB/200006140000Z?module=IF-MIB&amp;revision=2000-06-14\",\n                    \"http://tail-f.com/ns/mibs/IANA-RTPROTO-MIB/200009260000Z?module=IANA-RTPROTO-MIB&amp;revision=2016-10-15\",\n                    \"http://www.versa-networks.com/urlf-mib?module=urlf-mib&amp;revision=2016-07-19\",\n                    \"http://tail-f.com/ns/aaa/1.1?module=tailf-aaa&amp;revision=2015-06-16\",\n                    \"http://tail-f.com/ns/example/router-rtm-newscope?module=router-rtm-newscope&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/monitor?module=monitor&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/network?module=network&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/objid?module=objid&amp;revision=2015-05-18\",\n                    \"http://www.versa-networks.com/sandbox-mib?module=sandbox-mib&amp;revision=2014-06-09\",\n                    \"http://tail-f.com/ns/ospf?module=router-ospf&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-MCAST-ROUTING-TC/200408170000Z?module=DC-MCAST-ROUTING-TC&amp;revision=2004-08-17\",\n                    \"http://www.versa-networks.com/vwire?module=vwire&amp;revision=2056-12-12\",\n                    \"http://tail-f.com/ns/mibs/DC-LMGR-MIB/200509160000Z?module=DC-LMGR-MIB&amp;revision=2005-09-16\",\n                    \"http://www.versa-networks.com/access?module=access&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/SNMPv2-TC/1.0?module=SNMPv2-TC&amp;revision=2015-03-20\",\n                    \"http://tail-f.com/ns/mibs/DC-TEMIB-ENTITY-MIB/200701230000Z?module=DC-TEMIB-ENTITY-MIB&amp;revision=2007-01-23\",\n                    \"http://tail-f.com/ns/mibs/DC-PWE3-MIB/200610161200Z?module=DC-PWE3-MIB&amp;revision=2006-10-16\",\n                    \"http://tail-f.com/ns/mibs/MPLS-LDP-STD-MIB/200406030000Z?module=MPLS-LDP-STD-MIB&amp;revision=2004-06-03\",\n                    \"http://www.versa-networks.com/class-of-service?module=cos&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-MASTER-TC/201103180000Z?module=DC-MASTER-TC&amp;revision=2016-05-21\",\n                    \"http://tail-f.com/ns/mibs/DC-FTS-MIB/200806040000Z?module=DC-FTS-MIB&amp;revision=2008-06-04\",\n                    \"http://www.versa-networks.com/fib?module=routing&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/url-filtering?module=url-filtering&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-RIP-MIB/200901140000Z?module=DC-RIP-MIB&amp;revision=2009-01-14\",\n                    \"http://tail-f.com/ns/docgen/experimental1?module=docgen&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/prototype/experimental1?module=nbase-extensions&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/routing?module=routing-module&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/routing-vrf?module=routing-vrf&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/alarm-types?module=alarm-types&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/opdata?module=opdata&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-AALL-MIB/200703230000Z?module=DC-AALL-MIB&amp;revision=2007-03-23\",\n                    \"http://www.versa-networks.com/predefined-ips-scanner-parameters?module=predefined-ips-scanner-parameters&amp;revision=2016-05-10\",\n                    \"http://www.versa-networks.com/rtm-newscope?module=rtm-newscope&amp;revision=2018-04-09\",\n                    \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm?module=ietf-netconf-acm&amp;revision=2018-02-14\",\n                    \"http://www.versa-networks.com/pbf?module=pbf&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/INTEGRATED-SERVICES-MIB/199511030500Z?module=INTEGRATED-SERVICES-MIB&amp;revision=1995-11-03\",\n                    \"http://www.versa-networks.com/counters?module=counters&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/router-dcl?module=router-dcl&amp;revision=2018-04-09\",\n                    \"http://versa-networks.com/cgnat-mib?module=cgnat-mib&amp;revision=2014-06-10\",\n                    \"http://tail-f.com/ns/mibs/RFC1155-SMI/1.0?module=RFC1155-SMI&amp;revision=2015-03-20\",\n                    \"http://versa-networks.com/ha-mib?module=ha-mib&amp;revision=2015-01-09\",\n                    \"http://tail-f.com/ns/mibs/TGM-MIB/200407070000Z?module=TGM-MIB&amp;revision=2004-07-07\",\n                    \"http://www.versa-networks.com/filefilter-mib?module=filefilter-mib&amp;revision=2014-06-09\",\n                    \"http://www.versa-networks.com/ntp?module=ntp&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/MPLS-LSR-STD-MIB/200406030000Z?module=MPLS-LSR-STD-MIB&amp;revision=2004-06-03\",\n                    \"http://www.versa-networks.com/pbf-mib?module=pbf-mib&amp;revision=2015-05-13\",\n                    \"http://www.versa-networks.com/sdwan-mib?module=sdwan-mib&amp;revision=2015-10-31\",\n                    \"http://www.versa-networks.com/clear?module=clear&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-OSPF-MIB/201102030000Z?module=DC-OSPF-MIB&amp;revision=2015-06-25\",\n                    \"http://tail-f.com/ns/mibs/HC-PerfHist-TC-MIB/200402030000Z?module=HC-PerfHist-TC-MIB&amp;revision=2004-02-03\",\n                    \"http://www.versa-networks.com/ospfv3-newcope?module=ospfv3-newscope&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/VERSA-RTDS-MIB/201407160000Z?module=VERSA-RTDS-MIB&amp;revision=2014-07-16\",\n                    \"http://www.versa-networks.com/predefined-file-extract-apps?module=predefined-file-extract-apps&amp;revision=2016-12-12\",\n                    \"http://tail-f.com/ns/mibs/DC-MGMD-ROUTER-MIB/200904010000Z?module=DC-MGMD-ROUTER-MIB&amp;revision=2009-04-01\",\n                    \"http://www.versa-networks.com/sng?module=sfc&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/bgp-newscope?module=bgp-newscope&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/ospfv3?module=router-ospfv3&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/vrf?module=router-vrf&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/traffic-monitoring?module=traffic-monitoring&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/LMP-MIB/200608101200Z?module=LMP-MIB&amp;revision=2006-08-10\",\n                    \"http://www.versa-networks.com/logger?module=logger&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/decrypt-mib?module=decrypt-mib&amp;revision=2017-04-02\",\n                    \"http://www.versa-networks.com/predefined-ips?module=predefined-ips&amp;revision=2016-04-21\",\n                    \"http://www.versa-networks.com/cportal-mib?module=cportal-mib&amp;revision=2016-06-02\",\n                    \"http://tail-f.com/ns/example/common?module=router-comn&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-CSS-MIB/200810150000Z?module=DC-CSS-MIB&amp;revision=2008-10-15\",\n                    \"http://www.versa-networks.com/dhcp?module=dhcp&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/ips-mib?module=ips-mib&amp;revision=2015-11-03\",\n                    \"http://www.versa-networks.com/system?module=system&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/routing-dcl?module=routing-dcl&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/bgp?module=router-bgp&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/security?module=security&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/MPLS-TE-STD-MIB/200709191200Z?module=MPLS-TE-STD-MIB&amp;revision=2007-09-19\",\n                    \"http://www.versa-networks.com/ipf-mib?module=ipf-mib&amp;revision=2017-01-05\",\n                    \"http://tail-f.com/ns/mibs/UDP-MIB/200505200000Z?module=UDP-MIB&amp;revision=2005-05-20\",\n                    \"http://www.versa-networks.com/interfaces?module=interfaces&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/traffic-mirroring?module=traffic-mirroring&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-ISIS-MIB/201010130000Z?module=DC-ISIS-MIB&amp;revision=2010-10-13\",\n                    \"http://www.versa-networks.com/user-identification-mib?module=uid-mib&amp;revision=2018-03-31\",\n                    \"http://www.versa-networks.com/av-mib?module=av-mib&amp;revision=2014-06-09\",\n                    \"http://www.versa-networks.com/arp?module=arp&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/IANA-ADDRESS-FAMILY-NUMBERS-MIB/200203140000Z?module=IANA-ADDRESS-FAMILY-NUMBERS-MIB&amp;revision=2002-03-14\",\n                    \"http://tail-f.com/ns/mibs/DC-SM-HMTEST-MIB/200211260000Z?module=DC-SM-HMTEST-MIB&amp;revision=2002-11-26\",\n                    \"http://tail-f.com/ns/mibs/SNMP-FRAMEWORK-MIB/200210140000Z?module=SNMP-FRAMEWORK-MIB&amp;revision=2002-10-14\",\n                    \"http://tail-f.com/ns/mibs/DC-RSIP-MIB/200503170000Z?module=DC-RSIP-MIB&amp;revision=2005-03-17\",\n                    \"http://tail-f.com/ns/mibs/DC-CSPF-MIB/200807250000Z?module=DC-CSPF-MIB&amp;revision=2008-07-25\",\n                    \"http://tail-f.com/ns/view/experimental1?module=view&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/van-system?module=van-system&amp;revision=2016-06-28\",\n                    \"http://www.versa-networks.com/eoam?module=eoam&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/VRRPV3-MIB/201202130000Z?module=VRRPV3-MIB&amp;revision=2015-10-13\",\n                    \"http://tail-f.com/ns/mibs/DIFFSERV-DSCP-TC/200205090000Z?module=DIFFSERV-DSCP-TC&amp;revision=2002-05-09\",\n                    \"http://tail-f.com/ns/mibs/DC-I3-MIB/201101240000Z?module=DC-I3-MIB&amp;revision=2011-01-24\",\n                    \"http://www.versa-networks.com/qos-mib?module=qos-mib&amp;revision=2017-02-02\",\n                    \"http://www.versa-networks.com/policy-mib?module=policy-mib&amp;revision=2015-05-13\",\n                    \"urn:ietf:params:xml:ns:yang:smiv2:IANAifType-MIB?module=IANAifType-MIB&amp;revision=2009-05-06\",\n                    \"http://www.versa-networks.com/events?module=events&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/vfp?module=vfp&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-MPF-MIB/200704270000Z?module=DC-MPF-MIB&amp;revision=2007-04-27\",\n                    \"http://tail-f.com/taif-aaa-ann?module=tailf-aaa-ann&amp;revision=2019-01-17\",\n                    \"http://tail-f.com/yang/xsd-types?module=tailf-xsd-types&amp;revision=2017-11-20\",\n                    \"http://www.versa-networks.com/users?module=users&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/user-identification?module=user-identification&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/appid?module=appid&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/MPLS-VPN-MIB/200805201200Z?module=MPLS-VPN-MIB&amp;revision=2015-04-28\",\n                    \"http://tail-f.com/ns/mibs/DC-SM-MIB/200211260000Z?module=DC-SM-MIB&amp;revision=2002-11-26\",\n                    \"http://www.versa-networks.com/predefined-ips-scanners?module=predefined-ips-scanners&amp;revision=2016-05-10\",\n                    \"http://www.versa-networks.com/predefined-url-reputations?module=predefined-url-reputations&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/cgnat?module=cgnat&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/pki-mib?module=pki-mib&amp;revision=2016-04-14\",\n                    \"http://versa-networks.com/monitor-mib?module=monitor-mib&amp;revision=2017-05-03\",\n                    \"http://www.versa-networks.com/wlan?module=wlan&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/predefined-file-types?module=predefined-file-types&amp;revision=2017-04-22\",\n                    \"http://www.versa-networks.com/predefined-filefilter?module=predefined-filefilter&amp;revision=2016-03-16\",\n                    \"http://www.versa-networks.com/predefined-wlan?module=predefined-wlan&amp;revision=2017-05-30\",\n                    \"http://www.versa-networks.com/mirror-mib?module=mirror-mib&amp;revision=2018-07-05\",\n                    \"http://www.versa-networks.com/diagnostics?module=diagnostics&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/predefined-url-categories?module=predefined-url-categories&amp;revision=2016-12-12\",\n                    \"http://versa-networks.com/org-mib?module=org-mib&amp;revision=2017-02-26\",\n                    \"http://www.versa-networks.com/device-mib?module=device-mib&amp;revision=2017-02-26\",\n                    \"http://tail-f.com/ns/mibs/DC-SCK-MIB/200808060000Z?module=DC-SCK-MIB&amp;revision=2008-08-06\",\n                    \"http://versa-networks.com/ipsec-mib?module=ipsec-mib&amp;revision=2015-07-09\",\n                    \"http://tail-f.com/ns/mibs/DC-LMP-MIB/200606211200Z?module=DC-LMP-MIB&amp;revision=2006-06-21\",\n                    \"urn:ietf:params:xml:ns:yang:iana-crypt-hash?module=iana-crypt-hash&amp;revision=2014-08-06\",\n                    \"http://tail-f.com/ns/mibs/GMPLS-TC-STD-MIB/200505200001Z?module=GMPLS-TC-STD-MIB&amp;revision=2005-05-20\",\n                    \"http://www.versa-networks.com/oam?module=oam&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/acctmgr?module=acctmgr&amp;revision=2019-01-17\",\n                    \"http://tail-f.com/ns/mibs/INET-ADDRESS-MIB/200502040000Z?module=INET-ADDRESS-MIB&amp;revision=2005-02-04\",\n                    \"http://tail-f.com/ns/mibs/DC-BFD-STUB-MIB/200901060900Z?module=DC-BFD-STUB-MIB&amp;revision=2009-01-06\",\n                    \"http://www.versa-networks.com/adc?module=adc&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-RSVP-MIB/201101250000Z?module=DC-RSVP-MIB&amp;revision=2011-01-25\",\n                    \"http://tail-f.com/ns/mibs/DC-PIM-BSR-MIB/200711290000Z?module=DC-PIM-BSR-MIB&amp;revision=2007-11-29\",\n                    \"http://tail-f.com/ns/mibs/TRANSPORT-ADDRESS-MIB/200211010000Z?module=TRANSPORT-ADDRESS-MIB&amp;revision=2002-11-01\",\n                    \"http://www.versa-networks.com/adc-mib?module=adc-mib&amp;revision=2015-11-22\",\n                    \"http://www.versa-networks.com/logger-common?module=logger-common&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/MPLS-TC-STD-MIB/200406030000Z?module=MPLS-TC-STD-MIB&amp;revision=2004-06-03\",\n                    \"http://tail-f.com/ns/mibs/DC-RTM-MIB/201103290000Z?module=DC-RTM-MIB&amp;revision=2015-10-15\",\n                    \"http://www.versa-networks.com/routing-common?module=routing-comn&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/vfp-mib?module=vfp-mib&amp;revision=2016-02-04\",\n                    \"http://tail-f.com/ns/mibs/GMPLS-LABEL-STD-MIB/200502140001Z?module=GMPLS-LABEL-STD-MIB&amp;revision=2005-02-14\",\n                    \"http://versa-networks.com/versa-mib?module=versa-mib&amp;revision=2016-02-08\",\n                    \"http://tail-f.com/ns/mibs/IEEE8023-LAG-MIB/199911220000Z?module=IEEE8023-LAG-MIB&amp;revision=2015-03-10\",\n                    \"http://www.versa-networks.com/ospf-newcope?module=ospf-newscope&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/sdwan?module=sdwan&amp;revision=2018-04-09\",\n                    \"urn:ietf:params:xml:ns:yang:ietf-yang-types?module=ietf-yang-types&amp;revision=2013-07-15\",\n                    \"http://www.versa-networks.com/predefined-applications?module=predefined-appid&amp;revision=2018-01-03\",\n                    \"http://www.versa-networks.com/predefined-services?module=predefined-services&amp;revision=2016-12-12\",\n                    \"http://tail-f.com/ns/mibs/DC-PIM-MIB/200510050000Z?module=DC-PIM-MIB&amp;revision=2005-10-05\",\n                    \"http://tail-f.com/ns/example/newscope?module=newscope-model&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/geoip?module=geoip&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/example/router-bgp-newscope?module=router-bgp-newscope&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/predefined-urlf-profiles?module=predefined-urlf-profiles&amp;revision=2016-07-01\",\n                    \"http://tail-f.com/ns/mibs/TCP-MIB/200502180000Z?module=TCP-MIB&amp;revision=2005-02-18\",\n                    \"urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;revision=2013-07-15\",\n                    \"http://www.versa-networks.com/appid-mib?module=appid-mib&amp;revision=2013-10-14\",\n                    \"http://www.versa-networks.com/ipsec?module=ipsec&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/lef?module=lef&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/DC-OSPF-V3-MIB/201103290000Z?module=DC-OSPF-V3-MIB&amp;revision=2011-03-29\",\n                    \"http://tail-f.com/ns/mibs/FRAME-RELAY-DTE-MIB/199705010229Z?module=FRAME-RELAY-DTE-MIB&amp;revision=1997-05-01\",\n                    \"http://tail-f.com/ns/mibs/DIFFSERV-MIB/200202070000Z?module=DIFFSERV-MIB&amp;revision=2002-02-07\",\n                    \"http://tail-f.com/ns/mibs/DC-DLM-MIB/200610120000Z?module=DC-DLM-MIB&amp;revision=2006-10-12\",\n                    \"http://www.versa-networks.com/predefined-actions?module=predefined-actions&amp;revision=2017-01-10\",\n                    \"http://www.versa-networks.com/ha?module=ha&amp;revision=2018-04-09\",\n                    \"http://tail-f.com/ns/mibs/RFC1213-MIB/1.0?module=RFC1213-MIB&amp;revision=2015-03-20\",\n                    \"http://www.versa-networks.com/predefined-av?module=predefined-av&amp;revision=2017-07-03\",\n                    \"http://www.versa-networks.com/alg?module=alg&amp;revision=2018-04-09\",\n                    \"http://www.versa-networks.com/dhcp-mib?module=dhcp-mib&amp;revision=2016-08-08\",\n                    \"http://www.versa-networks.com/security?module=dos&amp;revision=2015-06-15\",\n                    \"http://www.versa-networks.com/routing?module=rtm&amp;revision=2017-04-23\",\n                    \"http://www.versa-networks.com/user-identification?module=sso&amp;revision=2017-09-05\",\n                    \"http://www.versa-networks.com/user-identification?module=local-database&amp;revision=2016-09-26\",\n                    \"http://www.versa-networks.com/system?module=coredumps&amp;revision=2018-01-25\",\n                    \"http://www.versa-networks.com/adc?module=server&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/adc?module=monitors&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=urlf-stats&amp;revision=2017-02-21\",\n                    \"http://www.versa-networks.com/system?module=upgrade-options&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=spack&amp;revision=2017-04-04\",\n                    \"http://www.versa-networks.com/security?module=urlf&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/security?module=uid&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/ipsec?module=ipsec-status&amp;revision=2017-08-03\",\n                    \"http://www.versa-networks.com/crypto?module=encrypt-key&amp;revision=2016-11-11\",\n                    \"http://www.versa-networks.com/adc?module=adc-stats&amp;revision=2016-12-08\",\n                    \"http://www.versa-networks.com/sdwan?module=sdwan-cmd&amp;revision=2018-03-30\",\n                    \"http://www.versa-networks.com/security?module=iprep-config&amp;revision=2017-03-26\",\n                    \"http://www.versa-networks.com/system?module=uptime&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/user-identification?module=kerberos&amp;revision=2017-06-01\",\n                    \"http://www.versa-networks.com/system?module=elasticity&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=ipguard-config&amp;revision=2016-03-14\",\n                    \"http://www.versa-networks.com/security?module=fileblocking&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/access?module=auth-profile&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/eoam?module=cfm-show&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/counters?module=ipf-counters&amp;revision=2016-05-23\",\n                    \"http://www.versa-networks.com/security?module=captive-portal-stats&amp;revision=2016-06-02\",\n                    \"http://www.versa-networks.com/interfaces?module=vrrp&amp;revision=2017-10-09\",\n                    \"http://www.versa-networks.com/routing?module=bfd&amp;revision=2017-05-16\",\n                    \"http://www.versa-networks.com/routing?module=bgp-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/security?module=zone-protection&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/system?module=timetz&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/lced?module=lced-cmd&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/van-system?module=van-package-info&amp;revision=2016-06-28\",\n                    \"http://www.versa-networks.com/adc?module=profiles&amp;revision=2016-12-12\",\n                    \"http://tail-f.com/ns/ospfv3?module=router-ospfv3-newscope&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/security?module=ipf-cmd&amp;revision=2017-08-07\",\n                    \"http://www.versa-networks.com/sdwan?module=path-policy&amp;revision=2017-10-19\",\n                    \"http://www.versa-networks.com/system?module=banners&amp;revision=2017-11-27\",\n                    \"http://www.versa-networks.com/routing?module=ospfv3&amp;revision=2018-02-06\",\n                    \"http://www.versa-networks.com/oam?module=alarms&amp;revision=2017-10-05\",\n                    \"http://www.versa-networks.com/system?module=bw&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/security?module=ips-cmd&amp;revision=2017-05-17\",\n                    \"http://www.versa-networks.com/security?module=ips&amp;revision=2018-01-03\",\n                    \"http://www.versa-networks.com/system?module=load-stat&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/interfaces?module=vrrp-cmd&amp;revision=2017-10-09\",\n                    \"http://www.versa-networks.com/security?module=av-stats&amp;revision=2016-12-14\",\n                    \"http://www.versa-networks.com/security?module=sandbox&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/routing?module=pim-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/system?module=subjugate&amp;revision=2017-06-29\",\n                    \"http://www.versa-networks.com/ipsec?module=ipsec-types&amp;revision=2017-02-02\",\n                    \"http://www.versa-networks.com/system?module=service-options&amp;revision=2017-11-03\",\n                    \"http://www.versa-networks.com/system?module=gen-nodeid&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/class-of-service?module=cos-shaping&amp;revision=2018-01-11\",\n                    \"http://www.versa-networks.com/routing-policy?module=policy-hidden&amp;revision=2016-10-15\",\n                    \"http://www.versa-networks.com/adc?module=glb&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=dns-filtering-cmd&amp;revision=2016-08-19\",\n                    \"http://www.versa-networks.com/system?module=platform&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/ra?module=ra-cmd&amp;revision=2017-02-07\",\n                    \"http://www.versa-networks.com/system?module=ext-aaa&amp;revision=2017-09-06\",\n                    \"http://www.versa-networks.com/lef?module=lef-cmd&amp;revision=2016-03-02\",\n                    \"http://www.versa-networks.com/system?module=system-sdwan&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/system?module=services&amp;revision=2017-11-27\",\n                    \"http://www.versa-networks.com/security?module=security-match&amp;revision=2017-07-05\",\n                    \"http://www.versa-networks.com/adc?module=dnssec&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/adc?module=vservice&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/system?module=parameters&amp;revision=2017-11-27\",\n                    \"http://www.versa-networks.com/van-system?module=van-uptime&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/routing?module=bgp&amp;revision=2017-11-16\",\n                    \"http://www.versa-networks.com/system?module=syslog&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/adc?module=policy-group&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/system?module=session&amp;revision=2017-08-01\",\n                    \"http://www.versa-networks.com/routing?module=ospf&amp;revision=2018-01-09\",\n                    \"http://www.versa-networks.com/security?module=urlf-cmd&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=dns&amp;revision=2015-01-15\",\n                    \"http://www.versa-networks.com/class-of-service?module=cos-cmd&amp;revision=2017-02-21\",\n                    \"http://www.versa-networks.com/routing?module=routing-module-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/class-of-service?module=qos&amp;revision=2018-01-11\",\n                    \"http://www.versa-networks.com/system?module=snapshot&amp;revision=2017-03-09\",\n                    \"http://www.versa-networks.com/security?module=captive-portal&amp;revision=2018-02-26\",\n                    \"http://www.versa-networks.com/routing?module=ospfv3-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/system?module=dhcp-parameters&amp;revision=2017-11-27\",\n                    \"http://www.versa-networks.com/system?module=identification&amp;revision=2016-12-12\",\n                    \"http://tail-f.com/yang/common?module=tailf-cli-extensions&amp;revision=2017-08-23\",\n                    \"http://www.versa-networks.com/security?module=filefilter-stats&amp;revision=2015-11-03\",\n                    \"http://www.versa-networks.com/system?module=package&amp;revision=2016-10-14\",\n                    \"http://www.versa-networks.com/org?module=org-cmd&amp;revision=2017-11-15\",\n                    \"http://www.versa-networks.com/system?module=logrotate&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=osspack&amp;revision=2018-06-27\",\n                    \"http://www.versa-networks.com/security?module=security-rules&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/org?module=dhcp-sp&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/appid?module=appid-cmd&amp;revision=2017-09-28\",\n                    \"http://www.versa-networks.com/security?module=ipguard-cmd&amp;revision=2018-02-08\",\n                    \"http://www.versa-networks.com/adc?module=glb-stats&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/crypto?module=cert-cmd&amp;revision=2017-02-09\",\n                    \"http://www.versa-networks.com/system?module=sys-arp&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=decrypt&amp;revision=2018-01-24\",\n                    \"http://www.versa-networks.com/cgnat?module=cgnat-cmd&amp;revision=2017-02-27\",\n                    \"http://www.versa-networks.com/routing?module=ospf-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/interfaces?module=intf-show&amp;revision=2017-11-03\",\n                    \"http://www.versa-networks.com/routing?module=old-hidden&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/counters?module=urlf-counters&amp;revision=2017-02-17\",\n                    \"http://www.versa-networks.com/counters?module=ips-counters&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/crypto?module=cert&amp;revision=2017-08-20\",\n                    \"http://www.versa-networks.com/security?module=ipf-stats&amp;revision=2017-05-23\",\n                    \"http://www.versa-networks.com/access?module=radius&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/user-identification?module=external-database&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/system?module=gps&amp;revision=2013-12-08\",\n                    \"http://www.versa-networks.com/van-system?module=van-tech-support&amp;revision=2018-01-30\",\n                    \"http://www.versa-networks.com/user-identification?module=uid-ldap&amp;revision=2017-08-18\",\n                    \"http://www.versa-networks.com/dhcp?module=dhcp-cmd&amp;revision=2016-10-08\",\n                    \"http://www.versa-networks.com/system?module=isolcpu&amp;revision=2017-06-14\",\n                    \"http://www.versa-networks.com/security?module=sslcloud&amp;revision=2016-08-29\",\n                    \"http://www.versa-networks.com/security?module=ips-stats&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/org?module=dns-sp&amp;revision=2016-01-15\",\n                    \"http://www.versa-networks.com/security?module=av&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/user-identification?module=uid-wmi-agent&amp;revision=2016-03-17\",\n                    \"http://www.versa-networks.com/system?module=daemon-status&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=filefilter-config&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/security?module=ssl-stats&amp;revision=2017-03-30\",\n                    \"http://www.versa-networks.com/org?module=storage&amp;revision=2016-05-05\",\n                    \"http://www.versa-networks.com/adc?module=policy&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=security-objects&amp;revision=2017-11-30\",\n                    \"http://tail-f.com/yang/common?module=tailf-meta-extensions&amp;revision=2017-03-08\",\n                    \"http://www.versa-networks.com/routing?module=router-adv&amp;revision=2016-07-27\",\n                    \"http://tail-f.com/ns/ospf?module=router-ospf-newscope&amp;revision=2019-01-17\",\n                    \"http://www.versa-networks.com/interfaces?module=static-arp&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/security?module=dns-filtering&amp;revision=2017-11-30\",\n                    \"http://www.versa-networks.com/access?module=ldap&amp;revision=2016-12-12\",\n                    \"http://www.versa-networks.com/system?module=tasks&amp;revision=2018-02-06\",\n                    \"http://www.versa-networks.com/interfaces?module=mgmt_interfaces&amp;revision=2016-04-05\",\n                    \"http://www.versa-networks.com/routing?module=pim&amp;revision=2016-01-29\",\n                    \"http://www.versa-networks.com/sdwan?module=sdwan-policies&amp;revision=2017-10-31\",\n                    \"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring?module=ietf-netconf-monitoring&amp;revision=2010-10-04\",\n                    \"http://tail-f.com/yang/netconf-monitoring?module=tailf-netconf-monitoring&amp;revision=2014-11-13\"\n                ],\n                \"netconf-node-topology:override\": true\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check VNF16 connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check VNF16 connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get unified metadata from VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"fingerprint\", function() {",
									"    pm.expect(pm.response.json()[\"last-configuration-fingerprint\"].has(\"@\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}/yang-ext:mount/frinx-configuration-metadata:configuration-metadata/last-configuration-fingerprint?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"frinx-configuration-metadata:configuration-metadata",
								"last-configuration-fingerprint"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get uniconfig metadata from VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"fingerprint\", function() {",
									"  if ( \"last-configuration-fingerprint\" in pm.response.json()[\"frinx-configuration-metadata:configuration-metadata\"] ){",
									"    pm.expect(pm.response.json()[\"frinx-configuration-metadata:configuration-metadata\"][\"last-configuration-fingerprint\"].has(\"@\"));",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-configuration-metadata:configuration-metadata?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_uniconfig}}",
								"node={{node_id}}",
								"frinx-configuration-metadata:configuration-metadata"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface on VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vni\": [\n        {\n            \"name\": \"vni-0/3\",\n            \"enable\": true,\n            \"unit\": [\n                {\n                    \"name\": 2,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.5/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 2\n                },\n                {\n                    \"name\": 1,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"172.16.255.2/30\"\n                                }\n                            ]\n                        }\n                    },\n                    \"vlan-id\": 1\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"node-results\" in pm.response.json()[\"output\"] ){",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"complete\");",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "check is-in-sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"node-results\" in pm.response.json()[\"output\"] ){",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"complete\");",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"is-in-sync\"]).to.eql(true);",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "configure interface description on VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"VXLAN Tunnel Interface for Provider Control VR (temp\"\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3/description",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "check is-in-sync false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"node-results\" in pm.response.json()[\"output\"] ){",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"complete\");",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"is-in-sync\"]).to.eql(false);",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "check empty is-in-sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"error-message\" in pm.response.json()[\"output\"] ){",
									"    pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Nodes are not specified in input request.\");",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "check invalid is-in-sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"{",
									"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
									"});",
									"",
									"var results = [];",
									"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
									"    for(var i = 0; i < result.length; i++){",
									"        results[i] = result[i][\"node-id\"];",
									"    }",
									"",
									"    ",
									"pm.test(\"Commited node versa status: complete \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"versa\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
									"            pm.expect(result[i][\"is-in-sync\"]).to.eql(false);",
									"            break;",
									"        }",
									"            var found = results.includes('versa');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"});",
									"",
									"pm.test(\"Commited node temp status: fail \", function () {",
									"    for(var i = 0; i < result.length; i++){",
									"        if( result[i][\"node-id\"] == \"temp\"){",
									"            pm.expect(result[i][\"node-id\"]).to.eql(\"temp\");",
									"            pm.expect(result[i][\"status\"]).to.eql(\"fail\");",
									"            pm.expect(result[i][\"error-message\"]).to.eql(\"Unified mountpoint not found.\");",
									"            pm.expect(result[i][\"error-type\"]).to.eql(\"no-connection\");",
									"            break;",
									"        }",
									"            var found = results.includes('temp');",
									"            pm.expect(found).to.be.true;",
									"",
									"    }",
									"",
									"});",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\", \"temp\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:is-in-sync",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:is-in-sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "set default description VNF16",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"VXLAN Tunnel Interface for Provider Control VR\"\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/vni=vni-0%2F3/description",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"vni=vni-0%2F3",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"node-results\" in pm.response.json()[\"output\"] ){",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"complete\");",
									"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}