{
	"info": {
		"_postman_id": "e2d17fdc-a5bb-472b-be03-b1542e41ecd7",
		"name": "pc_unified_eth_ifc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "ETH IFC CRUD",
					"description": null,
					"item": [
						{
							"name": "ETH IFC CRUD basic",
							"description": null,
							"item": [
								{
									"name": "Create filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"description\": \"{{eth_description}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_up}}\",\n          \"down\": \"{{eth_hold_time_down}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            }\n          }\n        ]\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"frinx-openconfig-if-ethernet:ethernet\": {\n        \"config\": {\n          \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n          \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n          \"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval}}\"\n        }\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update interface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"mtu\": \"{{eth_mtu_upd}}\",\n        \"description\": \"{{eth_description_upd}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_down}}\",\n          \"down\": \"{{eth_hold_time_up}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval_upd}}\"\n        }\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress_upd}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            },\n            \"frinx-openconfig-if-ip:ipv4\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ifc_ip}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ifc_ip}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated interface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu_upd\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update interface ipv4 whith ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"mtu\": \"{{eth_mtu_upd}}\",\n        \"description\": \"{{eth_description_upd}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_down}}\",\n          \"down\": \"{{eth_hold_time_up}}\"\n        }\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress_upd}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval_upd}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            },\n            \"frinx-openconfig-if-ip:ipv4\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ifc_ip2}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ifc_ip2}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"frinx-openconfig-if-ip:ipv6\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ipv6}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ipv6}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated interface ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//ip4",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
													"});",
													"//ip4",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//ip6",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip6",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu_upd\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD parts",
							"description": null,
							"item": [
								{
									"name": "ETH IFC CRUD subinterface-part",
									"description": null,
									"item": [
										{
											"name": "Create subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6_upd}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6_upd}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6_upd}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6_upd\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD holdtime-part",
									"description": null,
									"item": [
										{
											"name": "Create hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_up}}\",\n                    \"down\": \"{{eth_hold_time_down}}\"\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"hold-time"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_down}}\",\n                    \"down\": \"{{eth_hold_time_up}}\"\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"hold-time"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"hold-time"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD damping-part",
									"description": null,
									"item": [
										{
											"name": "Create frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-damping:damping"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-damping:damping"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse_upd\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-damping:damping"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD stats-part",
									"description": null,
									"item": [
										{
											"name": "Create frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval}}\"\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-cisco-if-extension:statistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-cisco-if-extension:statistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-cisco-if-extension:statistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No damping\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No statistics\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD eth-part",
									"description": null,
									"item": [
										{
											"name": "Create frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n        }\n            }\n\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-openconfig-if-ethernet:ethernet"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n        }\n            }\n\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-openconfig-if-ethernet:ethernet"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id_upd\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_upd\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n        }\n            }\n\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-openconfig-if-ethernet:ethernet"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD containers",
							"description": null,
							"item": [
								{
									"name": "ETH IFC CRUD subinterface-container",
									"description": null,
									"item": [
										{
											"name": "Create subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6_upd}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6_upd}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"subinterfaces\": {\n    \"subinterface\": [\n      {\n        \"index\": 0,\n        \"config\": {\n          \"index\": 0\n        }\n      }\n    ]\n  }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"subinterfaces"
													]
												}
											},
											"response": []
										},
										{
											"name": "show empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD holdtime-container",
									"description": null,
									"item": [
										{
											"name": "Create hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{   \n  \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_up}}\",\n                    \"down\": \"{{eth_hold_time_down}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"hold-time"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD damping-container",
									"description": null,
									"item": [
										{
											"name": "Create frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": \"{{eth_half-time}}\",\n                    \"reuse\": \"{{eth_reuse}}\",\n                    \"suppress\": \"{{eth_suppress}}\",\n                    \"max-suppress\": \"{{eth_max-suppress}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse_upd\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-damping:damping"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD stats-container",
									"description": null,
									"item": [
										{
											"name": "Create frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval_upd}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-cisco-if-extension:statistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD eth-container",
									"description": null,
									"item": [
										{
											"name": "Create frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n\t\t\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show created frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id_upd\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_upd\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"frinx-openconfig-if-ethernet:ethernet\": {\n        \"config\": {\n            \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n            \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n            \n\t\t}\n    }\n\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}",
														"frinx-openconfig-if-ethernet:ethernet"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"{{eth_url_intf-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD flows",
							"description": null,
							"item": [
								{
									"name": "show no ETH IFC flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "941f547f-4eee-4d1b-97db-1a821cfb84b6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response\" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d60073a1-0385-4090-95be-5c784596a2ad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4210780-b191-4ee5-be83-7836f0591af0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5698c8ba-09f9-4c60-9940-e2bab10d792c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9247726e-c03d-46ff-a3d9-e66a2f4f3f81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bac3f76-c8cc-41fc-bdd9-573ed570a382",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffe3d3d1-ee81-4531-8b74-ad2542cac825",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (delete ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf9a0f1d-83e2-4cb9-b7a2-1163ed3ba495",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"/*-------------------------------------------------------------EGRESS--------------------------------------------------*/",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(1);",
													"",
													"});",
													"",
													"",
													"//no IPV6 egress",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bab452d-19e0-4f9e-9d3a-7425ba5563c5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-flows is not present\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"ingress-flows\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV4\"]);",
													"",
													"});",
													"",
													"",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11fe148f-0aa3-4479-9dde-24ec9d937855",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e9d367a-9d64-4e33-a402-0261ea28373c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(1);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4",
													"//This should not be present",
													"pm.test(\"No IPv4 ingress flow present\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  var is_ipv4_ingress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      is_ipv4_ingress = true;",
													"    }",
													"  }",
													"  if (is_ipv4_ingress) {",
													"    pm.expect.fail(null,null,'An ipv4 ingress-flow was found.');",
													"  }",
													"});",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"netflow-type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-netflow:NETFLOW_IPV6\",\"frinx-netflow:NETFLOW_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"",
													"",
													"//IPV6 egress",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV6\");",
													"});",
													"//IPV4 egress",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(list[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(list[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));    ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-netflow:NETFLOW_IPV4\");",
													"});",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no ETH IFC flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9acc75d6-67d6-40ca-b7c4-208019a4f6ad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD acls",
							"description": null,
							"item": [
								{
									"name": "show no ETH IFC acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0ceb195-f429-4982-a3b2-f8277ebaa0c7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56fa1d81-66b0-4f18-86b9-e359c589831a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "240fc2fe-e230-4fe1-9607-f8d2829fc015",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcfc8a36-f656-491d-93b4-95ebcd9fe68e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "930fa66e-a090-4fd2-a71b-b9f8f2b055ef",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl to fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eadbbc8b-5c02-41cb-b05c-217ad9eda002",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"  pm.response.to.have.status(500);",
													"});",
													"",
													"//no change in data tree",
													"pm.test(\"Validate failed operation = fail\", function() {",
													"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"operation-failed\");",
													"});",
													"pm.test(\"Check error\", function() {",
													"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-info\"]).to.contain(\"Bulk update failed because: Could not add more than one ingress-acl-set config for type class org.opendaylight.yang.gen.v1.http.frinx.openconfig.net.yang.acl.rev170526.ACLIPV4 for interface TenGigE0/0/2/1.\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ingress-acl-set\": [\n        {\n            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv4_acl1}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv4_acl1}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba5cb59d-5f4b-4b19-ba7c-7a7d626dd917",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bde4851-d726-4dbe-ad4d-e5c9c7ea8f02",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (delete ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a90806-a3f9-4d72-bb85-bfa8ee7c12d1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(1);",
													"",
													"});",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47811546-b2a0-42f6-870e-27f1095ca294",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-acl-sets are  present\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"]).to.be.undefined;",
													"});",
													"",
													"",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(1);",
													"",
													"});",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"id\": \"{{eth_intf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbc60051-f454-43c3-946d-396991e2c680",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"});",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv6_acl2}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv6_acl2}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9f17aa8-b343-436f-884d-6adf41236d67",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"for(j = 0; j < arraysize; j++){",
													"    items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in ingress tree",
													"pm.test(\"No duplicates in ingress\", function() {",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(1);",
													"});",
													"//IPV6",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 ingress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 ingress-acl was found.');",
													"  }",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													"var list = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"var arraysize=list.length;",
													"var items=[];",
													"",
													"for(j = 0; j < arraysize; j++){",
													"   items[j]=list[j][\"type\"];",
													"}",
													"//no duplicates in egress tree",
													"pm.test(\"No duplicates in egress\", function() {",
													"  ",
													"    pm.expect(items).to.have.members([\"frinx-openconfig-acl:ACL_IPV6\",\"frinx-openconfig-acl:ACL_IPV4\"]);",
													"    pm.expect(items).to.have.lengthOf.at.most(2);",
													"",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"     pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));  ",
													"      break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV6\");",
													"});",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  for (var i = 0; i < arraysize; i++) {",
													"    if (items[i] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"    pm.expect(list[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));      ",
													"    break;",
													"    }",
													"  }",
													"  pm.expect(items).to.be.an('array').that.includes(\"frinx-openconfig-acl:ACL_IPV4\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ETH IFC acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no ETH IFC acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71a9ff40-952a-4d19-b2d7-fbe8800fc674",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"{{eth_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 ETH IFC CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 ETH IFC CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"console.warn(\"Temporary: expecting fixed MCCAS-40\")",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9716a7f-5ea0-4906-9c4a-95705207da48",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"//NO hold-time",
											"pm.test(\"No hold-time\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
											"});",
											"//NO subinterface",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
											"});",
											"//NO ethernet",
											"pm.test(\"No ethernet\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});",
											"//NO damping",
											"pm.test(\"No ethernet\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
											"});",
											"//NO statistics",
											"pm.test(\"No ethernet\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 ETH IFC CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "Delete configurations on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5770b05-f81b-4fc2-b779-d8ceda69f614",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21644379-d564-4880-8aec-f0f9b989b968",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 ETH IFC READERS",
					"description": null,
					"item": [
						{
							"name": "Configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"console.warn(\"Temporary: expecting fixed MCCAS-40\")",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"input\" :\n{\n   \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription {{eth_description}}\nmtu {{eth_mtu}}\nipv4 address {{eth_ifc_ip}}/{{eth_ifc_pref_length}}\nipv6 address {{eth_ipv6}} {{eth_ifc_pref_length6}}\nipv6 nd suppress-ra\ndampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\ncarrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nload-interval {{eth_load_interval}}\nlacp period short\nno shutdown\ncommit\nend\"\n}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c795ac19-b5f7-402b-ba45-30d640783348",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"GET - show created interface request\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"",
											"//ip",
											"pm.test(\"Validate ipv4 = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
											"});",
											"//ipv6",
											"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
											"});",
											"//ipv6",
											"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
											"});",
											"//down",
											"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
											"});",
											"//up",
											"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
											"});",
											"//max-suppress",
											"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
											"});",
											"//half-life",
											"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
											"});",
											"//reuse",
											"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"//mtu",
											"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"console.warn(\"Temporary: expecting fixed MCCAS-40\")",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"input\" :\n{\n   \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nno description {{eth_description}}\nno mtu {{eth_mtu}}\nno ipv4 address {{eth_ifc_ip}}/{{eth_ifc_pref_length}}\nno ipv6 address {{eth_ipv6}} {{eth_ifc_pref_length6}}\nno ipv6 nd suppress-ra\nno dampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\nno carrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nno load-interval {{eth_load_interval}}\nno lacp period short\nno shutdown\ncommit\nend\"\n}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58be4b69-2964-4fd2-a11b-fc7ed7aa6db3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ASR ETH IFC CRUD",
			"description": null,
			"item": [
				{
					"name": "ASR ETH IFC CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6184ebe8-f1a5-4999-9300-a758453dbcb6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\nsampler-map {{flow_prereq_sampler1}}1\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}2\nrandom 1 out-of 10\nexit\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "352d3894-8a45-4064-a385-2e100de5b20d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ASR ETH IFC CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0efab4dd-a193-49f4-b3bc-5d5fabaab854",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2be6e05d-f170-481e-8d52-974a3f73c2f5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\nno sampler-map {{flow_prereq_sampler1}}1\nno sampler-map {{flow_prereq_sampler2}}2\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ASR ETH IFC READERS",
					"description": null,
					"item": [
						{
							"name": "delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfa3bbef-3882-4aff-bca0-6d9d105cedc8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a75830b-454e-4a34-af23-086bbec29f28",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f2e4ad7-7bff-4ef7-a161-8cec49b79c07",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nmtu {{eth_mtu}}\nipv4 address {{eth_ifc_ip}} {{netmask}}\nipv6 address {{eth_ipv6}}/{{eth_ifc_pref_length6}}\nipv6 nd suppress-ra\nflow ipv4 monitor {{flow_prereq_ipv4_monitor1}} sampler {{flow_prereq_sampler1}} egress\nflow ipv4 monitor {{flow_prereq_ipv4_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nflow ipv6 monitor {{flow_prereq_ipv6_monitor1}} sampler {{flow_prereq_sampler1}} egress\nflow ipv6 monitor {{flow_prereq_ipv6_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nipv6 access-group {{flow_prereq_ipv6_acl1}} egress \nipv6 access-group {{flow_prereq_ipv6_acl2}} ingress \nipv4 access-group {{flow_prereq_ipv4_acl1}} egress \nipv4 access-group {{flow_prereq_ipv4_acl2}} ingress \ndampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\ncarrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nload-interval {{eth_load_interval}}\nlacp period short\nno shutdown\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured ETH IFC",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"GET - show created interface request\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"",
											"//ip",
											"pm.test(\"Validate ipv4 = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"netmask_prefix\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"netmask_prefix\")));",
											"});",
											"//ipv6",
											"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
											"});",
											"//ipv6",
											"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
											"});",
											"//down",
											"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
											"});",
											"//up",
											"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
											"});",
											"//max-suppress",
											"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
											"});",
											"//half-life",
											"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
											"});",
											"//reuse",
											"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
											"});",
											"//mtu",
											"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ETH flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//IPV6",
											"pm.test(\"Validate IPv6 ingress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv6 egress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
											"    }",
											"  }",
											"});",
											"",
											"//IPV4",
											"pm.test(\"Validate IPv4 ingress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv4 egress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
											"    }",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-netflow:netflow",
										"interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ETH acl",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//IPV6",
											"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
											"    }",
											"  }",
											"});",
											"",
											"//IPV4",
											"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
											"    }",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-acl:acl",
										"interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previus ETH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b215f44e-b5ce-4cdc-bf93-8d62f8cc53b9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nno mtu {{eth_mtu}}\nno ipv4 address {{eth_ifc_ip}} {{netmask}}\nno ipv6 address {{eth_ipv6}}/{{eth_ifc_pref_length6}}\nno ipv6 nd suppress-ra\nno flow ipv4 monitor {{flow_prereq_ipv4_monitor1}} sampler {{flow_prereq_sampler1}} egress\nno flow ipv4 monitor {{flow_prereq_ipv4_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nno flow ipv6 monitor {{flow_prereq_ipv6_monitor1}} sampler {{flow_prereq_sampler1}} egress\nno flow ipv6 monitor {{flow_prereq_ipv6_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nno ipv6 access-group {{flow_prereq_ipv6_acl1}} egress compress level 1 interface-statistics \nno ipv6 access-group {{flow_prereq_ipv6_acl2}} ingress compress level 1 interface-statistics \nno ipv4 access-group {{flow_prereq_ipv4_acl1}} egress compress level 1 interface-statistics \nno ipv4 access-group {{flow_prereq_ipv4_acl2}} ingress compress level 1 interface-statistics \nno dampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\nno carrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nno load-interval {{eth_load_interval}}\nno lacp period short\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC Bundle Mode On",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fe3f5b5-6711-4178-94a2-013fe1de55e4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode on\nlacp period short\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured ETH Bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"//bundle",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
											"});",
											"//lacp-period",
											"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
											"   pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.have.property('frinx-lacp-lag-member:lacp-mode')",
											"});",
											"//lacp-interval",
											"pm.test(\"Validate lacp-interval = \" + pm.environment.get(\"lacp-interval\"), function() {",
											"   pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.have.property('frinx-lacp-lag-member:lacp-interval')",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC Bundle Mode Active SLOW",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4571a80-96e1-48a1-937e-fdce82ce119e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode {{lacp_mode}}\nno lacp period short\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured ETH Bundle ACTIVE SLOW",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"//bundle",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
											"});",
											"//lacp_mode",
											"pm.test(\"Validate frinx-openconfig-if-ethernet:ethernet = \" + pm.environment.get(\"lacp_mode\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
											"});",
											"//lacp_interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ETH IFC Bundle Mode Active FAST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2645f7a0-63a1-4aac-9880-3c8727685399",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode {{lacp_mode}}\nlacp period short\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured ETH Bundle Active FAST",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"//bundle",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
											"});",
											"//lacp_mode",
											"pm.test(\"Validate frinx-openconfig-if-ethernet:ethernet = \" + pm.environment.get(\"lacp_mode\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
											"});",
											"//lacp_interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bundle ETH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9007b7d0-5ed1-4279-85d9-7e9542c197d0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\nno bundle id {{eth_bundle_id_idx}} mode on\nno lacp period short\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e23a882d-219e-41fb-9473-428d8efced13",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}