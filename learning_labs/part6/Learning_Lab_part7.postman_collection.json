{
	"info": {
		"_postman_id": "b720b156-e2ad-4ab9-9c1f-3f7aa7bfc93d",
		"name": "Learning_Lab_part7",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create ospf",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"protocol\": [\n\n        {\n\n            \"name\": 97,\n\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n\n            \"config\": {\n\n                \"name\": 97,\n\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n\n            },\n\n            \"ospfv2\": {\n\n                \"global\": {\n\n                    \"timers\": {\n\n                        \"max-metric-timers\": {\n\n                            \"max-metric-timer\": [\n\n                                {\n\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n\n                                    \"config\": {\n\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n\n                                        \"timeout\": 60,\n\n                                        \"include\": [ \n\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n\n                                            \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n\n                                        ]\n\n                                    }\n\n                                }\n\n                            ]\n\n                        }\n\n                    }\n\n                },\n\n                \"areas\": {\n\n                    \"area\": [\n\n                        {\n\n                            \"identifier\":1,\n\n                            \"config\": {\n\n                                \"identifier\": 1\n\n                            },\n\n                            \"interfaces\": {\n\n                                \"interface\": [\n\n                                    {\n\n                                        \"id\": \"Loopback97\",\n\n                                        \"config\": {\n\n                                            \"metric\": 77,\n                                            \"id\": \"Loopback97\"\n\n                                        }\n\n                                    }\n\n                                ]\n\n                            }\n\n                        }\n\n                    ]\n\n                }\n\n            }\n\n        }\n\n    ]\n\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/xr5/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/97",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"config",
						"network-topology:network-topology",
						"topology",
						"uniconfig",
						"node",
						"xr5",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-network-instance:network-instances",
						"network-instance",
						"default",
						"protocols",
						"protocol",
						"frinx-openconfig-policy-types:OSPF",
						"97"
					]
				}
			},
			"response": []
		},
		{
			"name": "dry run",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21e55706-8942-496b-bb39-fc6570fab351",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - node-id\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							"pm.test(\"dryrun - configuration status\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - operation delete interface name\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"lag_inf-id\"));",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"delete\\\"\");",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"dryrun-manager:dryrun-commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2caf21de-6da4-4e86-bdbc-8221eb5701a2",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - node-id\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							"pm.test(\"dryrun - configuration status\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "sync from network",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a55c4890-4d46-494b-a510-7f045d81eced",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate configuration-status\", function() {",
							"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
							"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
							"  }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:sync-from-network"
					]
				}
			},
			"response": []
		},
		{
			"name": "replace config with operational",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1be6f510-e7f5-4f59-8698-1c7f4960db5d",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate result\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:replace-config-with-operational"
					]
				}
			},
			"response": []
		},
		{
			"name": "show ospf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7def286-d7f9-44fc-bd9c-56f9d678293d",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate config name\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
							"});",
							"pm.test(\"Validate name\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
							"});",
							"",
							"",
							"//timeout",
							"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout\"), function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout\")));",
							"});",
							"",
							"//pm.test(\"Validate interface\", function() {",
							"//  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
							"//});",
							"pm.test(\"Validate interface\", function() {",
							"   pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0]).to.not.have.property(\"interface-ref\");",
							"});",
							"",
							"pm.test(\"Validate metric\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost\")));",
							"});",
							"pm.test(\"Validate id\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
							"});",
							"pm.test(\"Validate identifier\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
							"});",
							"pm.test(\"Validate identifier config \", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operational",
						"network-topology:network-topology",
						"topology",
						"uniconfig",
						"node",
						"{{node_id}}",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-network-instance:network-instances",
						"network-instance",
						"{{ospf_ni-name}}",
						"protocols",
						"protocol",
						"frinx-openconfig-policy-types:OSPF",
						"{{ospf}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete ospf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d211c505-8d6a-44b0-9240-b6d936128c2a",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"config",
						"network-topology:network-topology",
						"topology",
						"uniconfig",
						"node",
						"{{node_id}}",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-network-instance:network-instances",
						"network-instance",
						"{{ospf_ni-name}}",
						"protocols",
						"protocol",
						"frinx-openconfig-policy-types:OSPF",
						"{{ospf}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "dry run",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21e55706-8942-496b-bb39-fc6570fab351",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - node-id\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							"pm.test(\"dryrun - configuration status\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - operation delete interface name\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"lag_inf-id\"));",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"delete\\\"\");",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"dryrun-manager:dryrun-commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2caf21de-6da4-4e86-bdbc-8221eb5701a2",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"dryrun - node-id\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							"pm.test(\"dryrun - configuration status\", function() {",
							"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "sync from network",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a55c4890-4d46-494b-a510-7f045d81eced",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate configuration-status\", function() {",
							"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
							"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
							"  }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:sync-from-network"
					]
				}
			},
			"response": []
		},
		{
			"name": "replace config with operational",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1be6f510-e7f5-4f59-8698-1c7f4960db5d",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate result\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operations",
						"uniconfig-manager:replace-config-with-operational"
					]
				}
			},
			"response": []
		},
		{
			"name": "show ospf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7def286-d7f9-44fc-bd9c-56f9d678293d",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate config name\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
							"});",
							"pm.test(\"Validate name\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
							"});",
							"",
							"",
							"//timeout",
							"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout\"), function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout\")));",
							"});",
							"",
							"//pm.test(\"Validate interface\", function() {",
							"//  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
							"//});",
							"pm.test(\"Validate interface\", function() {",
							"   pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0]).to.not.have.property(\"interface-ref\");",
							"});",
							"",
							"pm.test(\"Validate metric\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost\")));",
							"});",
							"pm.test(\"Validate id\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
							"});",
							"pm.test(\"Validate identifier\", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
							"});",
							"pm.test(\"Validate identifier config \", function() {",
							"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"restconf",
						"operational",
						"network-topology:network-topology",
						"topology",
						"uniconfig",
						"node",
						"{{node_id}}",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-network-instance:network-instances",
						"network-instance",
						"{{ospf_ni-name}}",
						"protocols",
						"protocol",
						"frinx-openconfig-policy-types:OSPF",
						"{{ospf}}"
					]
				}
			},
			"response": []
		}
	]
}