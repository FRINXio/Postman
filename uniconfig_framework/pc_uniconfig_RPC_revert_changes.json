{
	"info": {
		"_postman_id": "22a51c99-f3fe-460a-9aa8-0a5ca5afc42c",
		"name": "pc_uniconfig_RPC_revert_changes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Mount two VNF-devices",
					"item": [
						{
							"name": "check status connected VNF20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected VNF20');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "mount VNF16 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"node\": [\n        {\n            \"node-id\": \"{{nodeVNF16_id}}\",\n            \"netconf-node-topology:host\": \"{{VNF16_ip}}\",\n            \"netconf-node-topology:port\": {{topology_port}},\n            \"netconf-node-topology:keepalive-delay\": 10,\n            \"netconf-node-topology:connection-timeout-millis\": 30000,\n            \"netconf-node-topology:default-request-timeout-millis\": 30000,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:sleep-factor\": 1.0,\n            \"netconf-node-topology:schema-cache-directory\": \"schemas\",\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"uniconfig-config:validation-enabled\": false,\n            \"uniconfig-config:confirmed-commit-enabled\": false,\n            \"netconf-node-topology:edit-config-test-option\": \"set\",\n            \"uniconfig-config:blacklist\": {\n                \"uniconfig-config:extension\": [\n\t\t\t\t\t\"tailf:display-when false\"\n\t           ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeVNF16_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{nodeVNF16_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected VNF16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected VNF16');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeVNF16_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{nodeVNF16_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "erase running-config VNF20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"file\": \"/home/admin/start_config.cfg\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/system:erase/running-config-then/load",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"system:erase",
										"running-config-then",
										"load"
									]
								}
							},
							"response": []
						},
						{
							"name": "erase running-config VNF16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"file\": \"/home/admin/start_config.cfg\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeVNF16_id}}/yang-ext:mount/system:erase/running-config-then/load",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{nodeVNF16_id}}",
										"yang-ext:mount",
										"system:erase",
										"running-config-then",
										"load"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Here we wait 90 seconds - be patient. The reasons is that the previous operation erased running-config and it is necessary to wait to restart services on the device.\");",
											"setTimeout(function(){}, 90000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\", \"{{nodeVNF16_id}}\"]\n\t\t}\n\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"overall-status:complete\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\", \"{{nodeVNF16_id}}\"]\n\t\t}\n\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "commit-3-shared-txs on-2-devices revert-2-last-txs",
					"item": [
						{
							"name": "Single-update on one-device",
							"item": [
								{
									"name": "update configuration VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream\": [\n        {\n            \"name\": \"revert-test\",\n            \"description\": \"item created for revert testing\",\n            \"replaySupport\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"confd_dyncfg:confdConfig",
												"notifications",
												"eventStreams",
												"stream=revert-test"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show transactions-metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json()[\"transactions-metadata\"][\"transaction-metadata\"];",
													"var tx_id = jsonData[0][\"transaction-id\"]",
													"pm.environment.set(\"transaction_id1\", tx_id)",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(jsonData.length).to.eql(1)",
													"  pm.expect(jsonData[0][\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"  pm.expect(jsonData[0][\"metadata\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(jsonData[0][\"metadata\"][0][\"diff\"][0][\"path\"]).to.eql(\"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test\");  ",
													"  pm.expect(jsonData[0][\"metadata\"][0][\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"stream\\\": [\\n    {\\n      \\\"name\\\": \\\"revert-test\\\",\\n      \\\"description\\\": \\\"item created for revert testing\\\",\\n      \\\"replaySupport\\\": true\\n    }\\n  ]\\n}\"); ",
													"  ",
													"  pm.expect(jsonData[0][\"commit-time\"]).to.not.be.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transaction-log:transactions-metadata",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transaction-log:transactions-metadata"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Multiple-update on two-devices",
							"item": [
								{
									"name": "update configuration VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream\": [\n        {\n            \"name\": \"revert-test\",\n            \"description\": \"changed in second case\",\n            \"replaySupport\": false\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"confd_dyncfg:confdConfig",
												"notifications",
												"eventStreams",
												"stream=revert-test"
											]
										}
									},
									"response": []
								},
								{
									"name": "update configuration VNF16",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"tvi-0/9\",\n            \"enable\": true,\n            \"unit\": [\n                {\n                    \"name\": 0,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"10.4.64.105/32\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            \"mode\": \"ipsec\",\n            \"type\": \"p2mp-esp\",\n            \"description\": \"ESP Tunnel Interface for Customer3 Control VR\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{nodeVNF16_id}}/frinx-uniconfig-topology:configuration/interfaces:interfaces/tvi=tvi-0%2F9",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{nodeVNF16_id}}",
												"frinx-uniconfig-topology:configuration",
												"interfaces:interfaces",
												"tvi=tvi-0%2F9"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\", \"{{nodeVNF16_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show transactions-metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json()[\"transactions-metadata\"][\"transaction-metadata\"];",
													"",
													"pm.test(\"Validate tx1\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx1 = jsonData.find",
													"    (m => m[\"transaction-id\"] === pm.environment.get(\"transaction_id1\"));",
													"  pm.expect(tx1).to.be.an(\"object\", \"Could not find metadata for transaction \" + pm.environment.get(\"transaction_id1\"));",
													"",
													"  pm.expect(tx1[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"  pm.expect(tx1[\"metadata\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(tx1[\"metadata\"][0][\"diff\"][0][\"path\"]).to.eql(\"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test\");  ",
													"  pm.expect(tx1[\"metadata\"][0][\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"stream\\\": [\\n    {\\n      \\\"name\\\": \\\"revert-test\\\",\\n      \\\"description\\\": \\\"item created for revert testing\\\",\\n      \\\"replaySupport\\\": true\\n    }\\n  ]\\n}\"); ",
													"  ",
													"  pm.expect(tx1[\"commit-time\"]).to.not.be.empty; ",
													"});",
													"",
													"pm.test(\"Validate tx2\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx2 = jsonData.find",
													"    (m => m[\"transaction-id\"] != pm.environment.get(\"transaction_id1\"));",
													"  pm.expect(tx2).to.be.an(\"object\", \"Could not find metadata for the second transaction \");",
													"",
													"  var tx_id = tx2[\"transaction-id\"]",
													"  pm.environment.set(\"transaction_id2\", tx_id)",
													"",
													"  pm.expect(tx2[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"",
													"  //find metadata for versa",
													"  const meta1 = tx2[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"node_id\"));",
													"  pm.expect(meta1).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  const diff0 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff0).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff0[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"item created for revert testing\\\"\\n}\");   ",
													"  pm.expect(diff0[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"changed in second case\\\"\\n}\"); ",
													"",
													"  // diff 1",
													"  const diff1 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff1).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff1[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": true\\n}\");   ",
													"  pm.expect(diff1[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": false\\n}\"); ",
													"",
													"  //find metadata for versa16",
													"  const meta2 = tx2[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"nodeVNF16_id\"));",
													"  pm.expect(meta2).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"nodeVNF16_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(meta2[\"diff\"][0][\"path\"]).to.eql(\"/interfaces:interfaces\");    ",
													"  pm.expect(meta2[\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"interfaces:interfaces\\\": {\\n    \\\"tvi\\\": [\\n      {\\n        \\\"name\\\": \\\"tvi-0/9\\\",\\n        \\\"enable\\\": true,\\n        \\\"unit\\\": [\\n          {\\n            \\\"name\\\": 0,\\n            \\\"enable\\\": true,\\n            \\\"family\\\": {\\n              \\\"inet\\\": {\\n                \\\"address\\\": [\\n                  {\\n                    \\\"addr\\\": \\\"10.4.64.105/32\\\"\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        ],\\n        \\\"mode\\\": \\\"ipsec\\\",\\n        \\\"type\\\": \\\"p2mp-esp\\\",\\n        \\\"description\\\": \\\"ESP Tunnel Interface for Customer3 Control VR\\\"\\n      }\\n    ]\\n  }\\n}\");  ",
													"  ",
													"  pm.expect(tx2[\"commit-time\"]).to.not.be.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transaction-log:transactions-metadata",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transaction-log:transactions-metadata"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unsuccessful-update and check-log",
							"item": [
								{
									"name": "update configuration VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"org:orgs\": {\n        \"org\": \n        [\n            {\n                \"name\": \"TESTING-PROVIDER\",\n                \"traffic-identification\": {\n                    \"using-networks\": [\n                        \"TESTING-NETWORK35\"\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/configuration/org:orgs",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"configuration",
												"org:orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-message\"]).to.eql(\"RemoteDevice{\" + pm.environment.get(\"node_id\") + \"}: Validate failed. illegal reference /orgs/org[name='TESTING-PROVIDER']/traffic-identification/using-networks\\n\");",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show transactions-metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json()[\"transactions-metadata\"][\"transaction-metadata\"];",
													"",
													"pm.test(\"Validate tx1\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx1 = jsonData.find",
													"    (m => m[\"transaction-id\"] === pm.environment.get(\"transaction_id1\"));",
													"  pm.expect(tx1).to.be.an(\"object\", \"Could not find metadata for transaction \" + pm.environment.get(\"transaction_id1\"));",
													"  pm.expect(tx1[\"transaction-id\"]).to.eql(postman.getEnvironmentVariable(\"transaction_id1\"));",
													"});",
													"",
													"pm.test(\"Validate tx2\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx2 = jsonData.find",
													"    (m => m[\"transaction-id\"] === pm.environment.get(\"transaction_id2\"));",
													"  pm.expect(tx2).to.be.an(\"object\", \"Could not find metadata for the second transaction \" + pm.environment.get(\"transaction_id2\"));",
													"  pm.expect(tx2[\"transaction-id\"]).to.eql(postman.getEnvironmentVariable(\"transaction_id2\"));  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transaction-log:transactions-metadata",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transaction-log:transactions-metadata"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"  pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-oper",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate result\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n\t\t}\n\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Single-update and check-replace-oldest-item",
							"item": [
								{
									"name": "update configuration VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"snmp:view\": [\n        {\n            \"name\": \"revert-test-view\",\n            \"subtree\": [\n                {\n                    \"oids\": \"1.1\",\n                    \"included\": [\n                        null\n                    ]\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/snmp:snmp/vacm/view=revert-test-view",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"snmp:snmp",
												"vacm",
												"view=revert-test-view"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show transactions-metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json()[\"transactions-metadata\"][\"transaction-metadata\"];",
													"",
													"pm.test(\"Not present tx1\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"transaction_id1\"));",
													"});",
													"",
													"pm.test(\"Validate tx2\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx2 = jsonData.find",
													"    (m => m[\"transaction-id\"] === pm.environment.get(\"transaction_id2\"));",
													"  pm.expect(tx2).to.be.an(\"object\", \"Could not find metadata for the second transaction \" + pm.environment.get(\"transaction_id2\"));",
													"",
													"  pm.expect(tx2[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"",
													"  //find metadata for versa",
													"  const meta1 = tx2[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"node_id\"));",
													"  pm.expect(meta1).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  const diff0 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff0).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff0[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"item created for revert testing\\\"\\n}\");   ",
													"  pm.expect(diff0[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"changed in second case\\\"\\n}\"); ",
													"",
													"  // diff 1",
													"  const diff1 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff1).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff1[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": true\\n}\");   ",
													"  pm.expect(diff1[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": false\\n}\"); ",
													"",
													"  //find metadata for versa16",
													"  const meta2 = tx2[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"nodeVNF16_id\"));",
													"  pm.expect(meta2).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"nodeVNF16_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(meta2[\"diff\"][0][\"path\"]).to.eql(\"/interfaces:interfaces\");    ",
													"  pm.expect(meta2[\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"interfaces:interfaces\\\": {\\n    \\\"tvi\\\": [\\n      {\\n        \\\"name\\\": \\\"tvi-0/9\\\",\\n        \\\"enable\\\": true,\\n        \\\"unit\\\": [\\n          {\\n            \\\"name\\\": 0,\\n            \\\"enable\\\": true,\\n            \\\"family\\\": {\\n              \\\"inet\\\": {\\n                \\\"address\\\": [\\n                  {\\n                    \\\"addr\\\": \\\"10.4.64.105/32\\\"\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        ],\\n        \\\"mode\\\": \\\"ipsec\\\",\\n        \\\"type\\\": \\\"p2mp-esp\\\",\\n        \\\"description\\\": \\\"ESP Tunnel Interface for Customer3 Control VR\\\"\\n      }\\n    ]\\n  }\\n}\");  ",
													"  ",
													"  pm.expect(tx2[\"commit-time\"]).to.not.be.empty; ",
													"});",
													"",
													"pm.test(\"Validate tx3\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx3 = jsonData.find",
													"    (m => m[\"transaction-id\"] != pm.environment.get(\"transaction_id2\"));",
													"  pm.expect(tx3).to.be.an(\"object\", \"Could not find metadata for the third transaction \");",
													"",
													"  var tx_id = tx3[\"transaction-id\"]",
													"  pm.environment.set(\"transaction_id3\", tx_id)",
													"",
													"  pm.expect(tx3[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"",
													"  //find metadata for versa",
													"  const meta1 = tx3[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"node_id\"));",
													"  pm.expect(meta1).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(meta1[\"diff\"][0][\"path\"]).to.eql(\"/snmp:snmp/vacm/view=revert-test-view\");  ",
													"  pm.expect(meta1[\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"view\\\": [\\n    {\\n      \\\"name\\\": \\\"revert-test-view\\\",\\n      \\\"subtree\\\": [\\n        {\\n          \\\"oids\\\": \\\"1.1\\\",\\n          \\\"included\\\": [\\n            null\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\"); ",
													"",
													"  pm.expect(tx3[\"commit-time\"]).to.not.be.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transaction-log:transactions-metadata",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transaction-log:transactions-metadata"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Revert last-two transactions",
							"item": [
								{
									"name": "revert",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Revert output\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-transactions\": {\n\t\t\t\"transaction\": [\"{{transaction_id2}}\", \"{{transaction_id3}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/transaction-log:revert-changes",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"transaction-log:revert-changes"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"overall-status:complete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\", \"{{nodeVNF16_id}}\"]\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show transactions-metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json()[\"transactions-metadata\"][\"transaction-metadata\"];",
													"",
													"pm.test(\"Not present tx1\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"transaction_id1\"));",
													"});",
													"",
													"pm.test(\"Not present tx2\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"transaction_id2\"));",
													"});",
													"",
													"pm.test(\"Validate tx3\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx3 = jsonData.find",
													"    (m => m[\"transaction-id\"] === pm.environment.get(\"transaction_id3\"));",
													"  pm.expect(tx3).to.be.an(\"object\", \"Could not find metadata for the third transaction \" + pm.environment.get(\"transaction_id3\"));",
													"",
													"  pm.expect(tx3[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"",
													"  //find metadata for versa",
													"  const meta1 = tx3[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"node_id\"));",
													"  pm.expect(meta1).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(meta1[\"diff\"][0][\"path\"]).to.eql(\"/snmp:snmp/vacm/view=revert-test-view\");  ",
													"  pm.expect(meta1[\"diff\"][0][\"data-after\"]).to.eql(\"{\\n  \\\"view\\\": [\\n    {\\n      \\\"name\\\": \\\"revert-test-view\\\",\\n      \\\"subtree\\\": [\\n        {\\n          \\\"oids\\\": \\\"1.1\\\",\\n          \\\"included\\\": [\\n            null\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\"); ",
													"",
													"  pm.expect(tx3[\"commit-time\"]).to.not.be.empty; ",
													"});",
													"",
													"pm.test(\"Validate tx4\", function() {",
													"  pm.expect(jsonData.length).to.eql(2)",
													"",
													"  const tx4 = jsonData.find",
													"    (m => m[\"transaction-id\"] != pm.environment.get(\"transaction_id3\"));",
													"  pm.expect(tx4).to.be.an(\"object\", \"Could not find metadata for the fourth transaction \");",
													"",
													"  pm.expect(tx4[\"username\"]).to.eql(pm.environment.get(\"username\"));",
													"",
													"  //find metadata for versa",
													"  const meta1 = tx4[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"node_id\"));",
													"  pm.expect(meta1).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"node_id\"));",
													"",
													"  // diff 0",
													"  const diff0 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/snmp:snmp/vacm/view=revert-test-view\");",
													"  pm.expect(diff0).to.be.an(\"object\", \"Could not find path \" + \"/snmp:snmp/vacm/view=revert-test-view\");",
													"  pm.expect(diff0[\"path\"]).to.eql(\"/snmp:snmp/vacm/view=revert-test-view\");  ",
													"  pm.expect(diff0[\"data-before\"]).to.eql(\"{\\n  \\\"view\\\": [\\n    {\\n      \\\"name\\\": \\\"revert-test-view\\\",\\n      \\\"subtree\\\": [\\n        {\\n          \\\"oids\\\": \\\"1.1\\\",\\n          \\\"included\\\": [\\n            null\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\"); ",
													"  ",
													"  // diff 1",
													"  const diff1 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff1).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description\");",
													"  pm.expect(diff1[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"changed in second case\\\"\\n}\");   ",
													"  pm.expect(diff1[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:description\\\": \\\"item created for revert testing\\\"\\n}\"); ",
													"  ",
													"  // diff 2",
													"  const diff2 = meta1[\"diff\"].find",
													"    (m => m[\"path\"] === \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff2).to.be.an(\"object\", \"Could not find path \" + \"/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport\");",
													"  pm.expect(diff2[\"data-before\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": false\\n}\");    ",
													"  pm.expect(diff2[\"data-after\"]).to.eql(\"{\\n  \\\"confd_dyncfg:replaySupport\\\": true\\n}\");  ",
													"",
													"  //find metadata for versa16",
													"  const meta2 = tx4[\"metadata\"].find",
													"    (m => m[\"node-id\"] === pm.environment.get(\"nodeVNF16_id\"));",
													"  pm.expect(meta2).to.be.an(\"object\", \"Could not find metadata for the device \" + pm.environment.get(\"nodeVNF16_id\"));",
													"",
													"  // diff 0",
													"  pm.expect(meta2[\"diff\"][0][\"path\"]).to.eql(\"/interfaces:interfaces\");  ",
													"  pm.expect(meta2[\"diff\"][0][\"data-before\"]).to.eql(\"{\\n  \\\"interfaces:interfaces\\\": {\\n    \\\"tvi\\\": [\\n      {\\n        \\\"name\\\": \\\"tvi-0/9\\\",\\n        \\\"enable\\\": true,\\n        \\\"unit\\\": [\\n          {\\n            \\\"name\\\": 0,\\n            \\\"enable\\\": true,\\n            \\\"family\\\": {\\n              \\\"inet\\\": {\\n                \\\"address\\\": [\\n                  {\\n                    \\\"addr\\\": \\\"10.4.64.105/32\\\"\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        ],\\n        \\\"mode\\\": \\\"ipsec\\\",\\n        \\\"type\\\": \\\"p2mp-esp\\\",\\n        \\\"description\\\": \\\"ESP Tunnel Interface for Customer3 Control VR\\\"\\n      }\\n    ]\\n  }\\n}\"); ",
													"",
													"  pm.expect(tx4[\"commit-time\"]).to.not.be.empty; ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/transaction-log:transactions-metadata",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"transaction-log:transactions-metadata"
											]
										}
									},
									"response": []
								},
								{
									"name": "check deleted view on VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/snmp:snmp/vacm/view=revert-test-view?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"snmp:snmp",
												"vacm",
												"view=revert-test-view"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check reverted stream description on VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.expect(pm.response.json()[\"description\"]).to.eql(\"item created for revert testing\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/description?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"confd_dyncfg:confdConfig",
												"notifications",
												"eventStreams",
												"stream=revert-test",
												"description"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check reverted stream replay-support on VNF20",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.expect(pm.response.json()[\"replaySupport\"]).to.eql(true);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{node_id}}/frinx-uniconfig-topology:configuration/confd_dyncfg:confdConfig/notifications/eventStreams/stream=revert-test/replaySupport?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"confd_dyncfg:confdConfig",
												"notifications",
												"eventStreams",
												"stream=revert-test",
												"replaySupport"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check deleted interface on VNF16",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_uniconfig}}/node={{nodeVNF16_id}}/frinx-uniconfig-topology:configuration/interfaces:interfaces?content=nonconfig",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology={{topology_id_uniconfig}}",
												"node={{nodeVNF16_id}}",
												"frinx-uniconfig-topology:configuration",
												"interfaces:interfaces"
											],
											"query": [
												{
													"key": "content",
													"value": "nonconfig"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Unmount two VNF-devices",
					"item": [
						{
							"name": "unmount VNF16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeVNF16_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{nodeVNF16_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted VNF16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{nodeVNF16_id}}?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node={{nodeVNF16_id}}"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	}
}