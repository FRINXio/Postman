{
	"info": {
		"_postman_id": "a946e41b-d97b-4150-8372-56119d218741",
		"name": "pc_uniconfig_lag",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 LAG CRUD",
			"description": null,
			"item": [
				{
					"name": "XR6 LAG CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5d4e91-c7ac-4063-bee4-8eda6c4a23a4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\nsampler-map {{flow_prereq_sampler1}}1\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}2\nrandom 1 out-of 10\nexit\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "create lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"",
											"pm.test(\"Validate frinx-damping:damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate aggregation presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 LAG CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Lag not in interfaces\", function () {",
											"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "374a6185-9bd5-4e42-94b4-d92d3194e142",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\nno sampler-map {{flow_prereq_sampler1}}1\nno sampler-map {{flow_prereq_sampler2}}2\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LAG CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 LAG CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "create lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"",
											"pm.test(\"Validate frinx-damping:damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate aggregation presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Lag not in interfaces\", function () {",
											"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LAG-FULL CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 LAG-FULL CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos LAG CRUD",
			"description": null,
			"item": [
				{
					"name": "Junos LAG CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											"",
											"",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LAG CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
											"});",
											"pm.test(\"Validate description not rpesence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate mtu not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Lag not in interfaces\", function () {",
											"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "LAG-FULL CRUD",
					"description": null,
					"item": [
						{
							"name": "create lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
											"});",
											"",
											"pm.test(\"Validate suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress\")));",
											"});",
											"pm.test(\"Validate max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
											"});",
											"pm.test(\"Validate half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
											"});",
											"pm.test(\"Validate damp enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
											"});",
											"pm.test(\"Validate reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"pm.test(\"Validate min-links\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description_upd}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress_upd}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
											"});",
											"",
											"pm.test(\"Validate suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress_upd\")));",
											"});",
											"pm.test(\"Validate max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
											"});",
											"pm.test(\"Validate half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
											"});",
											"pm.test(\"Validate damp enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
											"});",
											"pm.test(\"Validate reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description_upd\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"pm.test(\"Validate min-links\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lag_prefix}}{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lag interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Lag not in interfaces\", function () {",
											"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG CRUD",
					"description": null,
					"item": [
						{
							"name": "LAG CRUD Config",
							"description": null,
							"item": [
								{
									"name": "update lag config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description_upd}}_T^EST\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										},
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94469d59-ce8f-4575-bcb9-ae0d446e0b71",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"brundle updated_T^EST\");",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Subinterface",
							"description": null,
							"item": [
								{
									"name": "create interface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate config ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"subinterfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed lag subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD IPv6",
							"description": null,
							"item": [
								{
									"name": "create ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"subinterfaces",
												"subinterface",
												"0",
												"ipv6",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface with ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"subinterfaces",
												"subinterface",
												"0",
												"ipv6",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"subinterfaces",
												"subinterface",
												"0",
												"ipv6",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface without ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"subinterfaces",
												"subinterface",
												"0",
												"ipv6",
												"addresses"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Damping",
							"description": null,
							"item": [
								{
									"name": "create lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"damping"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"",
													"pm.test(\"Validate suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress\")));",
													"});",
													"pm.test(\"Validate max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
													"});",
													"pm.test(\"Validate half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
													"});",
													"pm.test(\"Validate damp enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
													"});",
													"pm.test(\"Validate reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"damping"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Statistics",
							"description": null,
							"item": [
								{
									"name": "create statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"statistics"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_load-interval\")))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"statistics"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationNoBfd",
							"description": null,
							"item": [
								{
									"name": "create aggregation without bfd",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"aggregation"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show aggregation without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"aggregation"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfd",
							"description": null,
							"item": [
								{
									"name": "create aggregation with bgd",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        },\n        \"bfd\": {\n            \"config\": {\n                \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \"multiplier\": {{lag_bfd_multiplier}},\n                \"min-interval\": {{lag_bfd_min-interval}}\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"aggregation"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show aggregation with bgf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													"",
													"pm.test(\"Validate bfd destination address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"destination-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_bfd_destination-address\"));",
													"});",
													"pm.test(\"Validate bfd multiplier\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_multiplier\")));",
													"});",
													"pm.test(\"Validate bfd min-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_min-interval\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"aggregation"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfdLinkSpeed",
							"description": null,
							"item": [
								{
									"name": "create aggregation with link-speed",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n    \t\t\"aggregation\": {\n    \t\t\t\"config\": {\n            \t\t\"min-links\": {{lag_min-links}},\n            \t\t\"frinx-juniper-if-aggregate-extension:link-speed\": \"{{lag_link_speed}}\"\n        \t\t},\n        \t\t\"bfd\": {\n            \t\t\"config\": {\n            \t\t\t\"local-address\": \"{{lag_ip}}\",\n                \t\t\"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \t\t\"multiplier\": {{lag_bfd_multiplier}},\n                \t\t\"min-interval\": {{lag_bfd_min-interval}}\n            \t\t}\n        \t\t}\n    \t\t}\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface with aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													"",
													"pm.test(\"Validate link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate min-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_min-interval\")));",
													"});",
													"pm.test(\"Validate local-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"local-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate destination-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"destination-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_bfd_destination-address\"));",
													"});",
													"pm.test(\"Validate multiplier\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_multiplier\")));",
													"});",
													"pm.test(\"Validate frinx-juniper-if-aggregate-extension:link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lag aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}",
												"aggregation"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lag_prefix}}{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Flows",
							"description": null,
							"item": [
								{
									"name": "show no LAG flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (delete ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow (deleted ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow (deleted ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-flows is not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LAG netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted LAG netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"//This should not be present",
													"pm.test(\"No IPv4 ingress flow present\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  var is_ipv4_ingress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      is_ipv4_ingress = true;",
													"    }",
													"  }",
													"  if (is_ipv4_ingress) {",
													"    pm.expect.fail(null,null,'An ipv4 ingress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no LAG flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Acls",
							"description": null,
							"item": [
								{
									"name": "show no LAG acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ingress-acl-set\": [\n        {\n            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv4_acl1}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv4_acl1}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status = fail\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status= fail\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 1; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (delete ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl (deleted ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl (deleted ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-acl-sets are  present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl (original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LAG acl netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv6_acl2}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv6_acl2}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted LAG acl netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 ingress acl\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 ingress-acl was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LAG acl netflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no LAG acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}