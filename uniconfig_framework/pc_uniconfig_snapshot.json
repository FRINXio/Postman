{
	"info": {
		"_postman_id": "7a9281fb-e651-4362-81d6-6509d30b2510",
		"name": "pc_uniconfig_snapshot",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "SNAPSHOT",
					"item": [
						{
							"name": "check default number of snapshot",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate limit\", function() {",
											"  pm.expect(pm.response.json()[\"snapshots-metadata\"][\"limit\"]).to.eql(10);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/snapshot-manager:snapshots-metadata",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"snapshot-manager:snapshots-metadata"
									]
								},
								"description": "Reads taken snapshot."
							},
							"response": []
						},
						{
							"name": "change max number of limit to 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94f457c2-05ab-47fc-af15-a5b1fcbfca81",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"limit\": 4\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:maximum-snapshot-limit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:maximum-snapshot-limit"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "create snapshot1 without target node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d33ead-ed20-49f4-a3c7-91ada666cd59",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Nodes are not specified in input request.\")",
											"        }",
											"});  ",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "create snapshot1 with target node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d33ead-ed20-49f4-a3c7-91ada666cd59",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											" pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot1 already exist. Cannot create snapshot.\");",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "create snapshot1 with same name invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d33ead-ed20-49f4-a3c7-91ada666cd59",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											" pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot1 already exist. Cannot create snapshot.\");",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Cannot create snapshot: Snapshot with name 'snapshot1' already exists.\");",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "read snapshot1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5f0693c-81c3-449d-9300-a59b8db1a0b3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate topology-id =snapshot1\", function() {",
											"  pm.expect(pm.response.json()[\"topology\"][0][\"topology-id\"]).to.eql(\"snapshot1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								},
								"description": "Reads taken snapshot."
							},
							"response": []
						},
						{
							"name": "enable snmp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-snmp:interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\",\n                        \"enabled\": true\n                    }\n                ],\n                \"interface-id\": \"{{snmp_inf_id_physical}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-snmp:snmp",
										"interfaces",
										"interface",
										"{{snmp_url_inf_id_physical}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "872ffef4-788a-49b6-8470-e07ed9ea6f1d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check snmp enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
											"});",
											"",
											"pm.test(\"Validate snmp trap event set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.have.property(\"enabled-trap-for-event\")",
											"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
											"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"enabled\"]).to.eql(true);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-snmp:snmp",
										"interfaces",
										"interface",
										"{{snmp_url_inf_id_physical}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-snapshot1 without target node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6adc746c-f9e0-45af-b23b-432b4707c550",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Nodes are not specified in input request.\")",
											"        }",
											"});  ",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:replace-config-with-snapshot"
									]
								},
								"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
							},
							"response": []
						},
						{
							"name": "replace-config-with-snapshot invalid non existing snapshot9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6adc746c-f9e0-45af-b23b-432b4707c550",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											" pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot9 does not exist.\");",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name 'snapshot9' does not exist.\")",
											"        }",
											"});  ",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot9\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:replace-config-with-snapshot"
									]
								},
								"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
							},
							"response": []
						},
						{
							"name": "replace-config-with-snapshot1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6adc746c-f9e0-45af-b23b-432b4707c550",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:replace-config-with-snapshot"
									]
								},
								"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa3eb04-961d-4120-a271-f231a1d4e641",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check snapshot1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-snmp:snmp",
										"interfaces",
										"interface",
										"{{snmp_url_inf_id_physical}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create snapshot2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e77a444-3a30-443f-b595-c85684cd0485",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot2\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "update interface config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:config\": {\n    \t\t\"type\": \"iana-if-type:ethernetCsmacd\",\n            \"mtu\": {{eth_mtu}},\n\t\t    \"description\": \"snapshot2\",\n            \"name\": \"{{eth_intf-id}}\"\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10ca20aa-9625-4acb-8bbd-403ef5cd6139",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated interface config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da68f5d8-0f14-4664-9ed5-1650d4ed1d74",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"snapshot2\");",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-snapshot2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcc607b4-0e90-4c7a-a200-2cade955d3f3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot2\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:replace-config-with-snapshot"
									]
								},
								"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
							},
							"response": []
						},
						{
							"name": "interface commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28a9ffae-a08e-4593-be98-e4d739810e9d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check snapshot2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53e60a18-29fa-4947-b98f-727e4ee00b10",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"description\");",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"eth_mtu\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create snapshot3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acc0bcff-1ef9-49e7-8e22-9d1c09e68329",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot3\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "create snapshot4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c9dbb39-489e-4354-b61c-c9092daa561f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot4\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "create snapshot5 invalid over limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405d5273-a4d9-444d-a34e-47ad025af8b7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											" pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Cannot create snapshot. Maximum number of snapshots exceeded. Current number of snapshots: 4.Snapshot limit: 4\");",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Cannot create snapshot. Maximum number of snapshots exceeded. Snapshot limit: 4\");",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot5\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "delete snapshot1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "415f64b3-1962-41bd-b2d6-c42543253c8f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "delete snapshot1 with same name invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "415f64b3-1962-41bd-b2d6-c42543253c8f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											" pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot1 does not exist. Cannot delete snapshot.\");",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"         pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot1 does not exist. Cannot delete snapshot.\");",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "create snapshot5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0cdd229-986e-444f-85de-b94810a5db4b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"",
											"pm.test(\"Validate node result\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
											"         ",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"         }",
											"});    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot5\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								},
								"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
							},
							"response": []
						},
						{
							"name": "check number of snapshots",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6058e47-e824-4b69-8a79-29ad4c03d6ec",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate limit\", function() {",
											"  pm.expect(pm.response.json()[\"snapshots-metadata\"][\"limit\"]).to.eql(4);",
											"});",
											"",
											"var snapshot=pm.response.json()[\"snapshots-metadata\"][\"snapshot\"];",
											"var result = [] ;",
											"for(var i = 0; i < snapshot.length; i++){",
											"    result[i]=snapshot[i][\"name\"]",
											"}",
											"",
											"pm.test('Validate snapshot2', function () {",
											"    for(var i = 0; i < snapshot.length; i++){",
											"            if(snapshot[i][\"name\"] == \"snapshot2\"){",
											"                pm.expect(snapshot[i][\"name\"]).to.include(\"snapshot2\");",
											"                break;",
											"                }",
											"            var found = result.includes('snapshot2')",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    ",
											"pm.test('Validate snapshot4', function () {",
											"    for(var i = 0; i < snapshot.length; i++){",
											"            if(snapshot[i][\"name\"] == \"snapshot4\"){",
											"                pm.expect(snapshot[i][\"name\"]).to.include(\"snapshot4\");",
											"                break;",
											"            }",
											"            var found = result.includes('snapshot4')",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    ",
											"pm.test('Validate snapshot5', function () {",
											"    for(var i = 0; i < snapshot.length; i++){",
											"            if(snapshot[i][\"name\"] == \"snapshot5\"){",
											"                pm.expect(snapshot[i][\"name\"]).to.include(\"snapshot5\");",
											"                break;",
											"            }",
											"            var found = result.includes('snapshot5')",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    ",
											"pm.test('Validate snapshot3', function () {",
											"    for(var i = 0; i < snapshot.length; i++){",
											"            if(snapshot[i][\"name\"] == \"snapshot3\"){",
											"                pm.expect(snapshot[i][\"name\"]).to.include(\"snapshot3\");",
											"                break;",
											"            }",
											"            var found = result.includes('snapshot3')",
											"            pm.expect(found).to.be.true;",
											"        }",
											"    });",
											"    ",
											"    ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/snapshot-manager:snapshots-metadata",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"snapshot-manager:snapshots-metadata"
									]
								},
								"description": "Reads taken snapshot."
							},
							"response": []
						},
						{
							"name": "delete snapshot2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33f26995-b6fb-4285-8a7b-11c693e2456b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot2\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "delete snapshot3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd5eb457-0a21-48ce-a499-10cd128b7ce4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot3\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "delete snapshot4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "236b4404-3ac2-4127-bc28-af81d69f5d4b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot4\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "delete snapshot5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c1c766d-a5b6-4295-8ecd-3877c1b94917",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});",
											"",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"  pm.test(\"Validate configuration-status\", function() {",
											"     if ( [\"output\"] ){",
											"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"        }",
											"});  ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot5\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								},
								"description": "Removes taken snapshot."
							},
							"response": []
						},
						{
							"name": "check number of snapshots after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d2367d6-c4ac-4c1f-a457-07f0f0513898",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate limit\", function() {",
											"  pm.expect(pm.response.json()[\"snapshots-metadata\"][\"limit\"]).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/snapshot-manager:snapshots-metadata",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"snapshot-manager:snapshots-metadata"
									]
								},
								"description": "Reads taken snapshot."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}