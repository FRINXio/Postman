{
	"info": {
		"name": "FRINX UNIFIED",
		"_postman_id": "0ac9ed1a-685e-5183-29c9-abe918e6db58",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Linux",
			"item": [
				{
					"name": "Mount",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{linux_ip}}\",\n      \"cli-topology:port\" : \"{{linux_port}}\",\n      \"cli-topology:transport-type\" : \"{{linux_protocol}}\",\n      \n      \"cli-topology:device-type\" : \"*\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{linux_username}}\",\n      \"cli-topology:password\" : \"{{linux_password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \n      \"cli-topology:keepalive-delay\": 55,\n      \"cli-topology:keepalive-initial-delay\": 55,\n      \"cli-topology:keepalive-timeout\": 120\n\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('Check status connected');",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "List home directory",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"ls ~\"\n  }\n}"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
					},
					"response": []
				},
				{
					"name": "Unmount",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check unmounted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "IOS XR",
			"item": [
				{
					"name": "XR Mount",
					"item": [
						{
							"name": "Mount IOS XR netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"node-extension:reconcile\" : false,\n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected CLI');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR Interface CRUD",
					"item": [
						{
							"name": "XR Interface CRUD READERS",
							"item": [
								{
									"name": "Create Loopback NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_interface}}\nno shutdown\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show all interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  var json_string = pm.response.json()[\"interfaces\"][\"interface\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (pm.environment.get(\"test_interface\") == json_string[i][\"name\"]) {",
													"      pm.expect(json_string[i][\"state\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"      pm.expect(json_string[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"      pm.expect(json_string[i][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"    }",
													"  }",
													"      ",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/"
									},
									"response": []
								},
								{
									"name": "show interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
									},
									"response": []
								},
								{
									"name": "show no IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
									},
									"response": []
								},
								{
									"name": "Set IP4 and IP6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_interface}}\nip address {{ip41}} 255.255.255.0\nipv6 address {{ip62}} link-local\nno shutdown\ncommit\nexit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show IP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
									},
									"response": []
								},
								{
									"name": "show IP4 single",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/{{ip41}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting IP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/255.255.255.255"
									},
									"response": []
								},
								{
									"name": "Delete Loopback NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_interface}}\n     no ip address\n     no ipv6 address\n     no interface {{test_interface}}\n     commit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR Unmount",
					"item": [
						{
							"name": "DELETE IOS XR",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "DELETE Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR BGP summary",
					"item": [
						{
							"name": "XR BGP summary READERS",
							"item": [
								{
									"name": "Configure bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router bgp {{bgp}}\nbgp router-id {{router}}\naddress-family ipv4 unicast\nexit\naddress-family vpnv4 unicast\nexit\nneighbor {{neighbor}}\nremote-as {{bgp}}\nupdate-source {{test_interface}}\ncommit\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate as\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"state\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
													"});",
													"pm.test(\"Validate as\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
													"});",
													"",
													"",
													"pm.test(\"Validate router-id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"state\"][\"router-id\"]).to.eql(pm.environment.get(\"router\"));",
													"});",
													"pm.test(\"Validate router-id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"router\"));",
													"});",
													"",
													"pm.test(\"Validate peer-as\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"state\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
													"});",
													"pm.test(\"Validate peer-as\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
													"});",
													"",
													"",
													"pm.test(\"Validate neighbor-address\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
													"});",
													"pm.test(\"Validate neighbor-address\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"state\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
													"});",
													"pm.test(\"Validate neighbor-address\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
													"});",
													"",
													"",
													"pm.test(\"Validate local-address\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_nonexisting-process-name}}"
									},
									"response": []
								},
								{
									"name": "Delete bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router bgp {{bgp}}\nno interface {{test_interface}}\ncommit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR static route",
					"item": [
						{
							"name": "XR static route READERS",
							"item": [
								{
									"name": "Configure static route NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router static\naddress-family ipv4 unicast\n{{ip-route}} {{ip-route2}}\n{{ip-route}} {{static_route_test_interface}} {{ip-route3}} metric 2\nexit\naddress-family ipv6 unicast\n{{ip61}} {{static_route_test_interface}} {{ip62}}\ncommit\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show ip route static",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate interface\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"next-hops\"][\"next-hop\"][1][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"static_route_test_interface\"));",
													"});",
													"",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"prefix\"]).to.eql(pm.environment.get(\"ip-route\"));",
													"});",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"ip-route\"));",
													"});",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"state\"][\"prefix\"]).to.eql(pm.environment.get(\"ip-route\"));",
													"});",
													"",
													"",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"next-hops\"][\"next-hop\"][0][\"state\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip-route2\"));",
													"});",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"next-hops\"][\"next-hop\"][0][\"config\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip-route2\"));",
													"});",
													"",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"next-hops\"][\"next-hop\"][1][\"state\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip-route3\"));",
													"});",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][0][\"next-hops\"][\"next-hop\"][1][\"config\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip-route3\"));",
													"});",
													"",
													"",
													"pm.test(\"Validate interface\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"next-hops\"][\"next-hop\"][0][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"static_route_test_interface\"));",
													"});",
													"",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"prefix\"]).to.eql(pm.environment.get(\"ip61\"));",
													"});",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"ip61\"));",
													"});",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"state\"][\"prefix\"]).to.eql(pm.environment.get(\"ip61\"));",
													"});",
													"",
													"",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"next-hops\"][\"next-hop\"][0][\"state\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip62\"));",
													"});",
													"pm.test(\"Validate next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"static-routes\"][\"static\"][1][\"next-hops\"][\"next-hop\"][0][\"config\"][\"next-hop\"]).to.eql(pm.environment.get(\"ip62\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:STATIC/default"
									},
									"response": []
								},
								{
									"name": "show nonexisting static route",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:STATIC/xxx"
									},
									"response": []
								},
								{
									"name": "Delete configuration of static route NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router static\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR ospf",
					"item": [
						{
							"name": "XR ospf READERS",
							"item": [
								{
									"name": "Configure ospf NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router ospf {{ospf}}\nrouter-id {{router2}}\naddress-family ipv4\narea {{area}}\ninterface {{test_interface}}\ncommit\nexit\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show router ospf type, ID, interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
													"});",
													"",
													"// THIS ONE (state/router-id) DOES NOT WORK AT XR6",
													"pm.test(\"Validate router-id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"state\"][\"router-id\"]).to.eql(pm.environment.get(\"router2\"));",
													"});",
													"pm.test(\"Validate router-id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"router2\"));",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
													"});",
													"",
													"pm.test(\"Validate identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
													"});",
													"pm.test(\"Validate identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
													"});",
													"pm.test(\"Validate identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"state\"][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting router ospf type, ID, interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/666"
									},
									"response": []
								},
								{
									"name": "Delete ospf NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router ospf {{ospf}}\nno interface {{test_interface}}\ncommit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR CDP",
					"item": [
						{
							"name": "XR CDP READERS",
							"item": [
								{
									"name": "Configure CDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"cdp\n interface {{cdp_lldp_test_interface}}\n cdp\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show cdp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"cdp\"][\"interfaces\"][\"interface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"cdp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"cdp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-cdp:cdp"
									},
									"response": []
								},
								{
									"name": "Delete CDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{cdp_lldp_test_interface}}\n no cdp\n exit\n commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted cdp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-cdp:cdp"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR LLDP",
					"item": [
						{
							"name": "XR LLDP READERS",
							"item": [
								{
									"name": "Configure LLDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"lldp\n     commit\n     exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show lldp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"At leaas one interface has lldp configured\", function() {",
													"  var json_string = pm.response.json()[\"lldp\"][\"interfaces\"][\"interface\"];",
													"  var found_at_least_one_lldp_interface = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (pm.environment.get(\"cdp_lldp_test_interface\") == json_string[i][\"name\"]) {",
													"      found_at_least_one_lldp_interface = found_at_least_one_lldp_interface || true;",
													"      pm.expect(json_string[i][\"state\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"      pm.expect(json_string[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"      pm.expect(json_string[i][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface\"));",
													"    } else if (pm.environment.get(\"cdp_lldp_test_interface2\") == json_string[i][\"name\"]) {",
													"      found_at_least_one_lldp_interface = found_at_least_one_lldp_interface || true;",
													"      pm.expect(json_string[i][\"state\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface2\"));",
													"      pm.expect(json_string[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface2\"));",
													"      pm.expect(json_string[i][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface2\"));",
													"    } else if (pm.environment.get(\"cdp_lldp_test_interface3\") == json_string[i][\"name\"]) {",
													"      found_at_least_one_lldp_interface = found_at_least_one_lldp_interface || true;",
													"      pm.expect(json_string[i][\"state\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface3\"));",
													"      pm.expect(json_string[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface3\"));",
													"      pm.expect(json_string[i][\"name\"]).to.eql(pm.environment.get(\"cdp_lldp_test_interface3\"));",
													"    }",
													"  }",
													"  pm.expect(found_at_least_one_lldp_interface).to.eql(true);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-lldp:lldp"
									},
									"response": []
								},
								{
									"name": "Delete LLDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no lldp\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted lldp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-lldp:lldp"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR subinterface common CRUD",
					"item": [
						{
							"name": "XR subinterface common CRUD Setup",
							"item": [
								{
									"name": "Delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR subinterface common READERS",
							"item": [
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show interface null without ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body doesnt matches string\"] = !responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Configure subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_sub_interface}}.{{test_sub_interface_index}}\n description testing subinterface\n encapsulation dot1Q {{vlan_id}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured subinterface common",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"testing subinterface\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_sub_interface\")) + \".\" + String(postman.getEnvironmentVariable(\"test_sub_interface_index\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vlan_id\")));"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 30 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 30000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Configure null subinterface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_sub_interface}}\n ipv4 address {{net3}} {{netmask}}\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured null interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 30 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 30000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR LAG with BFD",
					"item": [
						{
							"name": "XR LAG with BFD READERS",
							"item": [
								{
									"name": "Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}.0\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nbfd mode ietf\nbfd address-family ipv4 destination {{lag_bfd_destination-address}}\nbfd address-family ipv4 fast-detect\nbfd address-family ipv4 minimum-interval {{lag_bfd_min-interval}}\nbfd address-family ipv4 multiplier {{lag_bfd_multiplier}}\nno shutdown\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}.0\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR LAG with BFD Setup",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"//this should not fail at non physical devices",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"response_body_string\", responseBody);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR LAG with BFD Teardown",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L2P2P connection CRUD",
					"item": [
						{
							"name": "XR L2P2P connection CRUD Setup",
							"item": [
								{
									"name": "Delete previous Subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 200 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete previous Connection lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"//MU-268 FIXME this ends sometimes with status 500 instead of returning 200\")",
													"",
													"/*",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show deleted loc to sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR L2P2P connection CRUD Teardown",
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR L2P2P connection READERS",
							"item": [
								{
									"name": "locifc-remote",
									"item": [
										{
											"name": "Configure locifc",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{l2p2p_show_interface3}}\nl2transport\nexit\nexit \nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\nneighbor ipv4 {{l2p2p_show_remoteip}} pw-id {{l2p2p_vccid}}\nexit\ninterface {{l2p2p_show_interface3}}\ncommit\nexit\nexit\nexit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured locifc",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Status code is 200\", function() {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate name\", function() {",
															"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"pm.test(\"Validate name\", function() {",
															"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
															"",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
															"    });",
															"    pm.test(\"Validate endpoint 2 remote\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
															"    });",
															"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
															"    });",
															"} else {",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
															"    });",
															"    pm.test(\"Validate remote-system\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
															"    });",
															"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
															"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										},
										{
											"name": "Delete xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{l2p2p_show_interface3}}\nno l2transport\nexit\nno l2vpn\ncommit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted xconnect locif to remote",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"/*",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"*/"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locifc-sub",
									"item": [
										{
											"name": "Delete previous subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show nonexisting subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"/*",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"*/"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
											},
											"response": []
										},
										{
											"name": "Configure Locifc to Sub",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{l2p2p_show_interface3}}\nl2transport\nexit\nexit\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nencapsulation dot1q {{l2p2p_vlan_id}}\nrewrite ingress tag pop 1 symmetric\nexit\nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\ninterface {{l2p2p_show_interface3}}\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\nexit\nexit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured Locif to Sub",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate name\", function() {",
															"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"pm.test(\"Validate name\", function() {",
															"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface2\") ){",
															"    console.log(\"G3\")",
															"",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
															"    });",
															"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
															"    });",
															"",
															"    pm.test(\"Validate endpoint 2 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
															"    });",
															"} else {",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
															"    });",
															"    pm.test(\"Validate endpoint 2 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
															"    });",
															"    pm.test(\"Validate endpoint 2 subinterface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
															"    });",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										},
										{
											"name": "Delete connect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nno l2vpn \ninterface {{l2p2p_show_interface3}}\nno l2transport \ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted connect locif",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"/*",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"*/"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locsub-remote",
									"item": [
										{
											"name": "Delete previouse subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\n     commit\"\n  }\n}\n\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show nonexisting subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"/*",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"*/"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
											},
											"response": []
										},
										{
											"name": "Configure Locsub to remote",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nencapsulation dot1q {{l2p2p_vlan_id}}\nrewrite ingress tag pop 1 symmetric\nexit \nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\nneighbor ipv4 {{l2p2p_show_remoteip}} pw-id {{l2p2p_vccid}}\nexit\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\nexit\nexit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured Locsub",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate name\", function() {",
															"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"pm.test(\"Validate name\", function() {",
															"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
															"",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
															"    });",
															"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
															"    });",
															"",
															"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
															"    });",
															"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
															"    });    ",
															"    ",
															"} else {",
															"    pm.test(\"Validate endpoint 1 interface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
															"    });",
															"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
															"    });",
															"",
															"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
															"    });",
															"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
															"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										},
										{
											"name": "Delete xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nno l2vpn\ncommit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted xconnect locsub",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"/*",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"*/"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L2VPN connection CRUD",
					"item": [
						{
							"name": "XR L2VPN connection CRUD Setup",
							"item": [
								{
									"name": "Delete previous Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful DELETE request\"] = responseCode.code === 200"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete previous l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful DELETE request\"] = responseCode.code === 200 || 500"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show deleted l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR L2VPN connection CRUD Teardown",
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR L2VPN connection READERS",
							"item": [
								{
									"name": "locifc-remote",
									"item": [
										{
											"name": "Configure locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"l2vpn\nbridge group frinx\nbridge-domain {{vpls_ni_name}}\nvfi {{vpls_ni_name}}\nvpn-id {{vpls_vccid}}\nautodiscovery bgp\nrd auto\nroute-target {{bgp_peer-as}}:{{vpls_vccid}}\nsignaling-protocol bgp\nve-id {{vpls_endpoint_id}}\nexit\nexit\nexit\nexit\nexit\nexit\ninterface {{vpls_show_interface3}}\nl2transport\nexit\nexit\nl2vpn\nbridge group frinx\nbridge-domain {{vpls_ni_name}}\ninterface {{vpls_show_interface3}}\ncommit\nexit\nexit\nexit\nexit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"tests[\"Successful GET request\"] = responseCode.code === 200",
															"",
															"// attempts counter",
															"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseBody.has(\"network-instance\")) {",
															"    // Reset attempt counter",
															"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    } else {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    }",
															"",
															"} else {",
															"    // If too many attempts, abort",
															"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"        console.log(\"Connection still not up! Too many attempts !\")",
															"        tests[\"Connection not created\"] = false",
															"    } else {",
															"        // Schedule next check attempt",
															"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
															"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
															"        postman.setNextRequest('show configured locifc l2vpn');",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										},
										{
											"name": "Delete locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{vpls_show_interface3}}\nno l2transport\nexit\nno l2vpn\ncommit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locsub-remote",
									"item": [
										{
											"name": "Delete previous subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{vpls_show_interface2}}.{{vpls_show_sub_interface_index}}\n     commit\"\n  }\n}\n\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show nonexisting subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
											},
											"response": []
										},
										{
											"name": "Configure Locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"l2vpn\nbridge group frinx\nbridge-domain {{vpls_ni_name}}\nvfi {{vpls_ni_name}}\nvpn-id {{vpls_vccid}}\nautodiscovery bgp\nrd auto\nroute-target {{bgp_peer-as}}:{{vpls_vccid}}\nsignaling-protocol bgp\nve-id {{vpls_endpoint_id}}\nexit\nexit\nexit\nexit\nexit\nexit\ninterface {{vpls_show_interface2}}.{{vpls_show_sub_interface_index}} l2transport\nencapsulation dot1q {{vpls_show_sub_interface_index}}\nrewrite ingress tag pop 1 symmetric\nexit\nl2vpn\nbridge group frinx\nbridge-domain {{vpls_ni_name}}\ninterface {{vpls_show_interface2}}.{{vpls_show_sub_interface_index}}\ncommit\nexit\nexit\nexit\nexit\"\n  }\n}\n\n\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured Locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"tests[\"Successful GET request\"] = responseCode.code === 200",
															"",
															"// attempts counter",
															"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseBody.has(\"network-instance\")) {",
															"    // Reset attempt counter",
															"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\")",
															"        tests[\"Validate endpoint 1 subinterfaece\"] = \"\"+jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['subinterface'] === postman.getEnvironmentVariable(\"vpls_show_sub_interface_index\")",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['remote-system'] == postman.getEnvironmentVariable(\"vpls_vccid\")",
															"    } else {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\")",
															"        tests[\"Validate endpoint 1 subinterfaece\"] = \"\"+jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['subinterface'] === postman.getEnvironmentVariable(\"vpls_show_sub_interface_index\")",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\")",
															"    }",
															"",
															"} else {",
															"    // If too many attempts, abort",
															"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"        console.log(\"Connection still not up! Too many attempts !\")",
															"        tests[\"Connection not created\"] = false",
															"    } else {",
															"        // Schedule next check attempt",
															"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
															"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
															"        postman.setNextRequest('show configured Locsub l2vpn');",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										},
										{
											"name": "Delete Locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{vpls_show_interface2}}.{{vpls_show_sub_interface_index}} l2transport \nno l2vpn\ncommit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted Locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L3VPN OSPF CRUD",
					"item": [
						{
							"name": "XR L3VPN OSPF CRUD Setup",
							"item": [
								{
									"name": "Delete previous OSPF global 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DEL request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
									},
									"response": []
								},
								{
									"name": "Delete previous OSPF <-> BGP redis",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
									},
									"response": []
								},
								{
									"name": "Delete previous BGP global for OSPF",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								},
								{
									"name": "To update ODL cache after deleting OSPF/33 and  before an attempt to delete network-instance/33",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous OSPF VRF + ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR BGP instance CRUD",
					"item": [
						{
							"name": "XR BGP instance CRUD Setup",
							"item": [
								{
									"name": "Delete BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L3VPN BGP CRUD",
					"item": [
						{
							"name": "XR L3VPN BGP CRUD Setup",
							"item": [
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}"
									},
									"response": []
								},
								{
									"name": "Delete L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete previous 2. L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show deleted BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non BGP.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR L3VPN BGP READERS",
							"item": [
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\ncommit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"vrf {{l3_vpn_bgp_vrf}}\naddress-family ipv4 unicast \nimport route-target \n{{l3_vpn_bgp_rt_imp_1}}\n{{l3_vpn_bgp_rt_imp_2}}\n{{l3_vpn_bgp_rt_imp_3}}\nexit\nexport route-target \n{{l3_vpn_bgp_rt_exp_1}}\n{{l3_vpn_bgp_rt_exp_2}}\n{{l3_vpn_bgp_rt_exp_3}}\nexit\nexit\nexit\ninterface {{l3_vpn_bgp_interface_id}}\nvrf {{l3_vpn_bgp_vrf}}\nexit\nrouter bgp {{l3_vpn_bgp_as_number}}\nbgp router-id {{l3_vpn_bgp_router_id}}\naddress-family vpnv4 unicast\nvrf {{l3_vpn_bgp_vrf}}\nrd {{l3_vpn_bgp_rd}}\naddress-family ipv4 unicast \nnetwork {{l3_vpn_bgp_network_prefix}} {{l3_vpn_bgp_network_prefix_mask1}}\nexit\nneighbor {{l3_vpn_bgp_neighbor_address}}\nremote-as {{l3_vpn_bgp_remote_as}}\naddress-family ipv4 unicast \nroute-policy RPL_PASS_ALL in\nroute-policy RPL_PASS_ALL out\ncommit\nexit\nexit\nexit\nexit\n\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"",
													"pm.test(\"Validate as\", function() {",
													"    var str = pm.environment.get(\"l3_vpn_bgp_as_number\");",
													"    var pos = str.lastIndexOf(\".\")",
													"    var res = str.substring(0, pos);",
													"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(num);",
													"});",
													"",
													"",
													"//in SETUP Configure L3VPN BGP I configure router-id for global BGP",
													"//this GET reader is for VRF - this is reason why it did not get into reader output",
													"//postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\")",
													"",
													"pm.test(\"Validate route-distinguisher\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"pm.test(\"Validate prefix\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"",
													"pm.test(\"Validate neighbor-address\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"pm.test(\"Validate neighbor-address\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"",
													"pm.test(\"Validate peer-as\", function() {",
													"    var str = pm.environment.get(\"l3_vpn_bgp_remote_as\");",
													"    var pos = str.lastIndexOf(\".\")",
													"    var res = str.substring(0, pos);",
													"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(num);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\ncommit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "IOS XR5",
			"item": [
				{
					"name": "XR5 Mount",
					"item": [
						{
							"name": "Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected CLI');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Unmount",
					"item": [
						{
							"name": "DELETE Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RSVP CRUD",
					"item": [
						{
							"name": "XR5 RSVP CRUD READERS",
							"item": [
								{
									"name": "Delete previouse rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no rsvp\n     commit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Configure default rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"rsvp\n interface {{rsvp_intf-id}} \n bandwidth\n commit\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured default rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show rsvp created request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
													"    tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create_default\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
													"        tests[\"Rsvp not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show configured default rsvp');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Configure rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"rsvp\n interface {{rsvp_intf-id}} \n bandwidth {{rsvp_bandwidth_create}}\n commit\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - Show rsvp created request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
													"    tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_create\"));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
													"        tests[\"Rsvp not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show configured rsvp');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no rsvp\n     commit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 RSVP CRUD Setup",
							"item": [
								{
									"name": "Delete rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete rsvp request\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"//tests[\"GET - Show rsvp deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Mpls-te CRUD",
					"item": [
						{
							"name": "XR5 Mpls-te CRUD READERS",
							"item": [
								{
									"name": "Delete previouse mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no mpls traffic-eng\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "Configure mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"mpls traffic-eng\n interface {{mpls_intf_id}} \n commit\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - Show mpls-te created request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Mpls-te created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"    tests[\"Mpls-te created - config intf-id\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Mpls-te not created yet ! Too many attempts !\")",
													"        tests[\"Mpls-te not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created mpls-te');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no mpls traffic-eng\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 Mpls-te CRUD Setup",
							"item": [
								{
									"name": "Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete mpls-te\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "show deleted mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"//tests[\"GET - Show mpls-te deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Mpls-tunnel CRUD",
					"item": [
						{
							"name": "XR5 Mpls-tunnel CRUD READERS",
							"item": [
								{
									"name": "Delete previouse tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface tunnel-te {{mpls_tunnel_id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Configure tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface tunnel-te {{mpls_tunnel_id}}\n autoroute announce\n metric absolute {{mpls_metric_100}}\n commit\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - Show tunnel created request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"tunnel\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Tunnel created\"] = jsonData[\"tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"    tests[\"Tunnel created - shortcat-eligible\"] = jsonData[\"tunnel\"][0][\"config\"][\"shortcut-eligible\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\"));",
													"    tests[\"Tunnel created - metric-type\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"    tests[\"Tunnel created - metric\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\"));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Tunnel not created yet ! Too many attempts !\")",
													"        tests[\"Tunnel not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created tunnel');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface tunnel-te {{mpls_tunnel_id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 Mpls-tunnel CRUD Setup",
							"item": [
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"DELETE - Delete tunnel request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"//tests[\"GET - Show tunnel deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 OSPF CRUD",
					"item": [
						{
							"name": "XR5 OSPF CRUD READERS",
							"item": [
								{
									"name": "Delete previouse ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router ospf {{ospf}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								},
								{
									"name": "Configure ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router ospf {{ospf}}\nmax-metric router-lsa on-startup {{ospf_timeout}} include-stub summary-lsa external-lsa\narea {{ospf_area_id}}\ninterface {{test_interface}}\ncost {{ospf_cost}}\ncommit\nexit\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								},
								{
									"name": "Delete ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router ospf {{ospf}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 OSPF CRUD Setup",
							"item": [
								{
									"name": "Delete previouse ospf configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								},
								{
									"name": "show deleted ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 PF IFC CRUD",
					"item": [
						{
							"name": "XR5 PF IFC CRUD READERS",
							"item": [
								{
									"name": "Configure policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"policy-map {{output_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{output_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\n commit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure Bundle interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n     commit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete previouse policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n no service-policy output {{output_policy}}\n no service-policy input {{input_policy}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "Configure interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n service-policy output {{output_policy}}\n service-policy input {{input_policy}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "Delete interface  policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n no service-policy output {{output_policy2}}\n no service-policy input {{input_policy2}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete Bundle interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{policy_interface}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no policy-map {{output_policy}}\nno policy-map {{input_policy}}\nno policy-map {{output_policy2}}\nno policy-map {{input_policy2}}\ncommit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 PF IFC CRUD Teardown",
							"item": [
								{
									"name": "Delete Bundle interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{policy_interface}}\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no policy-map {{output_policy}}\nno policy-map {{input_policy}}\nno policy-map {{output_policy2}}\nno policy-map {{input_policy2}}\n \"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 PF IFC CRUD Setup",
							"item": [
								{
									"name": "Configure policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"policy-map {{output_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{output_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\n \"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure Bundle interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete previouse policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{policy_interface}}\n no service-policy output {{output_policy}}\n no service-policy input {{input_policy}}\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC ACL CRUD",
					"item": [
						{
							"name": "XR5 IFC ACL CRUD Setup",
							"item": [
								{
									"name": "Create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"ipv4 access-list {{iacl_in-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_in-acl-name2}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name2}} 10 deny ipv4 any any\n\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl"
									},
									"response": []
								},
								{
									"name": "Delete previous acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 IFC ACL CRUD Teardown",
							"item": [
								{
									"name": "Delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no ipv4 access-list {{iacl_in-acl-name1}}\nno ipv4 access-list {{iacl_in-acl-name2}}\nno ipv4 access-list {{iacl_out-acl-name1}}\nno ipv4 access-list {{iacl_out-acl-name2}}\n\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 ETH IFC CRUD",
					"item": [
						{
							"name": "XR5 ETH IFC CRUD Setup",
							"item": [
								{
									"name": "Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f54b459-88a9-4c96-8233-8c630a090050",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//NO hold-time",
													"pm.test(\"No hold-time\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
													"});",
													"//NO subinterface",
													"pm.test(\"No subinterface\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
													"});",
													"//NO ethernet",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
													"});",
													"//NO damping",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
													"});",
													"//NO statistics",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 ETH IFC CRUD Teardown",
							"item": [
								{
									"name": "Delete configurations on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dc310e5-009c-4ce8-bdf7-691af78f1dbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//NO hold-time",
													"pm.test(\"No hold-time\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
													"});",
													"//NO subinterface",
													"pm.test(\"No subinterface\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
													"});",
													"//NO ethernet",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
													"});",
													"//NO damping",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
													"});",
													"//NO statistics",
													"pm.test(\"No ethernet\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 ETH IFC READERS",
							"item": [
								{
									"name": "Configure ETH IFC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5cd7003-3abc-466e-bf7f-f7e0f58bac55",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\ndescription testing interface\nmtu {{eth_mtu}}\nipv4 address {{eth_ifc_ip}} {{netmask}}\nipv6 address {{eth_ipv6}}/{{eth_ifc_pref_length6}}\nipv6 nd suppress-ra\ndampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\ncarrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nload-interval {{eth_load_interval}}\nlacp period short\nno shutdown\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured ETH IFC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a9f4501-2e6d-47d4-8513-68718de83baf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ipv4 = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"netmask_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"netmask_prefix\")));",
													"});",
													"//ipv6",
													"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
													"});",
													"//ipv6",
													"pm.test(\"Validate ipv6 = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]+'/'+pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(pm.environment.get(\"eth_ipv6\")+\"/\"+pm.environment.get(\"eth_ifc_pref_length6\"));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete previus ETH",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a3879e0-5401-4546-a28d-a404d14da99a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\nno description testing interface\nno mtu {{eth_mtu}}\nno ipv4 address {{eth_ifc_ip}} {{netmask}}\nno ipv6 address {{eth_ipv6}}/{{eth_ifc_pref_length6}}\nno ipv6 nd suppress-ra\nno dampening {{eth_half-time}} {{eth_reuse}} {{eth_suppress}} {{eth_max-suppress}}\nno carrier-delay up {{eth_hold_time_up}} down {{eth_hold_time_down}}\nno load-interval {{eth_load_interval}}\nno lacp period short\nno shutdown\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure ETH IFC Bundle Mode On",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d71972ca-1358-4747-ac4c-d62adfde697c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode on\nlacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured ETH Bundle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "769410a9-8d51-43ff-8c19-c2dc2ea31bc3",
												"type": "text/javascript",
												"exec": [
													"//bundle",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
													"});",
													"//lacp-period",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
													"   pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.have.property('frinx-lacp-lag-member:lacp-mode')",
													"});",
													"//lacp-interval",
													"pm.test(\"Validate lacp-interval = \" + pm.environment.get(\"lacp-interval\"), function() {",
													"   pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.have.property('frinx-lacp-lag-member:lacp-interval')",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Configure ETH IFC Bundle Mode Active SLOW",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f00fc088-cd09-4cf0-9cd4-969361b235e2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode {{lacp_mode}}\nno lacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured ETH Bundle ACTIVE SLOW",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f3d3ad7-2a3a-4d72-98ac-2e2992e65565",
												"type": "text/javascript",
												"exec": [
													"//bundle",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
													"});",
													"//lacp_mode",
													"pm.test(\"Validate frinx-openconfig-if-ethernet:ethernet = \" + pm.environment.get(\"lacp_mode\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
													"});",
													"//lacp_interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Configure ETH IFC Bundle Mode Active FAST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad0f109-cc6d-461b-8bbc-85e13912265d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\nbundle id {{eth_bundle_id_idx}} mode {{lacp_mode}}\nlacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured ETH Bundle Active FAST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3066bc47-6853-42e5-8129-f1c36f6bc52c",
												"type": "text/javascript",
												"exec": [
													"//bundle",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_idx\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
													"});",
													"//lacp_mode",
													"pm.test(\"Validate frinx-openconfig-if-ethernet:ethernet = \" + pm.environment.get(\"lacp_mode\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
													"});",
													"//lacp_interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete bundle ETH",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "173a78e5-5a73-4784-a05a-9e65972ba399",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{eth_intf-id}}\nno bundle id {{eth_bundle_id_idx}} mode on\nno lacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a1d5516-caa3-4ab5-a130-9f0e042cd379",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP IFC CRUD",
					"item": [
						{
							"name": "XR5 LACP IFC CRUD Setup",
							"item": [
								{
									"name": "Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LACP IFC CRUD Teardown",
							"item": [
								{
									"name": "Delete bundle",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === false",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show cleaned empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LACP CRUD READERS",
							"item": [
								{
									"name": "Configure LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{lacp_intf-id}}\nbundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nlacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show configured lacp\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{lacp_intf-id}}\nno bundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nno lacp period short\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SNMP server CRUD",
					"item": [
						{
							"name": "XR5 SNMP server CRUD GigabitEthernet",
							"item": [
								{
									"name": "XR5 SNMP CRUD GigabitEthernet READERS",
									"item": [
										{
											"name": "Configure enabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"snmp-server interface {{snmp_inf_id_physical}}\nno notification linkupdown disable\ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured enabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
															"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
															"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
															"",
															"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
											},
											"response": []
										},
										{
											"name": "Configure disabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"snmp-server interface {{snmp_inf_id_physical}}\nnotification linkupdown disable\ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured disabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 404\"] = responseCode.code === 404;",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
											},
											"response": []
										},
										{
											"name": "Reconcile",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SNMP server CRUD LAG",
							"item": [
								{
									"name": "XR5 SNMP CRUD LAG READERS",
									"item": [
										{
											"name": "Delete LAG interface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "Create LAG interface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nno shutdown\ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "Configure enabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"snmp-server interface Bundle-Ether{{lag_inf-id}}\nno notification linkupdown disable\ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured enabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
															"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
															"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
															"",
															"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
											},
											"response": []
										},
										{
											"name": "Configure disabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"snmp-server interface Bundle-Ether{{lag_inf-id}}\nnotification linkupdown disable\ncommit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured disabled SNMP",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 404\"] = responseCode.code === 404;",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
											},
											"response": []
										},
										{
											"name": "Reconcile",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP instance CRUD",
					"item": [
						{
							"name": "XR5 BGP instance CRUD Setup",
							"item": [
								{
									"name": "Delete previouse bgp configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "show deleted bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "Configure neighbor group",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 BGP CRUD READERS",
							"item": [
								{
									"name": "Delete previous bgp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router bgp {{bgp_as}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "Configure neighbor group before bgp configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\n exit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n neighbor {{ip1}}\n remote-as {{bgp_peer-as}}\n use neighbor-group {{bgp_group}}\n no shutdown\n commit\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ip1\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "Delete bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no router bgp {{bgp_as}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG without BFD",
					"item": [
						{
							"name": "XR5 LAG without-BFD READERS",
							"item": [
								{
									"name": "Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}.0\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Create LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nno shutdown\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}.0\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LAG without BFD Setup",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "Create simple LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show simple LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LAG without BFD Teardown",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 subinterface common",
					"item": [
						{
							"name": "XR5 subinterface common READERS",
							"item": [
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show interface null without ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body doesnt matches string\"] = !responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Configure subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_sub_interface}}.{{test_sub_interface_index}}\n description testing subinterface\n encapsulation dot1Q {{vlan_id}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured subinterface common",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"testing subinterface\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_sub_interface\")) + \".\" + String(postman.getEnvironmentVariable(\"test_sub_interface_index\")));",
													"//tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vlan_id\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Configure null subinterface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface {{test_sub_interface}}\n ipv4 address {{net3}} {{netmask}}\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured null interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SYSLOG CRUD",
					"item": [
						{
							"name": "XR5 SYSLOG CRUD READERS",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\n commit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure SYSLOG on LAG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\nlogging events link-status\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SYSLOG created\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SYSLOG created\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"interface bundle-ether {{lag_inf-id}}\nno logging events link-status\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"no interface bundle-ether {{lag_inf-id}}\n     commit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SYSLOG CRUD Setup",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Create empty LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "IOS Classic",
			"item": [
				{
					"name": "Classic Mount",
					"item": [
						{
							"name": "Mount IOS Classic",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n\n      \"cli-topology:keepalive-delay\": 55,\n      \"cli-topology:keepalive-initial-delay\": 55,\n      \"cli-topology:keepalive-timeout\": 120\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/cli/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic Interface",
					"item": [
						{
							"name": "Classic Interface READERS",
							"item": [
								{
									"name": "Create Loopback NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{test_interface}}\nno shutdown\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show all interfaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_interface\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/"
									},
									"response": []
								},
								{
									"name": "show interface Loopback",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_interface\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
									},
									"response": []
								},
								{
									"name": "show no IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
									},
									"response": []
								},
								{
									"name": "Set IP4 and IP6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{test_interface}}\nip address {{ip41}} {{netmask}}\nipv6 address {{ipv61}} link-local\nno shutdown\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show IP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
									},
									"response": []
								},
								{
									"name": "show IP4 single",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/{{ip41}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting IP4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/255.255.255.255"
									},
									"response": []
								},
								{
									"name": "Delete Loopback and IP4 and IP6 NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{test_interface}}\nno ip address\nno ipv6 address\nno interface {{test_interface}}\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic Unmount",
					"item": [
						{
							"name": "Unmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"//setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/cli/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic ospf-vrf",
					"item": [
						{
							"name": "Classic ospf-vrf READERS",
							"item": [
								{
									"name": "Configure ip ospf and vrf NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf}}\nrouter-id {{router}}\nnetwork {{net}} area {{area}}\ndefault-information originate always\nexit\nrouter ospf {{ospf2}}\nnetwork {{ip41}} {{net2}} area {{area2}}\nexit\ninterface {{test_interface}}\nip address {{ip41}} {{netmask}}\nip ospf {{ospf2}} area {{area2}}\nno shutdown\nexit\nip vrf {{vrf}}\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show ip ospf and vrf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// FIXME after fix MU-159 needs be uncommented\")",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ospf\")));",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"router\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"area\")));",
													"//tests[\"04. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));",
													"tests[\"05. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ospf2\")));",
													"tests[\"06. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"area2\")));",
													"tests[\"07. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vrf\")));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances"
									},
									"response": []
								},
								{
									"name": "show ip ospf interface brief",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_interface\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}/ospfv2/areas/area/{{area2}}/interfaces"
									},
									"response": []
								},
								{
									"name": "show nonexisting ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/666"
									},
									"response": []
								},
								{
									"name": "Delete ospf and vrf NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf {{ospf}}\nno router ospf {{ospf2}}\nno interface {{test_interface}}\nno ip vrf {{vrf}}\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic BGP summary",
					"item": [
						{
							"name": "Classic BGP summary READERS",
							"item": [
								{
									"name": "Configure bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp}}\n bgp log-neighbor-changes\n no bgp default ipv4-unicast\n neighbor {{neighbor}} remote-as {{bgp}}\n neighbor {{neighbor}} update-source {{test_interface}}\n address-family ipv4\n network {{net3}} mask {{mask}}\n neighbor {{neighbor}} activate\n neighbor {{neighbor}} send-community both\n exit-address-family\nexit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show ip bgp summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp\")));",
													"tests[\"02. Body matches neighbor\"] = responseBody.has(String(postman.getEnvironmentVariable(\"neighbor\")));",
													"//tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));",
													"//tests[\"04. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_interface\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_nonexisting-process-name}}"
									},
									"response": []
								},
								{
									"name": "Delete bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{bgp}}\nno interface {{test_interface}}\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic static route",
					"item": [
						{
							"name": "Classic static route READERS",
							"item": [
								{
									"name": "Configure static route NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nip route {{ip-route1}} {{mask}} {{ip2-route1}} {{ip3-route1}}\nip route {{ip-route2}} {{mask}} {{ip2-route2}}\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show ip route static",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip-route1\")));",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip-route2\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip2-route1\")));",
													"tests[\"04. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip2-route2\")));",
													"tests[\"05. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip3-route1\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:STATIC/default"
									},
									"response": []
								},
								{
									"name": "show nonexisting static route",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:STATIC/xxx"
									},
									"response": []
								},
								{
									"name": "Delete configuration of static route NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ip route {{ip-route1}} {{mask}} {{ip2-route1}} {{ip3-route1}}\nno ip route {{ip-route2}} {{mask}} {{ip2-route2}}\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic CDP",
					"item": [
						{
							"name": "Classic CDP READERS",
							"item": [
								{
									"name": "Configure CDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{cdp_lldp_test_interface}}\n cdp run\n interface {{cdp_lldp_test_interface}}\n cdp enable\n exit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show cdp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"tests[\"01. Body matches string\"] = responseBody.has(\"cdp\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"cdp_lldp_test_interface\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-cdp:cdp"
									},
									"response": []
								},
								{
									"name": "Delete CDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{cdp_lldp_test_interface}}\n no cdp enable\n exit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted cdp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-cdp:cdp"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic LLDP",
					"item": [
						{
							"name": "Classic LLDP READERS",
							"item": [
								{
									"name": "Configure LLDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n lldp run\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show lldp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(\"lldp\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"cdp_lldp_test_interface\")));",
													"",
													"//tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"cdp_lldp_test_interface\"))) || responseBody.has(String(postman.getEnvironmentVariable(\"cdp_lldp_test_interface2\"))) || responseBody.has(String(postman.getEnvironmentVariable(\"cdp_lldp_test_interface3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-lldp:lldp"
									},
									"response": []
								},
								{
									"name": "Delete LLDP NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no lldp run\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted lldp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-lldp:lldp"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic journal-dryrun",
					"item": [
						{
							"name": "Classic journal-dryrun Setup",
							"item": [
								{
									"name": "delete loopback",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli-dryrun/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic subinterface common",
					"item": [
						{
							"name": "Classic subinterface common READERS",
							"item": [
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show nonexisting subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show interface null without ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body doesnt matches string\"] = !responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Configure subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{test_sub_interface}}.{{test_sub_interface_index}}\n description testing subinterface\n encapsulation dot1Q {{vlan_id}}\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured subinterface common",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"testing subinterface\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_sub_interface\")) + \".\" + String(postman.getEnvironmentVariable(\"test_sub_interface_index\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vlan_id\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Configure null subinterface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{test_sub_interface}}\n ip address {{net3}} {{netmask}}\n exit\n exit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show configured null interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no interface {{test_sub_interface}}.{{test_sub_interface_index}}\n interface {{test_sub_interface}}\n no ip address\n exit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Reconcile",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L2P2P connection CRUD",
					"item": [
						{
							"name": "Classic L2P2P connection CRUD Setup",
							"item": [
								{
									"name": "Delete previous Subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"if (responseCode.code === 404) {",
													"    tests[\"Subinterface deleted\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Subinterface still up! Too many attempts !\")",
													"        console.warn(\"// FIXME this returns data instead of returning 404\")",
													"        //tests[\"Subinterface not deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Subinterface not deleted yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show deleted subinterface lts');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete previous Connection lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful DELETE request\"] = responseCode.code === 200"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show deleted loc to sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"if (responseCode.code === 404) {",
													"    tests[\"Connection removed\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still present! Too many attempts !\")",
													"        console.warn(\"// FIXME this returns data instead of returning 404\")",
													"        //tests[\"Connection not removed\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not removed yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show deleted loc to sub');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Classic L2P2P connection CRUD Teardown",
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Classic L2P2P connection READERS",
							"item": [
								{
									"name": "locifc-remote",
									"item": [
										{
											"name": "Configure xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n pseudowire-class {{l2p2p_show_networkinstance}}\n  encapsulation mpls\n  exit\n interface {{l2p2p_show_interface2}}\n  xconnect {{l2p2p_show_remoteip}} {{l2p2p_show_remotevccid}} pw-class {{l2p2p_show_networkinstance}}\n   exit\n  exit\n exit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"console.warn(\"// commented lines - output returns insufficient data - MU-124\")",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var mystring = \"\\\"remote-system\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\")) + \"\\\"\";",
															"//tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"virtual-circuit-identifier\":' + postman.getEnvironmentVariable(\"l2p2p_show_remotevccid\");",
															"//tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"name\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_networkinstance\") + \"\\\"\";",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}"
											},
											"response": []
										},
										{
											"name": "Delete xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}\nno xconnect\nexit\nno pseudowire-class {{l2p2p_show_networkinstance}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locsub-remote",
									"item": [
										{
											"name": "Delete previous subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "Configure xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nencapsulation dot1Q {{l2p2p_vlan_id}}\nxconnect {{l2p2p_show_remoteip}} {{l2p2p_show_remotevccid}} encapsulation mpls\nexit\nexit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show network instances",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var mystring = \"\\\"name\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_interface2\")) + \".\" + String(postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\")) + \" xconnect \" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\"));",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = \"\\\"remote-system\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\")) + \"\\\"\";",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"virtual-circuit-identifier\":' + postman.getEnvironmentVariable(\"l2p2p_show_remotevccid\");",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances"
											},
											"response": []
										},
										{
											"name": "Delete xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nno xconnect\nno encapsulation dot1Q\nexit\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var mystring = \"\\\"name\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_interface2\")) + \".\" + String(postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\")) + \" xconnect \" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\"));",
															"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
															"var mystring = \"\\\"remote-system\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\")) + \"\\\"\";",
															"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
															"var mystring = '\"virtual-circuit-identifier\":' + postman.getEnvironmentVariable(\"l2p2p_show_remotevccid\");",
															"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locifc-sub",
									"item": [
										{
											"name": "Delete previous subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "Configure xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nencapsulation dot1Q {{l2p2p_vlan_id}}\nexit\nconnect {{l2p2p_show_networkinstance}} {{l2p2p_show_interface2}} {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}} interworking ethernet\nexit\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var mystring = '\"name\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_networkinstance\") + '\"';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"interface\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_interface2\") + '\"';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"interface\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_interface3\") + '\"';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
															"var mystring = '\"subinterface\":' + postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\") + '';",
															"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}"
											},
											"response": []
										},
										{
											"name": "Delete xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno connect {{l2p2p_show_networkinstance}}\nno interface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted xconnect",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic BGP instance CRUD",
					"item": [
						{
							"name": "Classic BGP instance CRUD Setup",
							"item": [
								{
									"name": "Delete BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L3VPN OSPF CRUD",
					"item": [
						{
							"name": "Classic L3VPN OSPF CRUD Setup",
							"item": [
								{
									"name": "Delete previous OSPF global 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DEL request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
									},
									"response": []
								},
								{
									"name": "Delete previous OSPF <-> BGP redis",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
									},
									"response": []
								},
								{
									"name": "Delete previous BGP global for OSPF",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous global OSPF3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								},
								{
									"name": "Delete previous OSPF VRF + ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L3VPN BGP CRUD",
					"item": [
						{
							"name": "Classic L3VPN BGP CRUD Setup",
							"item": [
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}"
									},
									"response": []
								},
								{
									"name": "Delete L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete previous 2. L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show deleted BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non BGP.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Classic L3VPN BGP READERS",
							"item": [
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno ip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nno ip vrf {{l3_vpn_bgp_vrf}}\nexit\n\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nip vrf {{l3_vpn_bgp_vrf}}\nrd {{l3_vpn_bgp_rd}}\nroute-target export {{l3_vpn_bgp_rt_exp_1}}\nroute-target export {{l3_vpn_bgp_rt_exp_2}}\nroute-target export {{l3_vpn_bgp_rt_exp_3}}\nroute-target import {{l3_vpn_bgp_rt_imp_1}}\nroute-target import {{l3_vpn_bgp_rt_imp_2}}\nroute-target import {{l3_vpn_bgp_rt_imp_3}}\nexit\ninterface {{l3_vpn_bgp_interface_id}}\nip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nrouter bgp {{l3_vpn_bgp_as_number}}\nbgp router-id {{l3_vpn_bgp_router_id}}\naddress-family ipv4 vrf {{l3_vpn_bgp_vrf}}\nnetwork {{l3_vpn_bgp_network_prefix}} mask {{l3_vpn_bgp_network_prefix_mask1}}\nneighbor {{l3_vpn_bgp_neighbor_address}} remote-as {{l3_vpn_bgp_remote_as}}\nneighbor {{l3_vpn_bgp_neighbor_address}} activate\nexit\nexit\nexit\n\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"');",
													"",
													"var str = postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number\");",
													"var pos = str.lastIndexOf(\".\")",
													"var res = str.substring(0, pos);",
													"var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
													"mystring.push('\"as\":' + num.toString());",
													"",
													"//in SETUP Configure L3VPN BGP I configure router-id for global BGP",
													"//this GET reader is for VRF - this is reason why it did not get into reader output",
													"//mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
													"",
													"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
													"",
													"var str = postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as\");",
													"var pos = str.lastIndexOf(\".\")",
													"var res = str.substring(0, pos);",
													"var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
													"mystring.push('\"peer-as\":' + num.toString());",
													"",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
													"mystring.push('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno ip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nno ip vrf {{l3_vpn_bgp_vrf}}\nexit\n\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L2VPN connection CRUD",
					"item": [
						{
							"name": "Classic L2VPN connection CRUD Setup",
							"item": [
								{
									"name": "Delete previous Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful DELETE request\"] = responseCode.code === 200"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete previous l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful DELETE request\"] = responseCode.code === 200"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show deleted l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Classic L2VPN connection CRUD Teardown",
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{vpls_show_interface2url}}/subinterfaces/subinterface/{{vpls_show_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Classic L2VPN connection READERS",
							"item": [
								{
									"name": "locifc-remote",
									"item": [
										{
											"name": "Configure locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nbridge-domain {{vpls_ni_name}}\nexit\nl2 vfi {{vpls_ni_name}} autodiscovery\nvpn id {{vpls_vccid}}\nbridge-domain {{vpls_ni_name}}\nexit\nbridge-domain {{vpls_ni_name}}\nexit\ninterface {{vpls_show_interface3}}\nservice instance {{vpls_endpoint_id}} ethernet\nencapsulation untagged\nbridge-domain {{vpls_ni_name}}\nexit\nexit\nexit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured locifc l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"tests[\"Successful GET request\"] = responseCode.code === 200",
															"",
															"// attempts counter",
															"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseBody.has(\"network-instance\")) {",
															"    // Reset attempt counter",
															"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['connection-point-id'] === postman.getEnvironmentVariable(\"vpls_endpoint_id\");",
															"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    } else {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['connection-point-id'] === postman.getEnvironmentVariable(\"vpls_endpoint_id\");",
															"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    }",
															"",
															"} else {",
															"    // If too many attempts, abort",
															"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"        console.log(\"Connection still not up! Too many attempts !\")",
															"        tests[\"Connection not created\"] = false",
															"    } else {",
															"        // Schedule next check attempt",
															"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
															"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
															"        postman.setNextRequest('show configured locif l2vpn');",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										},
										{
											"name": "Delete l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{vpls_show_interface3}}\nno service instance {{vpls_endpoint_id}} ethernet\nexit\nno l2 vfi {{vpls_ni_name}} autodiscovery\nno bridge-domain {{vpls_ni_name}}\nexit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "locsub-remote",
									"item": [
										{
											"name": "Delete previous subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{vpls_show_interface2}}.{{vpls_show_sub_interface_index}}\nexit\"\n  }\n}\n\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "Configure locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nbridge-domain {{vpls_ni_name}}\nexit\nl2 vfi {{vpls_ni_name}} autodiscovery\nvpn id {{vpls_vccid}}\nbridge-domain {{vpls_ni_name}}\nexit\nbridge-domain {{vpls_ni_name}}\nexit\ninterface {{vpls_show_interface2}}\nservice instance {{vpls_endpoint_id}} ethernet\nencapsulation dot1q {{vpls_show_sub_interface_index}}\nrewrite ingress tag pop 1 symmetric\nbridge-domain {{vpls_ni_name}}\nexit\nexit\nexit\"\n  }\n}\n"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show configured locsub l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"tests[\"Successful GET request\"] = responseCode.code === 200",
															"",
															"// attempts counter",
															"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseBody.has(\"network-instance\")) {",
															"    // Reset attempt counter",
															"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['connection-point-id'] === postman.getEnvironmentVariable(\"vpls_endpoint_id\");",
															"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    } else {",
															"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
															"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['connection-point-id'] === postman.getEnvironmentVariable(\"vpls_endpoint_id\");",
															"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
															"    }",
															"",
															"} else {",
															"    // If too many attempts, abort",
															"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
															"        console.log(\"Connection still not up! Too many attempts !\")",
															"        tests[\"Connection not created\"] = false",
															"    } else {",
															"        // Schedule next check attempt",
															"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
															"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
															"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
															"        postman.setNextRequest('show configured locsub l2vpn');",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										},
										{
											"name": "Delete l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{vpls_show_interface2}}\nno service instance {{vpls_endpoint_id}} ethernet\nexit\nno l2 vfi {{vpls_ni_name}} autodiscovery\nno bridge-domain {{vpls_ni_name}}\nexit\"\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
											},
											"response": []
										},
										{
											"name": "show deleted l2vpn",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing network instance\")",
															"",
															"// console.log(\"Response: \" + responseBody)",
															"// tests[\"Status code is 404\"] = responseCode.code === 404;",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos",
			"item": [
				{
					"name": "Junos Mount",
					"item": [
						{
							"name": "Mount Junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos connected');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Mount Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli status",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos cli status');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos Unmount",
					"item": [
						{
							"name": "Delete junos mount netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Delete junos mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Mount/Unmount IOS",
			"item": [
				{
					"name": "Mount WRONG IP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{classic_ip_wrong}}\",\n      \"cli-topology:port\" : \"{{classic_port}}\",\n      \"cli-topology:transport-type\" : \"{{classic_protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{classic_username}}\",\n      \"cli-topology:password\" : \"{{classic_password}}\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check state connecting",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Is connecting\"] = responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connecting\""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Mount",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Request: \" + request.data)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"{{classic_port}}\",\n      \"cli-topology:transport-type\" : \"{{classic_protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{classic_username}}\",\n      \"cli-topology:password\" : \"{{classic_password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \n      \"cli-topology:keepalive-delay\": 55,\n      \"cli-topology:keepalive-initial-delay\": 55,\n      \"cli-topology:keepalive-timeout\": 120\n\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('Check status connected');",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Unmount ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check unmounted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "TESTS",
			"item": [
				{
					"name": "General information",
					"item": [
						{
							"name": "show all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/"
							},
							"response": []
						},
						{
							"name": "show version",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate version\", function() {",
											"  pm.expect(pm.response.text()).to.include(pm.environment.get(\"version_string\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Interface CRUD",
					"item": [
						{
							"name": "Create Loopback NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"{{test_interface}}\",\n            \"interface-virtual\": [\n                null\n            ],\n            \"shutdown\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "show all interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  var json_string = pm.response.json()[\"interfaces\"][\"interface\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (pm.environment.get(\"test_interface\") == json_string[i][\"name\"]) {",
											"      pm.expect(json_string[i][\"state\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"      pm.expect(json_string[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"      pm.expect(json_string[i][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"    }",
											"  }",
											"      ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/"
							},
							"response": []
						},
						{
							"name": "show interface Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "show no IP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
							},
							"response": []
						},
						{
							"name": "Update: set IP4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ipv4-network\": {\n        \"addresses\": {\n            \"primary\": {\n                \"netmask\": \"255.255.255.0\",\n                \"address\": \"{{ip41}}\"\n            }\n        }\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/{{test_interface}}/Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"
							},
							"response": []
						},
						{
							"name": "show IP4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"ip41\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"ip41\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4"
							},
							"response": []
						},
						{
							"name": "show IP4 single",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:address\"][0][\"ip\"]).to.eql(pm.environment.get(\"ip41\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"ip41\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/{{ip41}}"
							},
							"response": []
						},
						{
							"name": "show nonexisting IP4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}/subinterfaces/subinterface/{{ip_subinterface_index}}/frinx-openconfig-if-ip:ipv4/addresses/address/255.255.255.255"
							},
							"response": []
						},
						{
							"name": "Delete Loopback NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "show deleted interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "journal-dryrun",
					"item": [
						{
							"name": "create loopback dryrun",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{test_interface}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": false,\n                \"name\": \"{{test_interface}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli-dryrun/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "get dryrun journal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface loopback\", function() {",
											"  pm.expect(pm.response.text()).to.include(\"interface loopback 97\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli-dryrun/node/{{node_id}}/yang-ext:mount/journal:read-journal"
							},
							"response": []
						},
						{
							"name": "show not created loopback interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "create loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{test_interface}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": false,\n                \"name\": \"{{test_interface}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						},
						{
							"name": "get journal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface loopback\", function() {",
											"  pm.expect(pm.response.text()).to.include(\"interface loopback 97\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli-dryrun/node/{{node_id}}/yang-ext:mount/journal:read-journal"
							},
							"response": []
						},
						{
							"name": "delete loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli-dryrun/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Platform",
					"item": [
						{
							"name": "Platform unified",
							"item": [
								{
									"name": "show inventory unified",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"LINECARD\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-platform:components"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Platform cli",
							"item": [
								{
									"name": "show inventory cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"LINECARD\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-platform:components"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC ACL CRUD",
					"item": [
						{
							"name": "IFC ACL CRUD basic",
							"item": [
								{
									"name": "Create acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0] === false",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC ACL CRUD containers",
							"item": [
								{
									"name": "Create acl ingress egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update acl egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets"
									},
									"response": []
								},
								{
									"name": "show updated egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated egress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update acl ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets"
									},
									"response": []
								},
								{
									"name": "show updated ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated ingress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"interface\"][0] === false",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PF IFC CRUD",
					"item": [
						{
							"name": "Create interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "show policy on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy\")));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "Update interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy2}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy2}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "show updated policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy2\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy2\")));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "Delete interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "show deleted policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ETH IFC CRUD",
					"item": [
						{
							"name": "ETH IFC CRUD basic",
							"item": [
								{
									"name": "Create filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "486f0124-8ebf-4705-80f1-109fdd5afcc4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"description\": \"{{eth_description}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_up}}\",\n          \"down\": \"{{eth_hold_time_down}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            }\n          }\n        ]\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"frinx-openconfig-if-ethernet:ethernet\": {\n        \"config\": {\n          \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n          \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n          \"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval}}\"\n        }\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bfba7fa-1d9a-47e5-9cda-f8ef7eff529c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update interface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"mtu\": \"{{eth_mtu_upd}}\",\n        \"description\": \"{{eth_description_upd}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_down}}\",\n          \"down\": \"{{eth_hold_time_up}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval_upd}}\"\n        }\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress_upd}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            },\n            \"frinx-openconfig-if-ip:ipv4\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ifc_ip}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ifc_ip}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated interface ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dd09fc8-f3f2-4247-9237-48b56a644418",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu_upd\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update interface ipv4 whith ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"interface\": [\n    {\n      \"name\": \"{{eth_intf-id}}\",\n      \"config\": {\n        \"type\": \"iana-if-type:ethernetCsmacd\",\n        \"name\": \"{{eth_intf-id}}\",\n        \"mtu\": \"{{eth_mtu_upd}}\",\n        \"description\": \"{{eth_description_upd}}\",\n        \"enabled\": true\n      },\n      \"hold-time\": {\n        \"config\": {\n          \"up\": \"{{eth_hold_time_down}}\",\n          \"down\": \"{{eth_hold_time_up}}\"\n        }\n      },\n      \"frinx-damping:damping\": {\n        \"config\": {\n          \"enabled\": true,\n          \"half-life\": \"{{eth_half-time}}\",\n          \"reuse\": \"{{eth_reuse}}\",\n          \"suppress\": \"{{eth_suppress_upd}}\",\n          \"max-suppress\": \"{{eth_max-suppress}}\"\n        }\n      },\n      \"frinx-cisco-if-extension:statistics\": {\n        \"config\": {\n          \"load-interval\": \"{{eth_load_interval_upd}}\"\n        }\n      },\n      \"subinterfaces\": {\n        \"subinterface\": [\n          {\n            \"index\": 0,\n            \"config\": {\n              \"index\": 0\n            },\n            \"frinx-openconfig-if-ip:ipv4\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ifc_ip2}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ifc_ip2}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"frinx-openconfig-if-ip:ipv6\": {\n              \"addresses\": {\n                \"address\": [\n                  {\n                    \"ip\": \"{{eth_ipv6}}\",\n                    \"config\": {\n                      \"ip\": \"{{eth_ipv6}}\",\n                      \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated interface ipv6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64ee3adf-2183-4b3b-aed8-e90d33a8c792",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//ip4",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
													"});",
													"//ip4",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//ip6",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip6",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
													"});",
													"//index",
													"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
													"});",
													"//down",
													"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
													"});",
													"//up",
													"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
													"});",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
													"});",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
													"});",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
													"});",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
													"});",
													"//enabled",
													"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
													"});",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
													"});",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"eth_mtu_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"eth_mtu_upd\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD parts",
							"item": [
								{
									"name": "ETH IFC CRUD subinterface-part",
									"item": [
										{
											"name": "Create subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8190f9bd-b4e0-49a4-b459-679e1bbbb580",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f967164b-eb01-4b7c-b3ad-f4dc89058365",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Create subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fcdd1520-3dc3-4210-8304-31450746df72",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6_upd}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6_upd}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6_upd}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0412d87-6d40-43fd-8792-6ca81461be77",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6_upd\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1ab09429-8979-44b6-b77a-4a41ac8755f5",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD holdtime-part",
									"item": [
										{
											"name": "Create hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_up}}\",\n                    \"down\": \"{{eth_hold_time_down}}\"\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
											},
											"response": []
										},
										{
											"name": "show created hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f02e7887-50af-4182-ae4b-b193cc7f4722",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_down}}\",\n                    \"down\": \"{{eth_hold_time_up}}\"\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
											},
											"response": []
										},
										{
											"name": "show updated hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150350cb-b9f0-403e-90eb-24568e8fd5b8",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
											},
											"response": []
										},
										{
											"name": "show deleted hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "04ccfc5b-b334-4b37-a7b9-f8c04a225a56",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD damping-part",
									"item": [
										{
											"name": "Create frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
											},
											"response": []
										},
										{
											"name": "show created frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a81a606-3dfd-492e-886e-b7017541d9c3",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
											},
											"response": []
										},
										{
											"name": "show updated frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "374f16e7-017b-4293-aca7-841bdf124b52",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse_upd\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f3590223-c9ac-4f46-b9aa-594ac0d7ba8c",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD stats-part",
									"item": [
										{
											"name": "Create frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval}}\"\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
											},
											"response": []
										},
										{
											"name": "show created frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d897afd2-c373-4e65-afda-32fa034c2974",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
											},
											"response": []
										},
										{
											"name": "show updated frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f547dfdf-f589-4b4d-8bfa-b917ccd1d97e",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "117d2704-18ca-4a0a-9c6b-97a74a3a2f42",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No damping\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No statistics\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD eth-part",
									"item": [
										{
											"name": "Create frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n        }\n            }\n\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
											},
											"response": []
										},
										{
											"name": "show created frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5081d386-8bb6-4944-88d9-3a40fe42a35f",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n        }\n            }\n\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
											},
											"response": []
										},
										{
											"name": "show updated frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a1ae9b2-f0bb-496b-8524-a5aa0c61b7d2",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id_upd\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_upd\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t    \t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n        }\n            }\n\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ea3c64d4-2dae-4325-aef6-65720f8b6a44",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ETH IFC CRUD containers",
							"item": [
								{
									"name": "ETH IFC CRUD subinterface-container",
									"item": [
										{
											"name": "Create subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "58ce5195-b7cb-46d5-b701-a6b399d4f382",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bbd00827-d2f4-4e68-8986-425193c6b836",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ifc_ip2\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ifc_ip2\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Create subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48046625-f416-44c6-8e62-8458c7346aa0",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6_upd}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6_upd}}\",\n                                            \"prefix-length\": \"{{eth_ifc_pref_length6}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated subinterface ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8b55bd71-156f-4e57-94de-4cd1125585d0",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6_upd\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ifc_pref_length6\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ifc_pref_length6\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//index",
															"pm.test(\"Validate index = \" + pm.environment.get(\"test_sub_interface_index_null\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index_null\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"subinterfaces\": {\n    \"subinterface\": [\n      {\n        \"index\": 0,\n        \"config\": {\n          \"index\": 0\n        }\n      }\n    ]\n  }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
											},
											"response": []
										},
										{
											"name": "show empty subinterface",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e176b12c-f4b8-47f7-9984-0273d83c35b9",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD holdtime-container",
									"item": [
										{
											"name": "Create hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{   \n  \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": \"{{eth_hold_time_up}}\",\n                    \"down\": \"{{eth_hold_time_down}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c743ff01-a214-41ec-b56a-96427fae2a5c",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3bc6130e-c8e7-4df6-96ab-72667fbc4d89",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//down",
															"pm.test(\"Validate down = \" + pm.environment.get(\"eth_hold_time_up\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_up\")));",
															"});",
															"//up",
															"pm.test(\"Validate up = \" + pm.environment.get(\"eth_hold_time_down\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(pm.environment.get(\"eth_hold_time_down\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
											},
											"response": []
										},
										{
											"name": "show deleted hold-time",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3c649bd0-8206-44d1-9df1-82ec10a2c8d1",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD damping-container",
									"item": [
										{
											"name": "Create frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": \"{{eth_half-time}}\",\n                    \"reuse\": \"{{eth_reuse}}\",\n                    \"suppress\": \"{{eth_suppress}}\",\n                    \"max-suppress\": \"{{eth_max-suppress}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67337a87-818d-4196-afdf-515e960b541d",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9fd83fcc-d583-4f3a-aa95-4a1a985e059e",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"eth_suppress_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_suppress_upd\")));",
															"});",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"eth_max-suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"eth_max-suppress\")));",
															"});",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"eth_half-time\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"eth_half-time\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"eth_reuse_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"eth_reuse_upd\")));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2972cefb-bf2b-4b65-a9fc-bdd78fea61dc",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD stats-container",
									"item": [
										{
											"name": "Create frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e0571b50-f235-44ac-a464-77500e502ba6",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": \"{{eth_load_interval_upd}}\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93ece541-bb45-4900-af49-ee9c507e07d3",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"eth_load_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"eth_load_interval_upd\")));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-stats",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e73bd4c6-bf52-4d14-b223-097961555051",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ETH IFC CRUD eth-container",
									"item": [
										{
											"name": "Create frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode}}\",\n\t\t\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show created frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "393b8e08-babf-4982-bba3-30504d23c38c",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Update frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n                    \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "show updated frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "643a96d2-746d-41f6-a622-82a560daadf6",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//frinx-lacp-lag-member:interval",
															"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_upd\"));",
															"});",
															"//frinx-openconfig-if-aggregate:aggregate-id",
															"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"eth_bundle_id_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"eth_bundle_id_upd\"));",
															"});",
															"//frinx-lacp-lag-member:lacp-mode",
															"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_upd\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_upd\"));",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO statistics",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										},
										{
											"name": "Delete frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"frinx-openconfig-if-ethernet:ethernet\": {\n        \"config\": {\n            \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\",\n            \"frinx-lacp-lag-member:lacp-mode\": \"{{lacp_mode_upd}}\",\n\t\t\t\"frinx-lacp-lag-member:interval\": \"{{lacp_interval_upd}}\"\n            \n\t\t}\n    }\n\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
											},
											"response": []
										},
										{
											"name": "show deleted frinx-eth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d92f801-af0a-4602-927b-1784399aef2b",
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//enabled",
															"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
															"});",
															"//type",
															"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"eth_intf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"eth_intf-id\"));",
															"});",
															"//NO hold-time",
															"pm.test(\"No hold-time\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('hold-time');",
															"});",
															"//NO subinterface",
															"pm.test(\"No subinterface\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('subinterface');",
															"});",
															"//NO ethernet",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
															"});",
															"//NO damping",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-damping:damping');",
															"});",
															"//NO statistics",
															"pm.test(\"No ethernet\", function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0]).not.to.have.a.property('frinx-cisco-if-extension:statistics');",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SYSLOG CRUD",
					"item": [
						{
							"name": "SYSLOG CRUD",
							"item": [
								{
									"name": "Create SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show created SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SYSLOG interface created\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SYSLOG interface created\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Update SYSLOG => Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Update SYSLOG => Enable",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SYSLOG interface created\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SYSLOG interface created\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SYSLOG CRUD Negative",
							"item": [
								{
									"name": "Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces"
									},
									"response": []
								},
								{
									"name": "Create SYSLOG on nonexisting interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"//Cannot configure logging on non-existent interface Bundle-Ether7029",
													"//It should be returned status  4xx - problem on side client",
													"console.warn(\"// FIXME this returns 500 server error instead of returning 4xx for case cannot configure logging on non-existent interface.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 4xx\"] = responseCode.code === 4xx;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete SYSLOG on nonexisting interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show deleted SYSLOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Create SYSLOG on physical interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"//Cannot configure logging on ethernet interface ...",
													"//It should be returned status  4xx - problem on side client",
													"console.warn(\"// FIXME this returns 500 server error instead of returning 4xx for case cannot configure logging on ethernet interface ...\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 4xx\"] = responseCode.code === 4xx;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-logging:logging/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNMP server CRUD",
					"item": [
						{
							"name": "SNMP server CRUD GigabitEthernet",
							"item": [
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "Update SNMP => disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 404\"] = responseCode.code === 404;",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "Delete SNMP => Disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP server CRUD LAG",
							"item": [
								{
									"name": "Create LAG interface for SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Update SNMP => disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 404\"] = responseCode.code === 404;",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Delete  SNMP => Disable SNMP on LAG",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 404\"] = responseCode.code === 404;",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP server CRUD Negative",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "NEG configure SNMP while interface does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "NEG Create SNMP - while no interface is present",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG with BFD",
					"item": [
						{
							"name": "Update LAG by variables",
							"item": [
								{
									"name": "1. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_destination-address\"));",
													"pm.environment.set(\"lag_bfd_destination-address\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_destination-address"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_destination-address\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_multiplier\"));",
													"pm.environment.set(\"lag_bfd_multiplier\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_multiplier"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_multiplier\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_min-interval\"));",
													"pm.environment.set(\"lag_bfd_min-interval\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_min-interva"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_min-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by logical block",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by containers",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                \"bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation/bfd",
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG without BFD",
					"item": [
						{
							"name": "LAG without BFD basic",
							"item": [
								{
									"name": "Create LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"//tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
													"//tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create\");",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"/*",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});",
													"*/    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "1. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"/*",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_reuse\"));",
													"pm.environment.set(\"lag_damp_reuse\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_reuse"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_reuse\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_load-interval\"));",
													"pm.environment.set(\"lag_load-interval\", parseInt(pm.environment.get(\"original_value\")) + 30);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_load-interval"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_load-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_half-life\"));",
													"pm.environment.set(\"lag_damp_half-life\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_half-life"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_half-life\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_suppress\"));",
													"pm.environment.set(\"lag_damp_suppress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_suppress"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_suppress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "6. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_max-supress\"));",
													"pm.environment.set(\"lag_damp_max-supress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_max-supress"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_max-supress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "7. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_min-links\"));",
													"pm.environment.set(\"lag_min-links\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_min-links"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_min-links\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "8. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_description\"));",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\") + \" xxx\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_description"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "9. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_mtu\"));",
													"pm.environment.set(\"lag_mtu\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_mtu"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// Changing MTU fail - MU-127\")",
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_mtu\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "10. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_ip\"));",
													"pm.environment.set(\"lag_ip\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_ip"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_ip\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "11. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_prefix-length\"));",
													"pm.environment.set(\"lag_prefix-length\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_prefix-length"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_prefix-length\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "12. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Only basic config"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "13. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + subinterfaces"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "14. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "15. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + load-interval"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "16. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + min-links"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG without BFD containers",
							"item": [
								{
									"name": "LAG without BFD aggregation",
									"item": [
										{
											"name": "UPDATE LAG aggregation",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation"
											},
											"response": []
										},
										{
											"name": "show updated LAG aggregation",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var mystring = [];",
															"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
															"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"",
															"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
															"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
															"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
															"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
															"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
											},
											"response": []
										},
										{
											"name": "DELETE LAG aggregation config",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD statistics",
									"item": [
										{
											"name": "UPDATE LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics"
											},
											"response": []
										},
										{
											"name": "show updated LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var mystring = [];",
															"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
															"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
															"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
															"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
															"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
															"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
											},
											"response": []
										},
										{
											"name": "DELETE LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD damping",
									"item": [
										{
											"name": "UPDATE LAG dampig",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping"
											},
											"response": []
										},
										{
											"name": "show updated LAG damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var mystring = [];",
															"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
															"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
															"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
															"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
															"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
											},
											"response": []
										},
										{
											"name": "DELETE LAG damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD ipv4",
									"item": [
										{
											"name": "UPDATE LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n}"
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
											},
											"response": []
										},
										{
											"name": "show updated LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"",
															"var mystring = [];",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
															"});",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
											},
											"response": []
										},
										{
											"name": "DELETE LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
											},
											"response": []
										},
										{
											"name": "show deleted LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"tests[\"Status code is 404\"] = responseCode.code === 404;",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "RSVP CRUD",
					"item": [
						{
							"name": "Create default rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create rsvp request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create_default}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "show created default rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"interface\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create_default\");",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
											"        tests[\"Rsvp not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created default rsvp');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Create rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create rsvp request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "show created rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"interface\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_create\"));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
											"        tests[\"Rsvp not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created rsvp');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Update rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Update rsvp request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_update}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "show updated rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp updated request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"interface\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp updated\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp updated - bandwidth\"] = jsonData.interface[0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_update\"));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not updated yet ! Too many attempts !\")",
											"        tests[\"Rsvp not updated\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not updated yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show updated rsvp');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Delete rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete rsvp request\"] = responseCode.code === 200 || responseCode.code === 404;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Mpls-te CRUD",
					"item": [
						{
							"name": "Create mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create mpls-te\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{mpls_intf_id}}\",\n            \"config\": {\n                \"interface-id\": \"{{mpls_intf_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "show created mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show mpls-te created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"interface\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Mpls-te created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
											"    tests[\"Mpls-te created - config intf-id\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Mpls-te not created yet ! Too many attempts !\")",
											"        tests[\"Mpls-te not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created mpls-te');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "Delete mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete mpls-te\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Mpls-tunnel CRUD",
					"item": [
						{
							"name": "Create tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create tunnel request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": \"{{mpls_elig_true}}\",\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": \"{{mpls_metric_100}}\"\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "show created tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"tunnel\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Tunnel created\"] = jsonData[\"tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
											"    tests[\"Tunnel created - shortcat-eligible\"] = jsonData[\"tunnel\"][0][\"config\"][\"shortcut-eligible\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\"));",
											"    tests[\"Tunnel created - metric-type\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
											"    tests[\"Tunnel created - metric\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\"));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Tunnel not created yet ! Too many attempts !\")",
											"        tests[\"Tunnel not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created tunnel');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "Update tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "show updated tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"tunnel\")) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Tunnel updated - name\"] = jsonData[\"tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
											"    tests[\"Tunnel updated - shortcat-eligible\"] = jsonData[\"tunnel\"][0][\"config\"][\"shortcut-eligible\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\"));",
											"    tests[\"Tunnel updated - metric-type\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
											"    tests[\"Tunnel updated - metric\"] = jsonData[\"tunnel\"][0][\"config\"][\"metric\"] === JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_200\"));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Tunnel not updated yet ! Too many attempts !\")",
											"        tests[\"Tunnel not updated\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Tunnel not updated yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show updated tunnel');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "Update tunnel invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"console.warn(\"// FIXME this returns 500 instead of returning 400\")",
											"//tests[\"PUT - Update tunnel invalid request\"] = responseCode.code === 400"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_false}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "Delete tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete tunnel request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OSPF CRUD",
					"item": [
						{
							"name": "Configure ospf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                    \n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "show ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Update ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout2}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "show updated ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout2\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Delete ospf configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "subinterface common CRUD",
					"item": [
						{
							"name": "subinterface common CRUD basic",
							"item": [
								{
									"name": "Create subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": \n        {\n            \"index\": {{test_sub_interface_index}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index}},\n                \"description\": \"testing subinterface\",\n                \"enabled\": true\n            }\n           \n        }\n    \n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create vlan and update description",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{test_sub_interface_index}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index}},\n                \"enabled\": true,\n                \"description\": \"updated subinterface description\"\n            },\n            \n            \"frinx-openconfig-vlan:vlan\": {\n                \"config\": {\n                \t\"vlan-id\": {{vlan_id}}\n                }\n            }\n\n        }\n    ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show subinterface common",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var description = \"updated subinterface description\";",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"description\"]).to.eql(description);",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"description\"]).to.eql(description);",
													"});",
													"",
													"var ifname = String(pm.environment.get(\"cdp_lldp_test_interface\")) + \".\" + String(pm.environment.get(\"test_sub_interface_index\"));",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(ifname);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(ifname);",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"test_sub_interface_index\")));",
													"});",
													"",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"vlan_id\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "subinterface common CRUD global",
							"item": [
								{
									"name": "Create subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": \n        {\n            \"index\": {{test_sub_interface_index}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index}},\n                \"description\": \"testing subinterface\",\n                \"enabled\": true\n            }\n           \n        }\n    \n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create vlan and update description",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{test_sub_interface_index}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index}},\n                \"enabled\": true,\n                \"description\": \"updated subinterface description\"\n            },\n            \n            \"frinx-openconfig-vlan:vlan\": {\n                \"config\": {\n                \t\"vlan-id\": {{vlan_id}}\n                }\n            }\n\n        }\n    ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show subinterface common",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// commented lines - output returns insufficient data - CCASP-115\")",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"tests[\"01. Body matches string\"] = responseBody.has(\"updated subinterface description\");",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"test_sub_interface\")) + \".\" + String(postman.getEnvironmentVariable(\"test_sub_interface_index\")));",
													"//tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vlan_id\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{test_sub_interface_index_null}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index_null}},\n                \"enabled\": true\n            },\n            \"ipv4\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"ip\": {{net3}},\n                        \"config\": {\n                            \"ip\": {{net3}},\n                            \"prefix-length\": 31\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "show ipv4 subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"net3\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Update ipv4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{test_sub_interface_index_null}},\n            \"config\": {\n                \"index\": {{test_sub_interface_index_null}},\n                \"enabled\": true\n            },\n            \"ipv4\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"ip\": {{ip42}},\n                        \"config\": {\n                            \"ip\": {{ip42}},\n                            \"prefix-length\": 27\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "show updated ipv4 subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip42\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}"
									},
									"response": []
								},
								{
									"name": "Delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete ipv4 from null subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index_null}}/ipv4"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{test_sub_interface_url}}/subinterfaces/subinterface/{{test_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LACP IFC CRUD",
					"item": [
						{
							"name": "LACP IFC CRUD interface",
							"item": [
								{
									"name": "Create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },            \"subinterfaces\": {\n            \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_passive\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show created passive mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show updated active mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show updated period fast\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD element",
							"item": [
								{
									"name": "Create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_passive\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show created passive mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"show updated active mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "Update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"GET - show created interface request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"interface\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"how updated period fast\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L2P2P connection CRUD",
					"item": [
						{
							"name": "L2P2P connection CRUD locifc-remote",
							"item": [
								{
									"name": "Create Loc To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show created loc to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 remote\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate remote-system\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Update Sub To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip2}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show updated sub to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 remote\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip2\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate remote-system\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip2\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Delete connection ltr",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD locifc-sub",
							"item": [
								{
									"name": "Create Subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show created subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create Loc To Sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\",\n\t                        \"subinterface\" : {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show created loc to sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface2\") ){",
													"    console.log(\"G3\")",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Delete Connection lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD locsub-remote",
							"item": [
								{
									"name": "Create Subinterface str",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show created subinterface str",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create Sub To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\",\n\t                        \"subinterface\" : {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "show created sub to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });    ",
													"    ",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Delete Connection str",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD Negative",
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Create Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "Delete valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}"
									},
									"response": []
								},
								{
									"name": "Create valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name2}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name2}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}"
									},
									"response": []
								},
								{
									"name": "show created connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['state']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['state']['remote-system'] === postman.getEnvironmentVariable(\"l2p2p_show_remoteip\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['state']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['state']['remote-system'] === postman.getEnvironmentVariable(\"l2p2p_show_remoteip\");",
													"    }",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not removed\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created connection');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}"
									},
									"response": []
								},
								{
									"name": "Used interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n   \t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip2}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Delete valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}"
									},
									"response": []
								},
								{
									"name": "show removed connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}"
									},
									"response": []
								},
								{
									"name": "Three connection points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\",\n\t                        \"subinterface\": {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"3\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"3\"\n\t              },\n   \t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Interface with ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns 200 instead of returning 500\")",
													"//console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"*/"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"postman.setNextRequest('TEARDOWN: Delete Subinterface neg');"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface1}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\",\n\t                        \"subinterface\": {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}"
									},
									"response": []
								},
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP instance CRUD",
					"item": [
						{
							"name": "BGP instance CRUD basic",
							"item": [
								{
									"name": "Configure bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "show bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tpm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ip1\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "Update bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "show updated bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_ip2\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as2\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group2\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								},
								{
									"name": "Delete bgp configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "BGP instance CRUD global",
							"item": [
								{
									"name": "Create BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"//console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"//setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show created BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"default\"'] = jsonData[\"protocol\"][0][\"name\"] === \"default\";",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_router_id\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_router_id\");",
													"",
													"tests[\"1. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\");",
													"tests[\"2. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\")] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\"));",
													"tests[\"1. \" + '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\") + '\"'] = jsonData[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\");",
													"tests[\"2. \" + '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\") + '\"'] = jsonData[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Update BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"//console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"//setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"transport\":{\n                        \"config\":{\n                           \"local-address\":\"{{l3_vpn_bgp_global_neighbor_transport}}\"\n                        }\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"policy1\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  },\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}1\"\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"policyExport1\"\n                           ],\n                           \"export-policy\":[\n                              \"policyExport2\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show updated BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"default\"'] = jsonData[\"protocol\"][0][\"name\"] === \"default\";",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_router_id\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_router_id\");",
													"",
													"tests[\"1. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\");",
													"tests[\"2. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\")] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\"));",
													"tests[\"1. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address2\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address2\");",
													"tests[\"2. \" + '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address2\") + '\"'] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_neighbor_address2\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\") + \"1\"] = jsonData[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_global_remote_as_decimal\") + \"1\");",
													"tests[\"1. \" + '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\") + '\"'] = jsonData[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\");",
													"tests[\"2. \" + '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\") + '\"'] = jsonData[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_global_network_prefix_mask2\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Delete BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN BGP CRUD",
					"item": [
						{
							"name": "L3VPN BGP CRUD global",
							"description": "According\nhttps://github.com/FRINXio/translation-units-docs/blob/master/Configuration%20datasets/network-instances/protocols/bgp.md\nthere is no command set for XE device.",
							"item": [
								{
									"name": "BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     },\n                 {\n                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                       \"config\": {\n                           \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                           \"enabled\": true\n                       }\n                   }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP with SAFI",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log((new Date()).toISOString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log((new Date()).toISOString());",
													"setTimeout(function(){}, 90000);",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP bgp-defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"bgp-defined-sets\" {\r\n\t\text-community-sets {\r\n\t\t\text-community-set [\r\n\t\t\t\t{            \r\n\t\t\t\t\t\"config\": {\r\n                \t\t\"ext-community-set-name\": \"<vrf>-route-target-export-set\"\r\n                \t\t\"ext-community-set-member\": [\r\n                \t\t\t{<rt_exp_1>}\r\n                \t\t\t{<rt_exp_2>}\r\n                \t\t\t{<rt_exp_3>}\r\n                \t\t]\r\n           \t\t\t}\r\n        \t\t}\r\n        \t\t{            \r\n\t\t\t\t\t\"config\": {\r\n                \t\t\"ext-community-set-name\": \"<vrf>-route-target-import-set\"\r\n                \t\t\"ext-community-set-member\": [\r\n                \t\t\t{<rt_imp_1>}\r\n                \t\t\t{<rt_imp_2>}\r\n                \t\t\t{<rt_imp_3>}\r\n                \t\t]\r\n           \t\t\t}\r\n        \t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "Update 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
													"var configured_item_val = '66.66.67.0';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Show updated 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rd\";",
													"var configured_item_val = '65000:10';// After fix MU-226 change this value to 65000:100",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);",
													"console.warn(\"// FIXME MU-226 this does not work: Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to 65000:100');",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Show updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rd\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}"
									},
									"response": []
								},
								{
									"name": "Create other interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Loopback1970\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": \"Loopback1970\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}"
									},
									"response": []
								},
								{
									"name": "Update 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
													"var configured_item_val = 'Loopback1970';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Show updated 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"//this needs to be fixed - there should be no GigabitEthernet0/0/0/2\" only  \"Loopback1970\"",
													"//not present replaced id",
													"pm.test(\"Check that previous interface is not present (id = \" + pm.environment.get(\"original_value\") + ')', function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').not.to.deep.include({id:pm.environment.get(\"original_value\")});",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
													"var configured_item_val = '20.30.40.0';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Show updated 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_router_id\";",
													"var configured_item_val = '1.1.1.2';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Show updated 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_router_id\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
													"var configured_item_val = '23';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Show updated 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show updated 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
													"var configured_item_val = '62000:45';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
													"var configured_item_val = '61000:90';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\",\n                            \"{{l3_vpn_bgp_rt_imp_4}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show updated 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
													"pm.environment.set(configured_item_key, undefined);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show updated 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show updated 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "Update 1a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show updated 1a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"//tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"var mystring = [];",
													"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 1b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}/interfaces"
									},
									"response": []
								},
								{
									"name": "show updated 1b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 3a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show updated 3a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"//tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"//tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"//tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"//tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"",
													"var mystring = [];",
													"//mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
													"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
													"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Update 3b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/*",
													"  This update does not create these item when it is run via Newman:",
													"  2. Body matches string \"router-id\":\"1.1.1.1\"",
													"  3. Body matches string \"neighbor-address\":\"66.66.66.0\"",
													"  4. Body matches string \"peer-as\":4194304010",
													"  5. Body matches string \"prefix\":\"10.20.30.0/24\"",
													"  5⠄ AssertionFailure in test-script",
													"*/",
													"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show updated 3b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"');",
													"mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
													"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
													"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
													"mystring.push('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "Update 4a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show updated 4a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"//tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"var mystring = [];",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "update 4b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show updated 4b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Configure 2. L3VPN BGP with SAFI",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id2}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id2}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show  2. L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
													"});",
													"",
													"pm.test('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"",
													"pm.test('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"});",
													"",
													"pm.test('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"",
													"pm.test('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"",
													"pm.test('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"",
													"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\"));",
													"});",
													"",
													"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"// test 2. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 2. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": [
										{
											"id": "dc65f307-a388-493e-808c-41aa11295723",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "text",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"responseTime": 581,
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete previous 2. L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": [
										{
											"id": "c12bf971-90ae-4a66-bc06-cc6231698c70",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "text",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"responseTime": 581,
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Configure 2. L3VPN BGP with SAFI 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"MU-230 - Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show  2. L3VPN BGP network instance 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(",
													"    '\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\") + ', ' +",
													"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"' + ', ' +",
													"    '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"' + ', ' +",
													"    '\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\") + ', ' +",
													"    '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
													"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
													"    if (arrayLength > 0) {",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            if (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == 'default') {",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"            }",
													"        }        ",
													"    }",
													"});",
													"",
													"",
													"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
													"});",
													"",
													"/*",
													"pm.test('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"",
													"pm.test('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"});",
													"",
													"pm.test('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"",
													"pm.test('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"",
													"pm.test('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"*/",
													"",
													"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"",
													"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"// test 2. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 2. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": [
										{
											"id": "ebaa8ef2-95d0-4447-a23f-8d6c34487fa7",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "text",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"responseTime": 581,
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete previous 2. L3VPN BGP 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show BGP global - config 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"console.log(\"Here is commented validation of interface id - I do not know, why\")",
													"/*",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"*/",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"//tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (network instance) 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}"
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (defined sets) 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var mystring = [];",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": [
										{
											"id": "851fa5e8-fbad-4aae-815f-13f85cae0944",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "text",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"responseTime": 581,
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "Delete BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non network instance.\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L3VPN BGP CRUD Negative",
							"item": [
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this is succesfully created instead of failure because there is no referenced network instance - MU-186\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets"
									},
									"response": []
								},
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}"
									},
									"response": []
								},
								{
									"name": "Create L3VPN BGP on non existing interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN OSPF CRUD",
					"item": [
						{
							"name": "Create OSPF  global 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Create OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id2}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric2}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id2}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id2\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id2\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface metric is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric2\")))",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Update OSPF2 area",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id3}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show updated area",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the   OSPF global instance 2 area id was updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id3\")))",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Update OSPF2 metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show updated OSPF metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface metric is updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\")))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Remove OSPF interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\r\n                            \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show updated OSPF without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Remove OSPF2 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\r\n                             \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Update OSPF2 2 interafces added",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    },\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF2 updated interafces",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0]  ospf metric was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]) === JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[1] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Update OSPF2 - remove interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); ",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"});",
											"",
											"pm.test(",
											"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
											"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
											"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if ((jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) && (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"identifier\"] == \"frinx-openconfig-policy-types:OSPF\")) {",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"                ;",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "show deleted OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                \t{\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id2}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                                                    }\n                                                },\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    },\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn('This test has not complete assertions - needs to be completed - see also MU-284 ');",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the second interface was added to ospf2 network-instance area \", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
											"});",
											"",
											"pm.test(\"Verify the second interface was added to ospf2 network-instance area \", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] )=== postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "show deleted removed OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Configure BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "show configured BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "Create OSPF  global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request1\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Configure OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table-connections\": {\n        \"table-connection\": [\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \t\"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\"\n\n            },\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\"\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
							},
							"response": []
						},
						{
							"name": "show configured redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default"
							},
							"response": []
						},
						{
							"name": "Update OSPF  global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"888\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"888\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"88.88.88.89\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 909,\n                            \"config\": {\n                                \"identifier\": 909\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
							},
							"response": []
						},
						{
							"name": "Delete OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
							},
							"response": []
						},
						{
							"name": "Delete BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "Delete global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN OSPF bugs",
					"item": [
						{
							"name": "NEG Classic - DO not allow to automatically delete interface",
							"item": [
								{
									"name": "Create OSPF  global 1 copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
									},
									"response": []
								},
								{
									"name": "Create OSPF global 2 copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id2}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric2}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id2}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 area copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id3}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 metric copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Remove OSPF2 interface copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\r\n                             \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 2 interafces added copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    },\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "show OSPF2 updated interafces",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log('This ends with status 500');",
													"console.log('MU-272 - waiting for fix - the XR device should behave similarly to the classic devices');",
													"/*",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Verify the  OSPF global instance 2 area interface[0]  ospf metric was added\", function () { ",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]) === JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\"))",
													"});",
													"",
													"",
													"pm.test(\"Verify the  OSPF global instance 2 area interface[0] is added\", function () { ",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
													"});",
													"",
													"",
													"pm.test(\"Verify the  OSPF global instance 2 area interface[1] is added\", function () { ",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Bug2",
							"item": [
								{
									"name": "Create OSPF  global 1 copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
									},
									"response": []
								},
								{
									"name": "Create OSPF global 2 copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id2}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric2}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id2}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 area copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id3}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 metric copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Remove OSPF2 interface copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\r\n                             \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "Update OSPF2 2 interafces added copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    },\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
									},
									"response": []
								},
								{
									"name": "OSPF VRF + ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								},
								{
									"name": "OSPF VRF + ospf update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								},
								{
									"name": "show OSPF VRF + ospf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log('Second update removes some parts of configuration.');",
													"console.log('MU-281 - waiting for fix');",
													"/*",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
													"});",
													"",
													"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
													"});",
													"",
													"pm.test(",
													"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
													"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
													"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
													"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
													"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
													"    if (arrayLength > 0) {",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            if (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) {",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
													"                ;",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
													"            }",
													"        }        ",
													"    }",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "show deleted removed OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                \t{\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id2}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    },\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the second interface was added to ospf2 network-instance area \", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
											"});",
											"",
											"pm.test(\"Verify the second interface was added to ospf2 network-instance area \", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] )=== postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "show deleted removed OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Configure BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "show configured BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "Create OSPF  global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request1\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "show OSPF global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Configure OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table-connections\": {\n        \"table-connection\": [\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \t\"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"passALL\"]\n                },\n                \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\"\n            },\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\"\n                },\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\"\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
							},
							"response": []
						},
						{
							"name": "show configured redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default"
							},
							"response": []
						},
						{
							"name": "Update OSPF  global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"888\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"888\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"88.88.88.89\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 909,\n                            \"config\": {\n                                \"identifier\": 909\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888"
							},
							"response": []
						},
						{
							"name": "Delete OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections"
							},
							"response": []
						},
						{
							"name": "Delete BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "Delete global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}"
							},
							"response": []
						},
						{
							"name": "Delete global OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}"
							},
							"response": []
						},
						{
							"name": "Delete global OSPF3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L2VPN connection CRUD",
					"item": [
						{
							"name": "L2VPN connection CRUD locifc-remote",
							"item": [
								{
									"name": "Create Loc To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface3}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    }\n\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show created locifc l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created locifc l2vpn');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Update Sub To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid2}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface3}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    }\n\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show updated locifc l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated locifc l2vpn');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Create Loc To Remote 3 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid2}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface3}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"2\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"2\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface2}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show created loc to remote 3 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:REMOTE' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"        tests[\"Validate endpoint 2 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][2]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created loc to remote 3 points');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Update Loc To Remote 3 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface3}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"2\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"2\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface2}}\"\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show updated loc to remote 3 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:REMOTE' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"        tests[\"Validate endpoint 2 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][2]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface3\");",
													"        tests[\"Validate endpoint 3 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated loc to remote 3 points');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Delete locifc l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2VPN connection CRUD locsub-remote",
							"item": [
								{
									"name": "Create Locsub To Remote 2 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface2}}\",\n                                             \"subinterface\": {{vpls_show_sub_interface_index}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    }\n\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show created locsub to remote 2 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created locsub to remote 2 points');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Update Locsub To Remote 2 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{vpls_ni_name}}\",\n            \"config\": {\n                \"name\": \"{{vpls_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L2VSI\"\n            },\n            \"protocols\": {\n            \t\"protocol\": [  \n\t\t\t\t   {  \n\t\t\t\t      \"name\":\"default\",\n\t\t\t\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t      \"config\":{  \n\t\t\t\t         \"name\":\"default\",\n\t\t\t\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t\t\t\t         \"enabled\": true\n\t\t\t\t      },\n\t\t\t\t      \"bgp\":{  \n\t\t\t\t         \"global\":{  \n\t\t\t\t            \"config\":{  \n\t\t\t\t               \"as\":\"65002\"\n\t\t\t\t            }\n\t\t\t\t         }\n\t\t\t\t      }\n\t\t\t\t   }\n\t\t\t\t]\n            },\n            \"connection-points\": {\n                \"connection-point\": [\n                    {\n                        \"connection-point-id\": \"remote\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:REMOTE\",\n                                        \"endpoint-id\": \"default\"\n                                    },\n                                    \"remote\": {\n                                        \"config\": {\n                                            \"virtual-circuit-identifier\": {{vpls_vccid2}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"remote\"\n                        }\n                    },\n                    {\n                        \"connection-point-id\": \"1\",\n                        \"endpoints\": {\n                            \"endpoint\": [\n                                {\n                                    \"endpoint-id\": \"default\",\n                                    \"config\": {\n                                        \"precedence\": 0,\n                                        \"type\": \"frinx-openconfig-network-instance-types:LOCAL\",\n                                        \"endpoint-id\": \"1\"\n                                    },\n                                    \"local\": {\n                                        \"config\": {\n                                            \"interface\": \"{{vpls_show_interface2}}\",\n                                             \"subinterface\": {{vpls_show_sub_interface_index}}\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"connection-point-id\": \"1\"\n                        }\n                    }\n\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "show updated locsub to remote 2 points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"vpls_show_interface2\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['config']['virtual-circuit-identifier'] == postman.getEnvironmentVariable(\"vpls_vccid2\");",
													"    }",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated locsub to remote 2 points');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								},
								{
									"name": "Delete locsub l2vpn",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{vpls_ni_name}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}