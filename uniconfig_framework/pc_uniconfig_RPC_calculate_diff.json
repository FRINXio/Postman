{
	"info": {
		"_postman_id": "908fa18c-cfec-4ddd-a703-5c8605521652",
		"name": "pc_uniconfig_RPC_calculate_diff",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 Calculate diff",
			"item": [
				{
					"name": "XR5 Calculate diff Setup",
					"item": [
						{
							"name": "install XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr_ip}}\",\n            \"cli-topology:port\": \"{{topology_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"5.3.4\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": true\n\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "install XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr2_ip}}\",\n            \"cli-topology:port\": \"{{topology_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"5.3.4\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": true\n\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"status\"]).to.eq(\"complete\")",
											"        });",
											"    })",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\") {",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"status\"]).to.eq(\"complete\")",
											"        });",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interface loopback R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate no configuration\", function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"no interface Loopback123\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"\nconf t\nno interface Loopback123\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/R1/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"R1",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interface loopback R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate no configuration\", function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"no interface Loopback123\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"\nconf t\nno interface Loopback123\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/R2/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"R2",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface loopback R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate no configuration\", function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
											"    ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"\nshow running-config interface Loopback123\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/R1/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"R1",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interface loopback R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate no configuration\", function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
											"    ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"\nshow running-config interface Loopback123\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/R2/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"R2",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR5 Calculate diff Teardown",
					"item": [
						{
							"name": "uninstall XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"connection-type\": \"cli\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"connection-type\": \"cli\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Calculate diff normal",
					"item": [
						{
							"name": "configure interface R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"loopback123\",\n                    \"config\": {\n                        \"type\": \"iana-if-type:softwareLoopback\",\n                        \"name\": \"loopback123\",\n                        \"description\": \"testing\",\n                        \"enabled\": true\n                    }\n                }\n\t\t\t]\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/loopback123",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure interface R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"loopback123\",\n                    \"config\": {\n                        \"type\": \"iana-if-type:softwareLoopback\",\n                        \"name\": \"loopback123\",\n                        \"description\": \"testing\",\n                        \"enabled\": true\n                    }\n                }\n\t\t\t]\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/loopback123",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate data created\", function() {",
											"",
											"    pm.expect(pm.response.json()[\"output\"][\"node-with-diff\"][0][\"node-id\"]).to.eql(\"R1\");",
											"    pm.expect(pm.response.json()[\"output\"][\"node-with-diff\"][0][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"    pm.expect(pm.response.json()[\"output\"][\"node-with-diff\"][0][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate data created\", function() {",
											"",
											"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"R1\");",
											"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"    pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(\"complete\");",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"R1\"]\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff R1 and R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"var list = pm.response.json()[\"output\"][\"node-with-diff\"]",
											"var items=[];",
											"for(var i = 0;i < list.length;i++){",
											"    items[i]=list[i][\"node-id\"];",
											"}",
											"",
											"pm.test(\"No duplicate nodes\", function() {",
											"  ",
											"    pm.expect(items).to.have.members([\"R1\", \"R2\"]);",
											"    pm.expect(items).to.have.lengthOf.at.most(2);",
											"",
											"});",
											"",
											"pm.test(\"Validate data created R1\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R1\") {",
											"            pm.expect(list[i][\"node-id\"]).to.eql(\"R1\");",
											"            pm.expect(list[i][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"            pm.expect(list[i][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"            ",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R1\");",
											"    }",
											"});",
											"",
											"pm.test(\"Validate data created R2\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R2\") {",
											"                pm.expect(list[i][\"node-id\"]).to.eql(\"R2\");",
											"                pm.expect(list[i][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"                pm.expect(list[i][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R2\");",
											"    }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"var list = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]",
											"var items=[];",
											"for(var i = 0;i < list.length;i++){",
											"    items[i]=list[i][\"node-id\"];",
											"}",
											"",
											"pm.test(\"No duplicate nodes\", function() {",
											"  ",
											"    pm.expect(items).to.have.members([\"R1\", \"R2\"]);",
											"    pm.expect(items).to.have.lengthOf.at.most(2);",
											"",
											"});",
											"",
											"pm.test(\"Validate data created R1\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R1\") {",
											"            pm.expect(list[i][\"node-id\"]).to.eql(\"R1\");",
											"            pm.expect(list[i][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"            pm.expect(list[i][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"            ",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R1\");",
											"    }",
											"});",
											"",
											"pm.test(\"Validate data created R2\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R2\") {",
											"                pm.expect(list[i][\"node-id\"]).to.eql(\"R2\");",
											"                pm.expect(list[i][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"                pm.expect(list[i][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R2\");",
											"    }",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Calculate diff no-change",
					"item": [
						{
							"name": "calculate diff between R1 and R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\") {",
											"pm.test(\"Validate no diff R1 and R2\", function() {",
											"            pm.expect(pm.response.json()[\"output\"]).to.be.empty;",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\") {",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"status\"]).to.eq(\"complete\")",
											"        });",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Calculate diff bad-input",
					"item": [
						{
							"name": "configure bad input interface R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"loopback123\",\n                    \"config\": {\n                        \"type\": \"iana-if-type:softwareLoopback\",\n                        \"name\": \"loopback123\",\n                        \"description\": \"testing\",\n                        \"enabled\": true\n                    }\n                }\n\t\t\t]\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/loopback123",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bad input interface R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"loopback123\",\n                    \"config\": {\n                        \"type\": \"iana-if-type:softwareLoopback\",\n                        \"name\": \"loopback123\",\n                        \"description\": \"testing\",\n                        \"enabled\": true\n                    }\n                }\n\t\t\t]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff R1 and R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\") {",
											"var list = pm.response.json()[\"output\"][\"node-with-diff\"]",
											"var items=[];",
											"for(var i = 0;i < list.length;i++){",
											"    items[i]=list[i][\"node-id\"];",
											"}",
											"",
											"pm.test(\"Validate data created R1\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R1\") {",
											"            pm.expect(list[i][\"node-id\"]).to.eql(\"R1\");",
											"            pm.expect(list[i][\"created-data\"][0][\"data\"]).to.not.be.empty;",
											"            pm.expect(pm.response.json()[\"output\"][\"node-with-diff\"][0][\"created-data\"][0][\"data\"]).to.include(\"loopback123\");",
											"            ",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R1\");",
											"    }",
											"});",
											"",
											"pm.test(\"Validate failed result \", function() {",
											"            pm.expect(items).to.not.have.members([\"R3\"]);",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\") {",
											"var list = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]",
											"var items=[];",
											"for(var i = 0;i < list.length;i++){",
											"    items[i]=list[i][\"node-id\"];",
											"}",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"pm.test(\"Validate data created R3\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R3\") {",
											"            pm.expect(list[i][\"node-id\"]).to.eql(\"R3\");",
											"            pm.expect(list[i][\"status\"]).to.eql(\"fail\");",
											"            pm.expect(list[i][\"error-type\"]).to.eql(\"processing-error\");",
											"            pm.expect(list[i][\"error-message\"]).to.eql(\"Node is missing in uniconfig topology CONFIG and OPERATIONAL datastore.\");",
											"            ",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R3\");",
											"    }",
											"});",
											"pm.test(\"Validate data created R1\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R1\") {",
											"                pm.expect(list[i][\"node-id\"]).to.eql(\"R1\");",
											"                pm.expect(list[i][\"status\"]).to.eql(\"fail\");",
											"                pm.expect(list[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R1\");",
											"    }",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R3\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}