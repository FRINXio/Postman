{
	"info": {
		"name": "FRINX Uniconfig",
		"_postman_id": "3fb78e80-3402-dc21-b5e4-940ac19322a7",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "IOS XR5",
			"item": [
				{
					"name": "XR5 Mount",
					"item": [
						{
							"name": "Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \"safe-command-execution\": false\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected CLI');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Unmount",
					"item": [
						{
							"name": "DELETE Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"No data expected\"] = responseCode.code === 404;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP CRUD",
					"item": [
						{
							"name": "XR5 LACP CRUD Setup",
							"item": [
								{
									"name": "SETUP: LR0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "LR0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83ed2397-aa98-4edd-bbba-7b028ebe1a8e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"LR0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LR0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61a631ca-6583-4f7d-a208-87387b127fb0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 MPLS-TE CRUD",
					"item": [
						{
							"name": "XR5 MPLS-TE CRUD Setup",
							"item": [
								{
									"name": "Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "925d09ef-f0ba-4ea8-b119-d132908a1bfb",
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete mpls-te\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ab70bfb-91ab-4dee-af71-d470ef9b620c",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "TE2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c26716f-0414-4f1d-8757-bd0ed7b94aaf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show nonexisting mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5eebf86-f557-492f-bdb6-638ad7561e4f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show nonexisting mpls-te\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 MPLS-TUNNEL CRUD",
					"item": [
						{
							"name": "XR5 MPLS-TUNNEL CRUD Setup",
							"item": [
								{
									"name": "Create tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Create tunnel request\"] = responseCode.code === 201 || responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_100}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "217dccce-3f59-464d-8c8a-a0c26e2f67e6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show configured tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d1f6c76-f938-4ed8-b3b2-3730a0c49f6c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel created\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel created - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel created - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel created - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_100\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 MPLS-TUNNEL CRUD Teardown",
							"item": [
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete tunnel request\"] = responseCode.code === 200;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fb884a2-e5ff-4555-8aab-14380fa0ed94",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains no interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface tunnel-te 100\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce35db02-dddf-44c4-86c6-03306b05983d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7edd89e-9fcf-464d-9e38-f13f7fd889a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcfd127a-4fc5-4251-bf66-f764a00ead21",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD",
					"item": [
						{
							"name": "XR5 BGP CRUD Setup",
							"item": [
								{
									"name": "TEARDOWN: Delete previouse bgp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router bgp {{bgp_as}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SETUP Configure neighbor group",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "BG3: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fefc9ec-19d7-4fb5-a979-0a821bffd2da",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "BG3: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81407a55-f932-44ba-9908-22417bb41dbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - BG3: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC CRUD",
					"item": [
						{
							"name": "XR5 IFC CRUD Setup",
							"item": [
								{
									"name": "SETUP: IS0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"mtu\": {{eth_mtu}},\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IS0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IS0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd1561a-94b2-4c84-80d1-db7d4ac3e055",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 IFC CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: IT0: Make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IT0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IT0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dcccf46-3130-4213-8b65-02ab448f110c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC-FULL CRUD",
					"item": [
						{
							"name": "XR5 IFC-FULL CRUD Setup",
							"item": [
								{
									"name": "SETUP: IS0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"mtu\": {{eth_mtu}},\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_false}}\n\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IS0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IS0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd1561a-94b2-4c84-80d1-db7d4ac3e055",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG CRUD",
					"item": [
						{
							"name": "XR5 LAG CRUD Setup",
							"item": [
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"//this should not fail at non physical devices",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"response_body_string\", responseBody);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LAG CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LBT: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG-FULL CRUD",
					"item": [
						{
							"name": "XR5 LAG-FULL CRUD Setup",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c73ef575-f313-47a6-90ce-3e452d4b0c15",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LAG-FULL CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LBT: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 OSPF CRUD",
					"item": [
						{
							"name": "XR5 OSPF CRUD Setup",
							"item": [
								{
									"name": "show nonexisting ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa1d6c37-fb22-4382-b82a-a8da9f2ffb85",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SYSLOG CRUD",
					"item": [
						{
							"name": "XR5 SYSLOG CRUD Setup",
							"item": [
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53e76e-2276-49f9-a083-bc37271da16f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"Bundle-Ether\"+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"Bundle-Ether\"+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SYSLOG CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LBT: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 PF-IFC CRUD",
					"item": [
						{
							"name": "XR5 PF-IFC CRUD Setup",
							"item": [
								{
									"name": "SETUP Configure policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map {{output_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{output_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\n commit\n end\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53efe6ac-b8ec-4274-9516-62ef2ac302b7",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "show nonexisting policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6031d0e-ba5b-4c5f-b6fb-232fe05f1ed9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 PF-IFC CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map {{output_policy}}\nno policy-map {{input_policy}}\nno policy-map {{output_policy2}}\nno policy-map {{input_policy2}}\n commit\n end\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "Delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53efe6ac-b8ec-4274-9516-62ef2ac302b7",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "show deleted policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3ebdad7-1bd8-4c18-963e-c1e88598cd04",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RSVP CRUD",
					"item": [
						{
							"name": "XR5 RSVP CRUD Setup",
							"item": [
								{
									"name": "TEARDOWN: Delete previouse rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no rsvp\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "RS5: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95bcfdf4-e5e6-4942-8908-b46109077866",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - RS5: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show nonexisting rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a86707da-72f5-4cbf-a30d-b034e1720e0b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SY1: replace-config-with-operational copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfbd674d-c8cd-4f18-85dd-6d70b9950b80",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SY1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t}\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC-ACL CRUD",
					"item": [
						{
							"name": "XR5 IFC-ACL CRUD Setup",
							"item": [
								{
									"name": "SETUP: IA0: Create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list {{iacl_in-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_in-acl-name2}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name2}} 10 deny ipv4 any any\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0s: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1159f85-7c23-4899-b287-a747a817d1de",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0s: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "750ce385-2177-42b6-b59f-5ca982602ab5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 IFC-ACL CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: IA0: Delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list {{iacl_in-acl-name1}}\nno ipv4 access-list {{iacl_in-acl-name2}}\nno ipv4 access-list {{iacl_out-acl-name1}}\nno ipv4 access-list {{iacl_out-acl-name2}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0t: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "729e6096-1a75-44f1-a340-b7119f9a643b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0t: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25916234-2f85-4fd4-8efa-f91efe61d7cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SNMP",
					"item": [
						{
							"name": "XR5 SNMP Lag Setup",
							"item": [
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"//this should not fail at non physical devices",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"response_body_string\", responseBody);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SNMP Lag Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL3: commit copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ffe761-507c-4e98-86ad-96a451120aee",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos",
			"item": [
				{
					"name": "Junos Mount",
					"item": [
						{
							"name": "Mount Junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44786e05-7c85-4395-9859-2ff473fdbeb0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos connected');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d139b612-c034-4638-9f97-f627ae168a35",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Mount Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"safe-command-execution\": false\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db057f06-ac17-4557-a73d-3bd60c96eee0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos cli status');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1abe88c3-4e80-4faa-8e3b-3a078b18fa69",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos Unmount",
					"item": [
						{
							"name": "Delete junos mount netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"No data expected\"] = responseCode.code === 404;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Delete junos mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"No data expected\"] = responseCode.code === 404;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC CRUD",
					"item": [
						{
							"name": "Junos IFC CRUD Setup",
							"item": [
								{
									"name": "SETUP: IS0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IS0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IS0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd1561a-94b2-4c84-80d1-db7d4ac3e055",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos IFC CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: IT0: Make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IT0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IT0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dcccf46-3130-4213-8b65-02ab448f110c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LAG CRUD",
					"item": [
						{
							"name": "Junos LAG CRUD Setup",
							"item": [
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c86533-dac3-46a1-968e-aade9ebad552",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IS0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IS0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IS0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7bd33a9-87ec-42c9-9e9b-e808596dc76e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos LAG CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LBT: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e20c9ec0-6e1e-440f-bfcb-2c6d78840a05",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"' + postman.getEnvironmentVariable(\"lag_prefix\") + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"// tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: IT0: Make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IT0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IT0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dcccf46-3130-4213-8b65-02ab448f110c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos MPLS-TUNNEL-FULL CRUD",
					"item": [
						{
							"name": "Junos MPLS-TUNNEL-FULL CRUD Setup",
							"item": [
								{
									"name": "Create tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Create tunnel request\"] = responseCode.code === 201 || responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_100}}\n             },\n             \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination}}\"\n                }\n            }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "217dccce-3f59-464d-8c8a-a0c26e2f67e6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show configured tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d1f6c76-f938-4ed8-b3b2-3730a0c49f6c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel created\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel created - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel created - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel created - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_100\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos MPLS-TUNNEL-FULL CRUD Teardown",
							"item": [
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete tunnel request\"] = responseCode.code === 200;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce35db02-dddf-44c4-86c6-03306b05983d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7edd89e-9fcf-464d-9e38-f13f7fd889a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcfd127a-4fc5-4251-bf66-f764a00ead21",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos PF-IFC CRUD",
					"description": "",
					"item": [
						{
							"name": "Junos PF-IFC CRUD Setup",
							"description": "",
							"item": [
								{
									"name": "SETUP Configure",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset class-of-service forwarding-classes queue 0 data-queue\nset class-of-service classifiers exp {{pf_exp_name}} forwarding-class data-queue loss-priority low code-points 000\nset class-of-service classifiers inet-precedence {{pf_inet_precedence_name}} import default\nset class-of-service schedulers sched\nset class-of-service forwarding-classes queue 1 scheduler-class\nset class-of-service scheduler-maps {{pf_sched_map_name}} forwarding-class scheduler-class scheduler sched\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos PF-IFC CRUD Teardown",
							"description": "",
							"item": [
								{
									"name": "TEARDOWN Deconfigure",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n delete class-of-service\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC-ACL CRUD",
					"item": [
						{
							"name": "Junos IFC-ACL CRUD Setup",
							"item": [
								{
									"name": "SETUP: IA0: Create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset firewall family inet filter {{iacl_in-acl-name1}} term term1 from address 20.20.20.21/32\nset firewall family inet filter {{iacl_in-acl-name2}} term term2 from address 20.20.20.22/32\nset firewall family inet filter {{iacl_out-acl-name1}} term term3 from address 20.20.20.23/32\nset firewall family inet filter {{iacl_out-acl-name2}} term term4 from address 20.20.20.24/32\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0s: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1159f85-7c23-4899-b287-a747a817d1de",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0s: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "750ce385-2177-42b6-b59f-5ca982602ab5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos IFC-ACL CRUD Teardown",
							"item": [
								{
									"name": "TEARDOWN: IA0: Delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete firewall\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0t: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "729e6096-1a75-44f1-a340-b7119f9a643b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0t: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25916234-2f85-4fd4-8efa-f91efe61d7cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "SYSLOG CRUD",
					"item": [
						{
							"name": "Create SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY2: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33c3e0d8-edd8-410a-b0d3-84f3bf8f7e79",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains conf t', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
											"    });",
											"    pm.test('dryrun - contains interface Bundle-Ether7029', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether7029\");",
											"    });",
											"    pm.test('dryrun - contains logging events link-status', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"logging events link-status\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "SY2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a47821-fa58-4625-8e31-e43e108aa6fd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ecab964-e55e-4574-8f4c-d09454a1d868",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"1. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"tests[\"2. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"",
											"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "Update SYSLOG => Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY3: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a142082-b698-4a0d-b61a-f96be83b1bdf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains conf t', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
											"    });",
											"    pm.test('dryrun - contains interface Bundle-Ether7029', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether7029\");",
											"    });",
											"    pm.test('dryrun - contains no logging events link-status', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no logging events link-status\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "SY3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "228f72ed-0542-4ca6-995d-05c5273ad72f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bce6484-33fe-42d2-8227-b2e1a8c60f45",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"1. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"tests[\"2. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"",
											"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
											"tests[\"Body doesnt matches string \" + mystring] = !responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "Delete SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff10777e-fa02-4cc8-b84a-cdae1b8fd10f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate rollback-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae7502ee-76b4-471b-9fae-1e74f3d9cd24",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"1. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"tests[\"2. SYSLOG interface created\"] = jsonData[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"",
											"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
											"tests[\"Body doesnt matches string \" + mystring] = !responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY1: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfbd674d-c8cd-4f18-85dd-6d70b9950b80",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY1: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\n\t\t\t\t\"{{node_id}}\"\n\t\t\t]\n\t\t}\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC-FULL CRUD",
					"item": [
						{
							"name": "SETUP: W1 Create filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "W1: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "286bf591-fd24-493b-9651-df332e07b722",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains dampening 1 750 2000 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2000 4\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 10 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 10 down 20\");",
											"    });",
											"    pm.test('dryrun - contains bundle id 151 mode on', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bundle id 151 mode on\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"    pm.test('dryrun - contains load-interval 30', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"load-interval 30\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "W1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f9e15ad-6698-44e5-bd3d-c6f980740a7e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - W1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "W1 show created filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68db2774-46aa-4d76-a11f-14ceee73f426",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - show created interface request\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"",
											"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											"",
											" ",
											"tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
											"tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
											"tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
											"tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
											"tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
											"tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
											"tests[\"Eth - frinx-openconfig-if-ethernet:ethernet load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id\");",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "SETUP: W2 Update interface ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n        \t\"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "W2: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24f68872-3645-443d-8a55-e9f882270990",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no bundle id', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bundle id\");",
											"    });",
											"    pm.test('dryrun - contains no carrier-delay', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no carrier-delay\");",
											"    });",
											"    pm.test('dryrun - contains no lacp period short', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no lacp period short\");",
											"    });",
											"    pm.test('dryrun - contains load-interval 60', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"load-interval 60\");",
											"    });",
											"    pm.test('dryrun - contains no dampening', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no dampening\");",
											"    });",
											"    pm.test('dryrun - contains dampening 1 750 2500 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2500 4\");",
											"    });",
											"    pm.test('dryrun - contains no load-interval', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no load-interval\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 20 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 20 down 20\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"    pm.test('dryrun - contains ip address 6.6.6.6 255.255.255.0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ip address 6.6.6.6 255.255.255.0\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "W2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dffcf969-fd42-46f7-b4e6-b4d371448dc3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - W2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "W2 show updated interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bcb3ae6-c556-4d9a-9a35-0c7d450ce12e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - show created interface request\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"",
											"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											"    ",
											"tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
											"tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
											"tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
											"tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
											"tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
											"tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
											"",
											"tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
											"tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip\");",
											"tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
											"",
											"tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
											"tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
											"tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
											"tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress_upd\");",
											"tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");    ",
											"tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
											"tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: IT0: Make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "IT0: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "IT0: show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dcccf46-3130-4213-8b65-02ab448f110c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - show created interface request\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
											"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
											"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC CRUD",
					"item": [
						{
							"name": "IFC CRUD Config",
							"item": [
								{
									"name": "IC0: Update interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-interfaces:config\": {\n    \t\t\"type\": \"iana-if-type:ethernetCsmacd\",\n            \"mtu\": {{eth_mtu}},\n\t\t    \"description\": \"{{eth_description_upd}}\",\n            \"enabled\": {{eth_enabled_true}}\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/config"
									},
									"response": []
								},
								{
									"name": "IC0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IC0: show updated interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff883c47-5b94-4da8-9e99-574b6fac09fe",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description_upd\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/config"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD HoldTime",
							"item": [
								{
									"name": "SETUP: P2: Create hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c90f1526-2058-4996-a609-ad87b56b1961",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show created hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "714513ca-7e48-429e-884e-722cf0ea109d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P2: Update hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ac3f3d2-9ea4-494f-a20a-7e6e50fa4691",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show updated hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c3e87-2e24-42d0-bddc-4a29a275187c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P2: Delete hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fca7ef1-4332-4581-8485-300fc6ae2409",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show deleted hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b69f01c9-15f5-408b-834d-637e4cda2e39",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Subinterface",
							"item": [
								{
									"name": "SETUP: P1: Create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d90a1a-9d69-4209-9324-110b77f0ac61",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8ef50e2-519f-45c3-af1c-e20c5e764680",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip\");",
													"tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P1: Update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d878311-e732-47f4-8726-d57516f7ef19",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e315e734-7dab-4f25-8674-740503b0ed0a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip2\");",
													"tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P1: Update empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb17afa1-0d5c-4486-be13-5e69062e0ba4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fa653a9-601c-4f3c-a050-1ba0fe3a55e5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Damping",
							"item": [
								{
									"name": "SETUP: P3: Create frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4981489d-9955-462d-b430-e0778eb76cc5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae60b503-badd-4b0b-8688-8a4887addff7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show created frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60650d1c-b519-4d28-897b-7b0d64879660",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P3: Update frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a01a7c3-715c-44d1-b445-3e87abbaddac",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cccfb2fe-0049-4ce7-ab07-a0a356a349dc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show updated frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d7f1f03-2282-433b-963f-56bcd10af9ea",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse_upd\");",
													"tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress_upd\");",
													"tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P3: Delete frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fb4cc43-5f15-40cf-b50b-beca791a10d7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f74c6bd-fd3c-4bc9-ba9e-f201e3b968fd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show deleted frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "972a5b12-cfa7-43da-b2ba-41a6a2fe9e39",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "886e6448-c20a-437a-8ecd-18b53b731086",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9418a9e-ea1c-41e2-ae4e-1f83a924399f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Ethernet",
							"item": [
								{
									"name": "SETUP: P5: Create frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a10ed3-3686-4275-b176-7f1e2e490147",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65955d26-5ad5-4b73-987f-3e61cf1191b0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show created frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eca32d0-ad0a-44c6-95b3-1294563ac4e2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_upd\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P5: Update frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d9c83d2-30bd-4e26-af01-5ae777a8a399",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show updated frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f1b6bf9-1ff8-4193-8257-99d6a7c2242e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_upd\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P5: Delete frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f78150e4-d10e-46e4-ba84-1218374fc7a6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15a567ca-2e3f-4324-8dde-feb84e434d7b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show deleted frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80626e3c-1341-4718-adfc-1f282b292560",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD  Statistics",
							"item": [
								{
									"name": "SETUP: P4: Create frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eef06b6f-5873-43ab-86a0-b8582dea2b2f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show created frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acb09342-f01e-4703-89ff-13ccb4b71e04",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P4: Update frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0aa52eba-abd7-472f-9d3e-735bbb156411",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98410744-ca59-4698-bb82-5237162e74d7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show updated frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a95314-c057-4ef1-b2ff-2ec0e1203fa2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval_upd\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P4: Delete frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "160109ea-abea-473a-8b2f-0304b893fe6a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show deleted frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c3cd380-960d-45d5-bce2-a14d750e42b5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNMP",
					"item": [
						{
							"name": "SNMP Gig",
							"item": [
								{
									"name": "SN2: Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN2: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfeb663d-7c5c-47d0-ac86-2d7d80d17275",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains snmp-server interface GigabitEthernet0/0/0/4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"snmp-server interface GigabitEthernet0/0/0/4\");",
													"    });",
													"    pm.test('dryrun - contains no notification linkupdown disable', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no notification linkupdown disable\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "SN2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f9408a7-0d63-4be1-ae3f-1d6b538eda1b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SN2: show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f817142-26b1-4d28-b206-97215fd6c37c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN3: Update SNMP => disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN3: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e23cc95d-f748-401c-a9fd-d1314257e289",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\n\t\t\t\t\"{{node_id}}\"\n\t\t\t]\n\t\t}\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "SN3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aee1ee9a-6e79-4111-92c3-98665bea60d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SN3: show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51389c49-2ffa-4e9e-8e7e-09edc4f5f7cc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"",
													"var mystring = '\"event-name\": \"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN1: Delete SNMP => Disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN1: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c825b7e-0a0b-4fa0-88f7-465564defee8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains snmp-server interface GigabitEthernet0/0/0/4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"snmp-server interface GigabitEthernet0/0/0/4\");",
													"    });",
													"    pm.test('dryrun - contains notification linkupdown disable', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"notification linkupdown disable\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "SN1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b2dce3-fc32-45cb-a98d-3febfc3b90cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SN1: show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41bec8a8-0dff-4609-84e0-8a660f86924c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;",
													"",
													"",
													"//tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"//var jsonData = JSON.parse(responseBody);",
													"//tests[\"1. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"//tests[\"2. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"",
													"//var mystring = '\"event-name\": \"frinx-event-types:LINK_UP_DOWN\"';",
													"//tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP Lag",
							"item": [
								{
									"name": "SNL3: Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29d99848-9c25-4915-8ede-f834f82378bd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SNL2: show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c719f08-e8f7-4f5b-b88a-c2381ad40dc4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL2: Delete  SNMP => Disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de593f67-a8dc-4e67-b041-cd8d98041b8b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SNL2: show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e2201f-274b-4a3c-9681-57d625d5e91a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNPM Non",
							"item": [
								{
									"name": "NEG Create SNMP - while no interface is present",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b182b8c-58f5-4281-a367-19e9b1f754be",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SNL5: show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d137b08-4ff7-42e6-9863-1a34af3bc8e0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does match string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "NEG configure SNMP while interface does not exist copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b26b0cff-7e23-4eb7-ac01-dead609a1a55",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SNL2: show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e2201f-274b-4a3c-9681-57d625d5e91a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Status code is 404\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PF-IFC CRUD",
					"item": [
						{
							"name": "PF-IFC CRUD CiscoExt",
							"description": "",
							"item": [
								{
									"name": "Create interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "PF2: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af030fc-4e96-4943-be09-69268046406f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "PF2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "416c8962-5b84-49bc-8a8b-f21f436cbd38",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - PF2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "Update interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy2}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy2}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "PF3: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16ec92d1-0a77-4844-ac3b-35a27666c0f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "PF3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34e75319-3ea9-4b81-a7f1-3f29cee394ac",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - PF3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
													"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy2\")));",
													"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy2\")));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "Delete interface policy copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "PF1: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d176ef40-415a-4d9a-8ff0-ce07c6f2a125",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains conf t', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
													"    });",
													"    pm.test('dryrun - contains no service-policy input', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no service-policy input\");",
													"    });",
													"    pm.test('dryrun - contains no service-policy output', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no service-policy output\");",
													"    });",
													"    pm.test('dryrun - contains interface Bundle-Ether666', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether666\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "PF1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84c22380-fa3b-42b8-a9a0-8b5177e5fdca",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - PF1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PF-IFC CRUD JunosExt",
							"description": "",
							"item": [
								{
									"name": "Create interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n\t\t\t\t\"frinx-juniper-pf-interfaces-extension:scheduler-map\": \"{{pf_sched_map_name}}\",\n                \"frinx-juniper-pf-interfaces-extension:classifiers\": {\n                    \"exp\": {\n                           \"name\": \"{{pf_exp_name}}\"\n                \t},\n                    \"inet-precedence\": {\n                            \"name\": \"{{pf_inet_precedence_name}}\"\n                    }\n                }            \n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "PF2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "416c8962-5b84-49bc-8a8b-f21f436cbd38",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - PF2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3136c226-777e-448a-9a2b-49ab8cec4fc4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:classifiers\"][\"inet-precedence\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"pf_inet_precedence_name\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:classifiers\"][\"exp\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"pf_exp_name\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate frinx-juniper-pf-interfaces-extension:scheduler-map\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:scheduler-map\"]).to.eql(postman.getEnvironmentVariable(\"pf_sched_map_name\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "Delete interface policy copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "PF1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84c22380-fa3b-42b8-a9a0-8b5177e5fdca",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - PF1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "048784aa-3fc8-4576-966b-93d80e24921f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "RSVP CRUD",
					"item": [
						{
							"name": "Create rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create rsvp request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS3: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e1c3134-d5ba-4590-a695-8b515d60c0d4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"    pm.test('dryrun - contains bandwidth 100', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth 100\");",
											"    });",
											"    pm.test('dryrun - contains rsvp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"rsvp\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "RS3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8dcc5ad-0a50-4d0a-ab02-9344e7015680",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3773e9b0-c09c-4ff3-a287-4e87fd5186fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate frinx-mpls-rsvp-extension:bandwidth\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_create\")));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a1a8373-09d4-4ef0-975e-145c8c2d9de3",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Update rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Update rsvp request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_update}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS4: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e2c4d9b-e26c-4222-b607-b632af012f3a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no bandwidth', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"    pm.test('dryrun - contains bandwidth 200', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth 200\");",
											"    });",
											"    pm.test('dryrun - contains rsvp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"rsvp\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "RS4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cf6c473-f5df-4438-bc01-f17f8884787a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "247b0816-35ab-4280-96a4-51b36bd9f502",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate frinx-mpls-rsvp-extension:bandwidth\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_update\")));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3721ed9c-0d65-41de-8aa1-146e999f61fc",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Delete rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete rsvp request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "329b0871-72a0-449e-8a79-eca38b4be928",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68369996-3436-4263-97aa-6880e6b96859",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2278b7b9-c7c7-4996-9614-c5829a423190",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC-ACL CRUD",
					"item": [
						{
							"name": "IFC-ACL CRUD Full",
							"item": [
								{
									"name": "SETUP: IA1: Create acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1c: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeff9e0f-de36-4e55-a483-8a1907aae14f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA1c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "069e2177-767a-49be-9187-a1740371cad9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45f06c1d-4e52-40a0-98a1-78803ff2e32c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-acl:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-acl:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    //tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA1: Update acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1u: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1f93b03-5ff3-4eb2-a9b1-fc1cd1198407",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl2 ingress\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA1u: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd44dda4-7702-4718-adb9-390c2d95d0ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1u: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show updated acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd76d048-950a-49c9-bbb0-31fd9162c51c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-acl:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-acl:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    //tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA1: Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1d: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e87782cf-4d94-4d74-846d-d5d667f54e10",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA1d: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084294ab-cce9-4b39-ac37-31a430b8e94f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1d: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b0338d7-9d4f-4f38-bfa5-188c0ab715a9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 404"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC-ACL CRUD Parts",
							"item": [
								{
									"name": "SETUP: IA2: Create acl ingress egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA2c: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9973b32-5cd9-4ad6-9de1-a53e1e4f9b0a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA2c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37e020cf-39aa-444d-949c-48af1f415cd0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c605652-041a-41f4-92b6-e1e2ac92eeb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-acl:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-acl:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    //tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2: Update acl egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets"
									},
									"response": []
								},
								{
									"name": "IA2u: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5754eeb7-cda9-4458-bb29-e4e0710538dd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA2u: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51c03465-2d8b-4df4-8171-d7bb6090ad38",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2u: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show updated egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e35cf06c-559f-4e11-8b80-9a197ed1a361",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-acl:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-acl:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    //tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show updated egress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2 Update acl ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets"
									},
									"response": []
								},
								{
									"name": "IA2ui: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "210d3cb8-66f5-4019-b679-a827f2d3e7a6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl2 ingress\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA2ui: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b4b761-1718-4f39-922b-25acad07e334",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2ui: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show updated ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "646138d9-923f-4497-9cbc-96ce93f8a61b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-acl:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-acl:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    //tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-acl:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show updated ingress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2: Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA2d: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a11698a4-c138-43d5-a963-d0ac01936eae",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "IA2d: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e032b83-d905-47e8-9c7c-643ca5867872",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2d: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8537ac8-12c2-475b-901b-5813a2a8ecf1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 404"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG-FULL CRUD",
					"item": [
						{
							"name": "Create LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "LIB2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbc3c447-7277-4a26-bfb5-2d6bee49ff4b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LIB2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
											"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
											"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
											"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
											"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
											"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
											"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
											"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
											"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
											"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
											"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
											"//this should not fail at non physical devices",
											"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
											"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
											"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
											"",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											"",
											"pm.environment.set(\"response_body_string\", responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "Update LAG interface copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "LIB2: commit copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbc3c447-7277-4a26-bfb5-2d6bee49ff4b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LIB2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show LAG interface copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
											"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
											"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
											"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
											"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
											"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
											"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
											"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
											"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
											"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
											"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
											"//this should not fail at non physical devices",
											"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
											"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
											"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
											"",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											"",
											"pm.environment.set(\"response_body_string\", responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "LBT: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "430a3578-1101-4e77-9ad9-9484bbc107fb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG CRUD",
					"item": [
						{
							"name": "LAG CRUD Config",
							"item": [
								{
									"name": "Update LAG config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description_upd}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fecf69ef-d357-4918-a572-023abae05c36",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description_upd\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Subinterface",
							"item": [
								{
									"name": "C5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "C5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "943e0dc7-0515-46ce-a2c1-423b072a69c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "baaaee2c-11a7-46fe-8e9d-de3f86975c84",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "CT5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd11d1dd-9373-4cba-bcad-119125851c6f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac359513-66ef-404c-89de-53237861c7bd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Damping",
							"item": [
								{
									"name": "C4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "C4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9609fade-c4bb-4506-a2cb-556fcfed0a04",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8843c5a8-f1c8-4a66-aacf-f55d0c489815",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 "
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "CT4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f1bc477-cf9b-4f1f-ae13-11b03ead0be1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Statistics",
							"item": [
								{
									"name": "C3. Create statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "C3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40c21270-5e85-47a9-bb97-dcf6d7d235cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "CT3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "391aac42-14a3-4718-80df-aa7a45a7cf18",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d79bbd29-06ea-497d-8c06-d93b18e9bbea",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationNoBfd",
							"item": [
								{
									"name": "C2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "C2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "566f2697-a910-4b6a-8a66-8669cbd9fbda",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108382d4-b1eb-4816-9e85-4cd8780a459a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "CT2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d576546-91e5-4238-8912-5625f6472ffc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b58a6e9e-6459-4239-89b6-ef90f43fe8ea",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfd",
							"item": [
								{
									"name": "C2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        },\n        \"bfd\": {\n            \"config\": {\n                \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \"multiplier\": {{lag_bfd_multiplier}},\n                \"min-interval\": {{lag_bfd_min-interval}}\n            }\n        }\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "C2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "566f2697-a910-4b6a-8a66-8669cbd9fbda",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "DELETE LAG aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "CT2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d576546-91e5-4238-8912-5625f6472ffc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfdLinkSpeed",
							"item": [
								{
									"name": "C2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n    \t\t\"aggregation\": {\n    \t\t\t\"config\": {\n            \t\t\"min-links\": {{lag_min-links}},\n            \t\t\"frinx-juniper-if-aggregate-extension:link-speed\": \"{{lag_link_speed}}\"\n        \t\t},\n        \t\t\"bfd\": {\n            \t\t\"config\": {\n            \t\t\t\"local-address\": \"{{lag_ip}}\",\n                \t\t\"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \t\t\"multiplier\": {{lag_bfd_multiplier}},\n                \t\t\"min-interval\": {{lag_bfd_min-interval}}\n            \t\t}\n        \t\t}\n    \t\t}\n        }\n    ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "566f2697-a910-4b6a-8a66-8669cbd9fbda",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2354bbd2-2c3a-48d3-8f00-7252f3ce9308",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													"",
													"pm.test(\"Validate link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate min-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_min-interval\")));",
													"});",
													"pm.test(\"Validate local-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"local-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate destination-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"destination-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_bfd_destination-address\"));",
													"});",
													"pm.test(\"Validate multiplier\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_multiplier\")));",
													"});",
													"pm.test(\"Validate frinx-juniper-if-aggregate-extension:link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "CT2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d576546-91e5-4238-8912-5625f6472ffc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b58a6e9e-6459-4239-89b6-ef90f43fe8ea",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "deba3244-5b76-45e6-b2c3-35c43e122955",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "facc84fc-64fe-429a-bb16-f463b89351ba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TE CRUD",
					"item": [
						{
							"name": "Create mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create mpls-te\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{mpls_intf_id}}\",\n            \"config\": {\n                \"interface-id\": \"{{mpls_intf_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "TE3: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84832e7d-96da-4df5-9a5d-fd53edb0247b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains mpls traffic-eng', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"mpls traffic-eng\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "TE3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f2a03aa-ee90-4bf8-bcf1-35bc25875d08",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - TE3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5242982-f1b1-46d6-8650-7458b6496613",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show mpls-te created request\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Mpls-te created\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
											"tests[\"Mpls-te created - config intf-id\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e396d534-0484-4de5-ad08-528b59e53b0e",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "Delete mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete mpls-te\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "TE2: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4692790d-6c53-4936-8de9-68f827d7c14e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains mpls traffic-eng', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"mpls traffic-eng\");",
											"    });",
											"    pm.test('dryrun - contains no interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface GigabitEthernet0/0/0/1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "TE2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c26716f-0414-4f1d-8757-bd0ed7b94aaf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - TE2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a5c8061-8f82-42b7-a436-313b419c3426",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show mpls-te deleted\"] = responseCode.code === 404"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f7e8407-2060-4cb9-89c1-a3ee0945d209",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TUNNEL CRUD",
					"item": [
						{
							"name": "MPLS-TUNNEL CRUD Destination",
							"item": [
								{
									"name": "Create tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination}}\"\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c049bd01-7e41-4721-8960-6d392193d44f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination_upd}}\"\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aba8d90b-2424-4a8b-8235-ea69fc5b842f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0375076b-8cec-468c-b279-1432a86a53ce",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "MPLS-TUNNEL CRUD Config",
							"item": [
								{
									"name": "Update tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU4: dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a289c2b5-d4c7-4b14-8ca2-59cde6462ab4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface tunnel-te 100\");",
													"    });",
													"    pm.test('dryrun - contains metric absolute 200', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"metric absolute 200\");",
													"    });",
													"    pm.test('dryrun - contains no interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface tunnel-te 100\");",
													"    });",
													"    pm.test('dryrun - contains autoroute announce', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"autoroute announce\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "TU4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "452c39d2-faa3-43ca-9b36-c13e8da87dc8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "128141d5-5442-422a-9756-f9e20c35cfff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4260599b-9352-4054-b744-2c258e83ffad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel invalid request\"] = responseCode.code === 200",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4538e66-0b3f-4af0-85c2-d0c422552900",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_false}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e59280a2-8d63-4606-969a-4996d94a06e6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_fail\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_fail\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "TU1: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3d48425-06fe-48d5-b6c2-8a4612daa04c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "MPLS-TUNNEL CRUD Loadshare",
							"item": [
								{
									"name": "Create tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n          \"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\": {\n                \"config\": {\n                    \"load-share\": {{mpls_load_share}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c049bd01-7e41-4721-8960-6d392193d44f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n          \"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\": {\n                \"config\": {\n                    \"load-share\": {{mpls_load_share_upd}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aba8d90b-2424-4a8b-8235-ea69fc5b842f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6d442d-b374-446b-925c-4985e4d7e623",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ed1e668-9114-4873-b272-72f286ae5f6a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 404",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5b6c82d-63e0-4c40-bea7-ce96b294a532",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6bfb5226-0997-4423-9e23-e25275f5e406",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TUNNEL-FULL CRUD",
					"item": [
						{
							"name": "Update tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create tunnel request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             },\n             \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination_upd}}\"\n                }\n            }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "217dccce-3f59-464d-8c8a-a0c26e2f67e6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - TU3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show configured tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d97e4b93-14d2-43e4-b556-db7465f4766d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Tunnel created\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
											"tests[\"Tunnel created - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
											"tests[\"Tunnel created - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
											"tests[\"Tunnel created - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LACP CRUD",
					"item": [
						{
							"name": "SETUP: LE1 Create passive mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41871257-5bf5-498a-b232-497b02c117f4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - SETUP: LE1 Create passive mode\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "LE1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a0d8a0b-4c71-47b3-ad92-16678c09646f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LE1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "LE1 show created passive mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4814ac8-d87b-4ecf-a930-9dfa5de0c1ba",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - LE1 show created passive mode\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
											"tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
											"tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
											"tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_passive\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "SETUP: LE2 Update active mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dc60561-c7fe-4390-b6df-9de20948e752",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - SETUP: LE2 Update active mode\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "LE2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0859ee9-ee95-4832-bd06-1215cbe995fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LE2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "LE2 show updated active mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d0131fd-5c6a-4d11-aa05-07c806b160d3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - LE2 show updated active mode\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
											"tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
											"tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
											"tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "SETUP: LE3 Update period fast",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37a0266f-2257-4fa7-b215-39915221dfdc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - SETUP: LE3 Update period fast\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "LE3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13c2054e-dfb6-4b70-b7a7-31a172358250",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LE3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "LE3 show updated period fast",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74e4d84b-8436-439a-a829-3b0d5f0f2f53",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - LE3 show updated period fast\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
											"tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
											"tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
											"tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: LE4 Delete bundle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22ca00af-e3b3-4d79-bf14-379a0501f6b3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"DEL - TEARDOWN: LE4 Delete bundle\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "LE4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fdf7c6b-63eb-4c3d-921f-5f5d3f2f6736",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LE4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "LE4: show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "065bbff2-0ef7-45a7-bd88-8e3a022aa658",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - LE4: show cleaned empty interface\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
											"tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
											"tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP CRUD",
					"item": [
						{
							"name": "Configure bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG4: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84c7bdea-21fe-41b3-a262-9f742a3e06dd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "BG4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fac509be-da7e-480a-a908-82a4e45b7c74",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ip1\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "Update bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as2}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG5: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eacfeb2e-2bb0-4b09-be3d-a07a3104e077",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains router bgp 666 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 666 \");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 8.8.8.8', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 8.8.8.8\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 66.66.66.66', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 66.66.66.66\");",
											"    });",
											"    pm.test('dryrun - contains no router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router bgp 1 \");",
											"    });",
											"    pm.test('dryrun - contains router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 1 \");",
											"    });",
											"    pm.test('dryrun - contains use neighbor-group nbrgroup2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"use neighbor-group nbrgroup2\");",
											"    });",
											"    pm.test('dryrun - contains no shutdown', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no shutdown\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 56000', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"remote-as 56000\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "BG5: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2dc68a6-8e7c-4ff5-bb5a-b1c1eb8047ac",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG5: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_ip2\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group2\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "Delete previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG2: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46c5c4f0-8c84-4ac1-9ff6-3315c718aea8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router bgp 1 \");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 8.8.8.8', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 8.8.8.8\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 1 \");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "BG2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9583624-d455-421d-913f-7ce830b0af0c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5279117-ab3d-4804-99d9-1aff0fd0be7d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OSPF CRUD",
					"item": [
						{
							"name": "Configure ospf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                    \n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS2: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3f2f517-eb74-46c2-8674-cd5a93b449e3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 1\");",
											"    });",
											"    pm.test('dryrun - contains max-metric router-lsa on-startup 60 include-stub summary-lsa external-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"max-metric router-lsa on-startup 60 include-stub summary-lsa external-lsa \");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains cost 77', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"cost 77\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "OS2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0691d609-988f-4c56-a156-716a65d2b5a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Update ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout2}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS3: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da21ffc0-3840-4683-95fc-4cc0a075b23c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains cost 30', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"cost 30\");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 1\");",
											"    });",
											"    pm.test('dryrun - contains no area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no area 1\");",
											"    });",
											"    pm.test('dryrun - contains interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains no interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains area 99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 99\");",
											"    });",
											"    pm.test('dryrun - contains max-metric router-lsa on-startup 30 include-stub summary-lsa external-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"max-metric router-lsa on-startup 30 include-stub summary-lsa external-lsa \");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "OS3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca71202f-aec1-4d29-a5ac-4920cb3d14db",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout2\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Delete previouse ospf configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS1: dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbb11dd5-f0f0-4cd4-87e0-d7780035b5cc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 1\");",
											"    });",
											"    pm.test('dryrun - contains no area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no area 1\");",
											"    });",
											"    pm.test('dryrun - contains no max-metric router-lsa on-startup 60 external-lsa include-stub summary-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no max-metric router-lsa on-startup 60 external-lsa include-stub summary-lsa \");",
											"    });",
											"    pm.test('dryrun - contains no interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface Loopback97\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "OS1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac25881-1c38-4335-bdbb-475dc9bbfbf4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"node_id\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ff20bb-c0ef-49dc-ba80-79de23a455f3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}