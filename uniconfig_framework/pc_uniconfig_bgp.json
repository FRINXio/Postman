{
	"info": {
		"_postman_id": "600e5b9a-52e5-4db9-81ff-b76b2d7fe811",
		"name": "pc_uniconfig_bgp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "BGP-XeExt CRUD",
					"item": [
						{
							"name": "Configure global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "766834f7-d1bb-429f-a0d2-dea6c10bb943",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"protocol\": [\n    {\n      \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n      \"name\": \"{{bgp_ni-name}}\",\n      \"bgp\": {\n        \"global\": {\n          \"config\": {\n            \"as\": \"{{bgp_peer-as4}}\"\n          },\n          \"afi-safis\": {\n            \"afi-safi\": [\n              {\n                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                \"config\": {\n                  \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                }\n              },\n                                {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\"\n                    }\n                  }\n            ]\n          }\n        },\n        \"neighbors\": {\n          \"neighbor\": [\n            {\n              \"neighbor-address\": \"{{neighbor2}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor2}}\",\n                \"description\": \"{{eth_description}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    }\n                  },\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              }\n            },\n            {\n              \"neighbor-address\": \"{{neighbor3}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor3}}\",\n                \"description\": \"{{eth_description}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              }\n            }\n          ]\n        },\n        \"peer-groups\": {\n          \"peer-group\": [\n            {\n              \"peer-group-name\": \"{{bgp_peer_name}}\",\n              \"config\": {\n                \"auth-password\": \"{{bgp_password}}\",\n                \"send-community\": \"{{bgp_send_community}}\",\n                \"peer-as\": \"{{bgp_peer-as4}}\",\n                \"peer-group-name\": \"{{bgp_peer_name}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \"export-policy\": [\n                          \"{{export_policy}}\"\n                        ]\n                      }\n                    }\n                  }\n                ]\n              },\n              \"route-reflector\": {\n                \"config\": {\n                  \"route-reflector-client\": true\n                }\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": true,\n                  \"local-address\": \"{{test_interface}}\"\n                }\n              }\n            }\n          ]\n        }\n      },\n      \"config\": {\n        \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n        \"name\": \"{{bgp_ni-name}}\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "715a8f7a-471a-4efc-8e6d-343895ace132",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no bgp router id', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"bgp router id\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - contains neighbor neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max password frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 password frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 send-community both\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max route-reflector-client', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 route-reflector-client\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max route-map TC-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 route-map TC-out out\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 activate\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv6\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.194 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.194 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.194 activate\");",
											"    });",
											"",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3960dcf8-5a19-4933-a009-14e7a8f9e807",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51d84368-234c-4fd5-b6ff-1f7fb9171306",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4b4b09e-dc05-4d75-88f7-0f71f27405dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1bf79c3-25b4-4f6c-91a2-c97d196897e6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"pm.test(\"Validate neighbor properties \", function() {",
											"    var data = pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"]",
											"    for(var i = 0; i < data.length; i++){",
											"        const neighbours = data[i]",
											"         if(neighbours[\"neighbor-address\"] === pm.environment.get(\"neighbor2\")){",
											"            pm.expect(afisafi(data[i],pm.environment.get(\"neighbor2\"))).to.be.true;",
											"            pm.expect(neighbours[\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(neighbours[\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"            pm.expect(neighbours[\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"            pm.expect(neighbours[\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"         }",
											"         else if(neighbours[\"neighbor-address\"] === pm.environment.get(\"neighbor3\")){",
											"            if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types\")){",
											"                if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === data[i]['afi-safis']['afi-safi'][0]['config']['afi-safi-name']){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                }",
											"                else{",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")] = false;",
											"                }",
											"            }",
											"            else ",
											"                tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")] = false;",
											"                ",
											"            pm.expect(neighbours[\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(neighbours[\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"            pm.expect(neighbours[\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"            pm.expect(neighbours[\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"         }",
											"    }",
											"});",
											"pm.test(\"Validate global properties\", function() {",
											"  var data = pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"];",
											"  ",
											"  pm.expect(data[\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"  pm.expect(afisafi(data,\"GLOBAL\")).to.be.true;",
											"});",
											"",
											"",
											"function afisafi(data,nameofgroup){",
											"    var afisafis=data['afi-safis']['afi-safi'];",
											"    console.log(afisafis);",
											"    for(var i = 0;i<afisafis.length; i++){",
											"        if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types_UPD\") ){",
											"            if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === data['afi-safis']['afi-safi'][i]['config']['afi-safi-name']){",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types_UPD\")] = true;",
											"",
											"            }",
											"            else{",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup] = false;",
											"            }",
											"        }",
											"        else if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types\")){",
											"            if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === data['afi-safis']['afi-safi'][i]['config']['afi-safi-name']){",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"            ",
											"                if(data[\"afi-safis\"][\"afi-safi\"][i][\"apply-policy\"]){",
											"                    if(data[\"afi-safis\"][\"afi-safi\"][i][\"apply-policy\"][\"config\"][\"export-policy\"][0] === pm.environment.get(\"export_policy\")) {",
											"                        tests[\"Validate afi-safi-name for \" + nameofgroup  + \" for apply-policy \"] = true; ",
											"            ",
											"                    }",
											"                    else ",
											"                        tests[\"Validate afi-safi-name for \" + nameofgroup  + \" for apply-policy \"] = false; ",
											"",
											"                }",
											"            }",
											"            else{",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup] = false;",
											"            }",
											"        }",
											"        else {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"pm.test(\"Validate peer-group = \", function() {",
											" var data = pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"]",
											"    for(var i = 0; i < data.length; i++){",
											"",
											"        const peergroup = data[i]",
											"         if(peergroup[\"peer-group-name\"] === pm.environment.get(\"bgp_peer_name\")){",
											"             //afi-safi ",
											"            pm.expect(afisafi(data[i],pm.environment.get(\"bgp_peer_name\"))).to.be.true;",
											"            pm.expect(peergroup[\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"            pm.expect(peergroup[\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"            pm.expect(peergroup[\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"            pm.expect(peergroup[\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(peergroup[\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(peergroup[\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"            pm.expect(peergroup[\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"            pm.expect(peergroup[\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.be.true;",
											"",
											"         }",
											"    }",
											"",
											"});",
											"",
											"",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"protocol\": [\n    {\n      \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n      \"name\": \"{{bgp_ni-name}}\",\n      \"bgp\": {\n        \"global\": {\n          \"config\": {\n            \"as\": \"{{bgp_peer-as4}}\"\n          },\n          \"afi-safis\": {\n            \"afi-safi\": [\n              {\n                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                \"config\": {\n                  \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                }\n              }\n            ]\n          }\n        },\n        \"neighbors\": {\n          \"neighbor\": [\n            {\n              \"neighbor-address\": \"{{neighbor3}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor3}}\",\n                \"description\": \"{{eth_description_upd}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            },\n            {\n              \"neighbor-address\": \"{{neighbor2}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor2}}\",\n                \"description\": \"{{eth_description_upd}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            }\n          ]\n        },\n        \"peer-groups\": {\n          \"peer-group\": [\n            {\n              \"peer-group-name\": \"{{bgp_peer_name}}\",\n              \"config\": {\n                \"auth-password\": \"{{bgp_password_upd}}\",\n                \"send-community\": \"{{bgp_send_community}}\",\n                \"peer-as\": \"{{bgp_peer-as4}}\",\n                \"peer-group-name\": \"{{bgp_peer_name}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \"export-policy\": [\n                          \"{{export_policy_upd}}\"\n                        ]\n                      }\n                    }\n                  }\n                ]\n              },\n              \"route-reflector\": {\n                \"config\": {\n                  \"route-reflector-client\": true\n                }\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": true,\n                  \"local-address\": \"{{test_interface_upd}}\"\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            }\n          ]\n        }\n      },\n      \"config\": {\n        \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n        \"name\": \"{{bgp_ni-name}}\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cace42fc-0231-4555-9164-da37102fb085",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 activate\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 password 99$%xnirf', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 password 99$%xnirf\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 update-source Loopback79', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 update-source Loopback79\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 send-community both\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 route-reflector-client', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 route-reflector-client\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 route-map TC-upd out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-3 route-map TC-upd out\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.64.2.195 description some text updated\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43591fa6-f908-4800-bed0-ae503a6392c5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f6ea17-d9ad-49f8-8fb0-15e66bf61250",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09413110-0d56-417d-b197-a6262b19e1a5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show update global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "743d065b-f283-401b-a3d4-36ed4c4083c9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"",
											"pm.test(\"Validate peer-group = \", function() {",
											" var data = pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"]",
											"    for(var i = 0; i < data.length; i++){",
											"",
											"        const peergroup = data[i]",
											"         if(peergroup[\"peer-group-name\"] === pm.environment.get(\"bgp_peer_name\")){",
											"             //afi-safi ",
											"            pm.expect(afisafi(data[i],pm.environment.get(\"bgp_peer_name\"))).to.be.true;",
											"            pm.expect(peergroup[\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password_upd\"));",
											"            pm.expect(peergroup[\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"            pm.expect(peergroup[\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"            pm.expect(peergroup[\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(peergroup[\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(peergroup[\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"            pm.expect(peergroup[\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"            pm.expect(peergroup[\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.be.true;",
											"",
											"         }",
											"    }",
											"});",
											"function afisafi(data,nameofgroup){",
											"    var afisafis=data['afi-safis']['afi-safi'];",
											"    console.log(afisafis);",
											"    for(var i = 0;i<afisafis.length; i++){",
											"        if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types_UPD\") ){",
											"            if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === data['afi-safis']['afi-safi'][i]['config']['afi-safi-name']){",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types_UPD\")] = true;",
											"",
											"            }",
											"            else{",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup] = false;",
											"            }",
											"        }",
											"        else if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types\")){",
											"            if(data['afi-safis']['afi-safi'][i]['afi-safi-name'] === data['afi-safis']['afi-safi'][i]['config']['afi-safi-name']){",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"            ",
											"                if(data[\"afi-safis\"][\"afi-safi\"][i][\"apply-policy\"]){",
											"                    if(data[\"afi-safis\"][\"afi-safi\"][i][\"apply-policy\"][\"config\"][\"export-policy\"][0] === pm.environment.get(\"export_policy_upd\")) {",
											"                        tests[\"Validate afi-safi-name for \" + nameofgroup  + \" for apply-policy \"] = true; ",
											"                    }",
											"                    else ",
											"                        tests[\"Validate afi-safi-name for \" + nameofgroup  + \" for apply-policy \"] = false; ",
											"",
											"                }",
											"            }",
											"            else{",
											"                tests[\"Validate afi-safi-name for \" + nameofgroup] = false;",
											"            }",
											"        }",
											"        else {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"pm.test(\"Validate neighbor properties for \" + pm.environment.get(\"neighbor2\") +\" and \" +pm.environment.get(\"neighbor3\"), function() {",
											"    var data = pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"]",
											"    for(var i = 0; i < data.length; i++){",
											"        const neighbours = data[i]",
											"         if(neighbours[\"neighbor-address\"] === pm.environment.get(\"neighbor2\")){",
											"            if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types\")){",
											"                if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === data[i]['afi-safis']['afi-safi'][0]['config']['afi-safi-name']){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                }",
											"                else{",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor2\")] = false;",
											"                }",
											"            }",
											"            else ",
											"                tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor2\")] = false;",
											"            pm.expect(neighbours[\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(neighbours[\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"            pm.expect(neighbours[\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"            pm.expect(neighbours[\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"         }",
											"         else if(neighbours[\"neighbor-address\"] === pm.environment.get(\"neighbor3\")){",
											"            if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === pm.environment.get(\"bgp_openconfig_types\")){",
											"                if(data[i]['afi-safis']['afi-safi'][0]['afi-safi-name'] === data[i]['afi-safis']['afi-safi'][0]['config']['afi-safi-name']){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                }",
											"                else{",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")] = false;",
											"                }",
											"            }",
											"            else ",
											"                tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor3\")] = false;",
											"                ",
											"            pm.expect(neighbours[\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"            pm.expect(neighbours[\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"            pm.expect(neighbours[\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"            pm.expect(neighbours[\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"         }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create network-instance negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37d4c88b-1e65-4227-b9d6-a7ab40032a64",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{bgp_ni-name_UPD}}\",\n      \"config\": {\n        \"name\": \"{{bgp_ni-name_UPD}}\",\n        \"type\": \"{{bgp_network_types}}\",\n        \"route-distinguisher\": \"{{bgp_route_distinguisher}}\"\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{bgp_peer-as4}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                      \"config\": {\n                        \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                    \"neighbor-address\": \"{{neighbor}}\",\n                    \"config\": {\n                      \"enabled\": true,\n                      \"peer-group\": \"{{bgp_peer_name4}}\",\n                      \"neighbor-address\": \"{{neighbor}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          },\n                          \"apply-policy\": {\n                            \"config\": {\n                              \"import-policy\": [\n                                \"{{input_policy}}\"\n                              ]\n                            }\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"peer-groups\": {\n                \"peer-group\": [\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name2}}\",\n                    \"config\": {\n                      \"peer-as\": \"{{bgp_peer-as2}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name2}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as5}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"route-reflector\": {\n                      \"config\": {\n                        \"route-reflector-client\": true\n                      }\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"config\": {\n              \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          },\n          {\n            \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"config\": {\n              \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create dry-run commit failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c6730f-3154-4f3c-9df9-edcdf3b0f44a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"pm.test(\"Validate overall-configuration-status = fail\", function() {",
											"   pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"//rollback-status",
											"pm.test(\"Validate rollback-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											"//configuration-status",
											"pm.test(\"Validate configuration-status = fail\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
											"});",
											"//error-type",
											"pm.test(\"Validate error-type = processing-error\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"//node-id",
											"pm.test(\"Validate node-id = \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
											"});",
											"//error-message",
											"pm.test(\"Validate error-message = Cannot configure BGP: Route-reflector-client is not allowed to be configured on external BGP peers - BGP process AS is 17676 while neighbor's AS is 484\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Cannot configure BGP: Route-reflector-client is not allowed to be configured on external BGP peers - BGP process AS is 17676 while neighbor's AS is 484\");",
											"});",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb1d70-e429-4a5b-8c96-4e1cb2ce89fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67c09963-4500-4777-95cc-0760180af20a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"pm.test(\"Validate overall-configuration-status = fail\", function() {",
											"   pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"//rollback-status",
											"pm.test(\"Validate rollback-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											"//configuration-status",
											"pm.test(\"Validate configuration-status = fail\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
											"});",
											"//error-type",
											"pm.test(\"Validate error-type = processing-error\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"//node-id",
											"pm.test(\"Validate node-id = \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(pm.environment.get(\"node_id\"));",
											"});",
											"//error-message",
											"pm.test(\"Validate error-message = Cannot configure BGP: Route-reflector-client is not allowed to be configured on external BGP peers - BGP process AS is 17676 while neighbor's AS is 484\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Cannot configure BGP: Route-reflector-client is not allowed to be configured on external BGP peers - BGP process AS is 17676 while neighbor's AS is 484\");",
											"});",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a969d441-5c3f-4102-b853-b9e1638865cd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37d4c88b-1e65-4227-b9d6-a7ab40032a64",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{bgp_ni-name_UPD}}\",\n      \"config\": {\n        \"name\": \"{{bgp_ni-name_UPD}}\",\n        \"type\": \"{{bgp_network_types}}\",\n        \"route-distinguisher\": \"{{bgp_route_distinguisher}}\"\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{bgp_peer-as4}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                      \"config\": {\n                        \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                    \"neighbor-address\": \"{{neighbor}}\",\n                    \"config\": {\n                      \"enabled\": true,\n                      \"peer-group\": \"{{bgp_peer_name4}}\",\n                      \"neighbor-address\": \"{{neighbor}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          },\n                          \"apply-policy\": {\n                            \"config\": {\n                              \"import-policy\": [\n                                \"{{input_policy}}\"\n                              ]\n                            }\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"peer-groups\": {\n                \"peer-group\": [\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name2}}\",\n                    \"config\": {\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name2}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"route-reflector\": {\n                      \"config\": {\n                        \"route-reflector-client\": true\n                      }\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"config\": {\n              \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          },\n          {\n            \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"config\": {\n              \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c6730f-3154-4f3c-9df9-edcdf3b0f44a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4 vrf ab\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max password frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max password frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max send-community extended', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-max send-community extended\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.255.255.2 peer-group group_a_b-max\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.255.255.2 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.255.255.2 update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 route-map policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.255.255.2 route-map policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 10.255.255.2 activate\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb1d70-e429-4a5b-8c96-4e1cb2ce89fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9682bd96-407b-4144-a68e-0316d6d164d3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25bafe1e-3e3c-4634-bea1-ae3c578f9ce0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show created network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e937cfb-7826-424a-bf74-37b25bffe8f7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name 2",
											"pm.test(\"Validate name 2 = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"pm.test(\"Validate identifier = \"+pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											" var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											" var isValid = false;",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        isValid = true;",
											"        break;",
											"    }",
											"",
											"}",
											"if(isValid !== true){",
											"        var assert = require('chai').assert",
											"        assert.fail(\"test failed due to nonexisting indentifier \");",
											"    ",
											"}",
											"});",
											"pm.test(\"Validate bgp global \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"var isValid=false;",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"bgp\"] && data[i][\"bgp\"][\"global\"]){",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));  ",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\")); ",
											"        isValid = true;",
											"        break;",
											"    }",
											"    ",
											"}",
											"if(isValid !== true){",
											"        var assert = require('chai').assert",
											"        assert.fail(\"test failed due to nonexisting global bgp configuration\");",
											"    ",
											"}",
											"});",
											"pm.test(\"Validate bgp neighbours\", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        var data2  = data[i][\"bgp\"][\"neighbors\"][\"neighbor\"];",
											"        for(var j = 0;j < data2.length; j++){",
											"            if (data2[j][\"neighbor-address\" ]=== pm.environment.get(\"neighbor\")){",
											"                pm.expect(data2[j][\"config\"][\"enabled\"]).to.be.true;",
											"                pm.expect(data2[j][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name4\"));",
											"                pm.expect(data2[j][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"]).to.contain(pm.environment.get(\"input_policy\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.false;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                ",
											"            }",
											"            else{",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed due to nonexisting all neighbors\");",
											"    }",
											"        }",
											"    }",
											"}",
											"",
											"});",
											"pm.test(\"Validate bgp peer-groups : \", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        ",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        pm.expect(data[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"        pm.expect(data[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"",
											"",
											"        var data2  = data[i][\"bgp\"][\"peer-groups\"][\"peer-group\"];",
											"        for(var j = 0;j < data2.length; j++){",
											"            if (data2[j][\"peer-group-name\" ]=== pm.environment.get(\"bgp_peer_name4\")){",
											"                pm.expect(data2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                pm.expect(data2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                pm.expect(data2[j][\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"                pm.expect(data2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name4\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name4\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name4\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"               ",
											"                ",
											"            }",
											"            else if(data2[j][\"peer-group-name\" ] === pm.environment.get(\"bgp_peer_name2\")){",
											"                pm.expect(data2[j][\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"                pm.expect(data2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name2\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name2\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name2\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.false;",
											"",
											"            }",
											"            ",
											"            ",
											"            ",
											"            else if(data2[j][\"peer-group-name\" ] === pm.environment.get(\"bgp_peer_name3\")){",
											"                pm.expect(data2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                pm.expect(data2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                pm.expect(data2[j][\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"                pm.expect(data2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name3\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name2\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name2\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                ",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                pm.expect(data2[j][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.be.true;",
											"",
											"",
											"            }",
											"            ",
											"            else {",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed due to nonexisting all peer-group-names\");",
											"            }",
											"        }",
											"",
											"    }",
											"    ",
											"}",
											"});",
											"// there is test for matching static ---HERE ",
											"pm.test(\"Validate bgp protocol config\", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"bgp_openconfig-policy_types\")){",
											"                pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"                pm.expect(data[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(data[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"    }",
											"    else if (data[i][\"name\"] !== pm.environment.get(\"bgp_ni-name\")){",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed\");",
											"    }",
											"}",
											"",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"bgp_network_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"bgp_network_types\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"bgp_route_distinguisher\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"bgp_route_distinguisher\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec1dd739-e45b-4e49-a97c-b116ca10b824",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{bgp_ni-name_UPD}}\",\n      \"config\": {\n        \"name\": \"{{bgp_ni-name_UPD}}\",\n        \"type\": \"{{bgp_network_types}}\",\n        \"route-distinguisher\": \"{{bgp_route_distinguisher}}\"\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{bgp_peer-as4}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                      \"config\": {\n                        \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                    \"neighbor-address\": \"{{neighbor_upd}}\",\n                    \"config\": {\n                      \"enabled\": true,\n                      \"peer-group\": \"{{bgp_peer_name2}}\",\n                      \"neighbor-address\": \"{{neighbor_upd}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          },\n                          \"apply-policy\": {\n                            \"config\": {\n                              \"import-policy\": [\n                                \"{{input_policy}}\"\n                              ]\n                            }\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false,\n                        \"local-address\": \"{{test_interface_upd}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"peer-groups\": {\n                \"peer-group\": [\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name2}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password_upd}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name2}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community}}\",\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"route-reflector\": {\n                      \"config\": {\n                        \"route-reflector-client\": true\n                      }\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"config\": {\n              \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          },\n          {\n            \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"config\": {\n              \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfe26ad4-b0db-47a9-9699-7c1864e40073",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor 10.255.255.2 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no neighbor 10.255.255.2 peer-group group_a_b-max\");",
											"    });",
											"    pm.test('dryrun - no neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no neighbor group_a_b-max peer-group\");",
											"    });",
											"    pm.test('dryrun - address-family ipv4 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4 vrf ab\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 peer-group group_a_b-min', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55 peer-group group_a_b-min\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55 description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 update-source Loopback79', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55 update-source Loopback79\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 route-map policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55 route-map policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55 activate\");",
											"    });",
											"        pm.test('dryrun - contains neighbor group_a_b-min remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min password 99$%xnirf', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min password 99$%xnirf\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min send-community extended', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor group_a_b-min send-community extended\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb87b6cd-62f9-48a3-ad2a-29f645fa88dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9682bd96-407b-4144-a68e-0316d6d164d3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25bafe1e-3e3c-4634-bea1-ae3c578f9ce0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show updated network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7a357a9-2724-464a-9ea3-fd075b96ea2c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"bgp_network_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"bgp_network_types\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"bgp_route_distinguisher\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"bgp_route_distinguisher\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"pm.test(\"Validate identifier = \"+pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											" var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"  var isValid=false;",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        isValid=true;",
											"        break;",
											"    }",
											"",
											"}",
											"if(isValid !== true){",
											"        var assert = require('chai').assert",
											"        assert.fail(\"test failed due to nonexisting indentifier\");",
											"    ",
											"}",
											"});",
											"pm.test(\"Validate bgp global \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											" var isValid=false;",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"bgp\"] && data[i][\"bgp\"][\"global\"]){",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));  ",
											"        pm.expect(data[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\")); ",
											"        isValid=true;",
											"        break;",
											"    }",
											"",
											"}",
											"if(isValid !== true){",
											"        var assert = require('chai').assert",
											"        assert.fail(\"test failed due to nonexisting indentifier\");",
											"    ",
											"}",
											"});",
											"pm.test(\"Validate bgp neighbours\", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        var data2  = data[i][\"bgp\"][\"neighbors\"][\"neighbor\"];",
											"        for(var j = 0;j < data2.length; j++){",
											"            if (data2[j][\"neighbor-address\" ]=== pm.environment.get(\"neighbor_upd\")){",
											"                pm.expect(data2[j][\"config\"][\"enabled\"]).to.be.true;",
											"                pm.expect(data2[j][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name2\"));",
											"                pm.expect(data2[j][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"]).to.contain(pm.environment.get(\"input_policy\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor_upd\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"neighbor_upd\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.false;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"                ",
											"            }",
											"            else{",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed due to nonexisting all neighbors\");",
											"    }",
											"        }",
											"    }",
											"}",
											"",
											"});",
											"pm.test(\"Validate bgp peer-groups : \", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"l3_vpn_bgp_table_policy\")){",
											"        ",
											"        pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"        pm.expect(data[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"        pm.expect(data[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"",
											"",
											"        var data2  = data[i][\"bgp\"][\"peer-groups\"][\"peer-group\"];",
											"        for(var j = 0;j < data2.length; j++){",
											"            if (data2[j][\"peer-group-name\" ]=== pm.environment.get(\"bgp_peer_name2\")){",
											"                pm.expect(data2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password_upd\"));",
											"                pm.expect(data2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                pm.expect(data2[j][\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"                pm.expect(data2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name2\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"               ",
											"                ",
											"            }",
											"            else if(data2[j][\"peer-group-name\" ] === pm.environment.get(\"bgp_peer_name3\")){",
											"                pm.expect(data2[j][\"config\"][\"peer-as\"]).to.eql(Number(pm.environment.get(\"bgp_peer-as4\")));",
											"                pm.expect(data2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name3\"));",
											"                pm.expect(data2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                pm.expect(data2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"                pm.expect(data2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                ",
											"                pm.expect(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));                ",
											"                if(data2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"] === data2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]){",
											"                    tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name3\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = true; ",
											"                    ",
											"                }",
											"                else{",
											"                     tests[\"Validate afi-safi-name for \" + pm.environment.get(\"bgp_peer_name3\")  + \" with afi-safi \" + pm.environment.get(\"bgp_openconfig_types\")] = false; ",
											"",
											"",
											"                }",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.be.true;",
											"                pm.expect(data2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                pm.expect(data2[j][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.be.true;",
											"            }",
											"            ",
											"            else {",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed due to nonexisting all peer-group-names\");",
											"            }",
											"        }",
											"",
											"    }",
											"    ",
											"}",
											"});",
											"",
											"// there is test for matching static ---HERE ",
											"pm.test(\"Validate bgp protocol config\", function() {",
											"var data = pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"]",
											"",
											"for(var i = 0;i < data.length;i++){",
											"    if(data[i][\"identifier\"] === pm.environment.get(\"bgp_openconfig-policy_types\")){",
											"                pm.expect(data[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"                pm.expect(data[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(data[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"    }",
											"    else if (data[i][\"name\"] !== pm.environment.get(\"bgp_ni-name\")){",
											"                var assert = require('chai').assert",
											"                assert.fail(\"test failed\");",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1175b7d-9067-4719-8b1e-6e4e9553a289",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"",
											"    pm.test(\"dryrun - no neighbor 10.64.2.195 peer-group group_a_b-3\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no neighbor 10.64.2.194 peer-group group_a_b-3\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor 10.64.2.194 peer-group group_a_b-3\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no neighbor group_a_b-3 peer-group\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no address-family ipv4\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"address-family ipv4\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no router bgp 17676\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"router bgp 17676\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure global bgp BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"GT-GROUP\",\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"GT-GROUP\",\n                                \"send-community\": \"{{bgp_send_community}}\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"GT-out\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72cc6059-d102-4ae9-84c3-f197c9528bf8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP send-community both\");",
											"    });",
											"    pm.test('dryrun - contains address-family vpnv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP peer-group\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP route-map GT-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP route-map GT-out out\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a5ba08a-52e5-49ef-8d5b-c60361be9ebf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//send-community",
											"pm.test(\"Validate send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//afi-safi-name 7",
											"pm.test(\"Validate afi-safi-name 7 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 8",
											"pm.test(\"Validate afi-safi-name 8 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//afi-safi-name 9",
											"pm.test(\"Validate afi-safi-name 9 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 10",
											"pm.test(\"Validate afi-safi-name 10 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//export policy",
											"pm.test(\"Validate  export policy= \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"GT-out\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update global bgp delete BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311fa285-fa27-4bcc-a8f3-f917aae43dbc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    }\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"GT-GROUP\",\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"GT-GROUP\"\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "319ceeb9-4f5b-4ed2-9e6e-dce9db09edd5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"no neighbor GT-GROUP send-community both\");",
											"    });",
											"    pm.test('dryrun - contains address-family vpnv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP peer-group\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"neighbor GT-GROUP remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP route-map GT-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"no neighbor GT-GROUP route-map GT-out out\");",
											"    });",
											"",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d7b21f3-096e-43d7-be49-5bd8d48039c5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5b349ba-fac8-42bb-abfb-aceb17e84492",
										"exec": [
											"console.log(\"Here we wait 15 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 15000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp deleted BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80790486-ecad-4b99-bdfa-2ca76b801735",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//send-community",
											"pm.test(\"Validate no send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()).to.not.have.property(\"BOTH\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b684c77-86eb-4df8-91be-7dcaf9e3380b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "116ff13f-9d1f-4dab-98f0-ca3130330012",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7965f217-765a-4d18-988a-9955de628c3f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"",
											"    pm.test(\"dryrun - no neighbor group_a_b-3 peer-group\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"no neighbor GT-GROUP peer-group\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no address-family ipv4\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"no address-family ipv4\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no router bgp 17676\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"no router bgp 17676\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp 17676",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fbbe302-51d3-47fe-81cd-e2f9673e4cfa",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "104f6a6a-a02e-4e07-9149-ad6224215318",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting bgp peer-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd13b7a-9a53-4d3e-b42a-f2c604b786b5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:neighbor\":[{\"neighbor-address\":\"1.1.1.1\",\"config\":{\"peer-group\":\"GT-GROUP-9999\",\"neighbor-address\":\"1.1.1.1\"},\"transport\":{\"config\":{\"passive-mode\":false}}}]}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/1.1.1.1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"1.1.1.1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "892b4c50-77e4-44ad-bd06-7cbcfbb44c68",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration datastore differs from operational\", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe22c229-f6ab-4081-a6aa-fc0c8308a94a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ccbbad1-91d7-436a-bb8b-1cc9ee581236",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"auth-password\":\"7 105E0C1702021B05\",\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676,\"send-community\":\"BOTH\"}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting bgp Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d575a793-dc5f-4f39-b5f9-f07ce05a8d1e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:transport\":{\"config\":{\"local-address\":\"Loopback9999\",\"passive-mode\":true}}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/transport",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"transport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ad09deb-5c75-4a35-9f83-34b216dfadb8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration datastore differs from operational\", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8630642-894d-43b1-932d-71534dd7208c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a446ebd7-db6b-48cb-bde2-813fdf4b960c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp vrf definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nvrf definition Mgmt-intf\naddress-family ipv4\nexit-address-family\naddress-family ipv6\nexit-address-family\nrouter bgp 17676\nbgp log-neighbor-changes\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab1ee2e8-344e-4190-8b76-ab2de2fedc0a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting peer group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d575a793-dc5f-4f39-b5f9-f07ce05a8d1e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:neighbor\":[{\"neighbor-address\":\"1.1.1.1\",\"config\":{\"peer-group\":\"GT-GROUP-9999\",\"neighbor-address\":\"1.1.1.1\"},\"transport\":{\"config\":{\"passive-mode\":false}}}]}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/1.1.1.1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"1.1.1.1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ad09deb-5c75-4a35-9f83-34b216dfadb8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration datastore differs from operational\", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21b3cf47-1b75-4db5-be9a-ef3571796d07",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b22ed2e8-df3f-41b1-8c2a-7037c3ceb4dd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP-JunosExt CRUD",
					"item": [
						{
							"name": "configure bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as2}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group2\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as2\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as2\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2a353f5-a163-4f4d-aeb8-9f392dc21692",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP-XeChecked-commit",
					"item": [
						{
							"name": "create interface Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n    \"ios-cli:command\" : \"configure terminal\ninterface {{test_interface}}\nno ip address\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8196efe6-811d-4490-bbc9-806cdc95925d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure invalid default bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n        \t\"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false,\n                                    \"local-address\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n                                }\n                            },\n                            \"config\": {\n                                \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                                \"peer-as\": {{bgp_peer-as4}}\n                            }\n                        }\n                    ]\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            },\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\"\n                            }\n                        }\n                   ]\n                }\n            }\n        }  \n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "created commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4041a36f-ec82-4ad1-a566-7a2fe63e80c1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration datastore differs from operational\", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n        \t\"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false,\n                                    \"local-address\": \"{{test_interface}}\"\n                                }\n                            },\n                            \"config\": {\n                                \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                                \"peer-as\": {{bgp_peer-as4}}\n                            }\n                        }\n                    ]\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            },\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\"\n                            }\n                        }\n                   ]\n                }\n            }\n        }  \n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updated checked-commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7edafed2-a762-4915-9da6-e27dd81281f8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c07130d5-6602-4512-81b5-5327705ad439",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:checked-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:checked-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbd29e70-bc9b-4167-ad44-2aed80146dff",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate as =\" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as4\")));",
											"});",
											"pm.test(\"Validate neigbour-address =\" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"pm.test(\"Validate local-address =\" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"pm.test(\"Validate peer-as =\" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as4\")));",
											"});",
											"pm.test(\"Validate peer-group-name =\" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"peer-group-name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"pm.test(\"Validate config peer-group-name =\" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp configuration native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{test_interface}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP CRUD",
					"item": [
						{
							"name": "configure second default bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name2}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name2}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                    \t\"prefix\": \"{{bgp_ipv6}}\",\n                        \"config\": {\n                            \"prefix\": \"{{bgp_ipv6}}\",\n                            \"frinx-bgp-extension:apply-policy\":[ \"{{input_policy}}\" ]\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"{{bgp_as2}}\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{neighbor}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{neighbor}}\",\n                                \"peer-as\": \"{{bgp_as}}\",\n                                \"auth-password\": \"{{bgp_password}}\",\n                                \"description\": \"{{eth_description}}\",\n                                \"send-community\": \"BOTH\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"enabled\": false\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"{{test_interface}}\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"{{bgp_multihop}}\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                \t\"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                    \"config\": {\n                                    \t\"frinx-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": true\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"{{input_policy}}\" ],\n                                            \"export-policy\": [ \"nexthopself\" ]\n                                        }\n                                    },\n                                     \"ipv6-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"true\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"{{bgp_max_prefix}}\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29c941d5-e065-4075-986f-4ae694468803",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 666 instance second-default', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 666 instance second-default\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"remote-as 1\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6 unicast', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 99.0.0.99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 99.0.0.99\");",
											"    });",
											"    pm.test('dryrun - contains password frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"password frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"description some text\");",
											"    });",
											"    pm.test('dryrun - contains send-community-ebgp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"send-community-ebgp\");",
											"    });",
											"    pm.test('dryrun - contains update-source loopback 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"update-source loopback 97\");",
											"    });",
											"    pm.test('dryrun - contains ebgp-multihop 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"ebgp-multihop 1\");",
											"    });",
											"    pm.test('dryrun - contains soft-reconfiguration inbound always', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"soft-reconfiguration inbound always\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"route-policy policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains next-hop-self', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"next-hop-self\");",
											"    });",
											"    pm.test('dryrun - contains default-originate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"default-originate\");",
											"    });",
											"    pm.test('dryrun - contains maximum-prefix 25', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"maximum-prefix 25\");",
											"    });",
											"    pm.test('dryrun - contains network 2010:AB8:2::/48 route-policy policy2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"network 2010:AB8:2::/48 route-policy policy2\");",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show second default bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73d8a002-89fe-4be2-b21d-17b85ee049ca",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as2\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//neighbor-address config ",
											"pm.test(\"Validate neighbor-address config = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \" + pm.environment.get(\"bgp_multihop\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_multihop\")));",
											"});",
											"//multihop enabled",
											"pm.test(\"Validate multihop enabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//import policy",
											"pm.test(\"Validate import policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//export policy",
											"pm.test(\"Validate export policy = \" + pm.environment.get(\"nexthopself\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"nexthopself\");",
											"});",
											"//frinx-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-bgp-extension:apply-policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-bgp-extension:apply-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix =\" + pm.environment.get(\"bgp_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv6\"));",
											"});",
											"//prefix config",
											"pm.test(\"Validate config prefix =\" + pm.environment.get(\"bgp_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv6\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = BOTH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"send-community\"]).to.eql(\"BOTH\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//always",
											"pm.test(\"Validate always = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(true);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \" + pm.environment.get(\"bgp_max_prefix\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_max_prefix\")));",
											"});",
											"//auth-password",
											"pm.test(\"Validate encypted password\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"auth-password\"]).to.include(\"Encrypted\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update second default bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93a5ee8a-4a17-4015-bb95-9be8415df1b9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name2}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name2}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                    \t\"prefix\": \"{{bgp_ipv4}}\",\n                        \"config\": {\n                            \"prefix\": \"{{bgp_ipv4}}\",\n                            \"frinx-bgp-extension:apply-policy\":[ \"{{input_policy}}\" ]\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"{{bgp_as2}}\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{neighbor_upd}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{neighbor_upd}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": \"{{bgp_as_upd}}\",\n                                \"auth-password\": \"Encrypted[{{bgp_passwd_encr}}]\",\n                                \"description\": \"{{eth_description_upd}}\",\n                                \"enabled\": true\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"{{test_interface_upd}}\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"{{bgp_multihop_upd}}\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                \t\"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                    \"config\": {\n                                    \t\"frinx-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": false\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"{{input_policy}}\" ]\n                                        }\n                                    },\n                                     \"ipv4-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"false\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"{{bgp_max_prefix_upd}}\",\n                                                \"shutdown-threshold-pct\": \"{{bgp_maxprefixes_pct}}\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d461f64-3b9d-4fd1-9ded-8ed9db763526",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"        pm.test('dryrun - contains router bgp 666 instance second-default', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"router bgp 666 instance second-default\");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 99.0.0.99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no neighbor 99.0.0.99\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"neighbor 55.0.0.55\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6 unicast ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains no address-family ipv6 unicast ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains no maximum-prefix', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no maximum-prefix\");",
											"    });",
											"    pm.test('dryrun - contains maximum-prefix 52', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"maximum-prefix 52\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4 unicast', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"address-family ipv4 unicast\");",
											"    });",
											"    pm.test('dryrun - contains network 33.33.33.33/32', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"network 33.33.33.33/32\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"route-policy policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains no default-originate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no default-originate\");",
											"    });",
											"    pm.test('dryrun - contains no ebgp-multihop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no ebgp-multihop\");",
											"    });",
											"    pm.test('dryrun - contains no route-policy', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no route-policy\");",
											"    });",
											"    pm.test('dryrun - contains no update-source', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no update-source\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"remote-as 2\");",
											"    });",
											"    pm.test('dryrun - contains password encypted', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"password encrypted 154B52484132252D3A35\");",
											"    });",
											"    pm.test('dryrun - contains description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains use neighbor-group nbrgroup1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"use neighbor-group nbrgroup1\");",
											"    });",
											"    pm.test('dryrun - contains no shutdown', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no shutdown\");",
											"    });",
											"    pm.test('dryrun - contains soft-reconfiguration inbound', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"soft-reconfiguration inbound\");",
											"    }); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show second default updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e891b60-1bf7-4f68-8837-743895062e2a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_as_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as_upd\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as2\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"});",
											"//neighbor-address config ",
											"pm.test(\"Validate neighbor-address config = \" + pm.environment.get(\"neighbor_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \" + pm.environment.get(\"bgp_multihop_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_multihop_upd\")));",
											"});",
											"//multihop enabled",
											"pm.test(\"Validate multihop enabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"});",
											"//import policy",
											"pm.test(\"Validate import policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//frinx-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-bgp-extension:apply-policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-bgp-extension:apply-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"bgp_ipv4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv4\"));",
											"});",
											"//prefix config",
											"pm.test(\"Validate config prefix \" + pm.environment.get(\"bgp_ipv4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv4\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//always",
											"pm.test(\"Validate always = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(false);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \" + pm.environment.get(\"bgp_max_prefix_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_max_prefix_upd\")));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
											"});",
											"//removed send-default-route",
											"pm.test(\"Validate send-default-route = false \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//auth-password",
											"pm.test(\"Validate encypted password\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"auth-password\"]).to.eql('Encrypted[' + pm.environment.get(\"bgp_passwd_encr\") + ']');",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \" + pm.environment.get(\"bgp_maxprefixes_pct\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_maxprefixes_pct\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:BGP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = frinx-openconfig-policy-types:BGP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//removed export policy",
											"var mystring = '\"nexthopself\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"//removed remove-private-as",
											"var mystring = '\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"//removed send-community",
											"var mystring = '\"send-community\": \"BOTH\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete second default previous bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe1dea51-35d1-46ee-b29c-1c8bd98bb024",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no router bgp 666 instance second-default ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no router bgp 666 instance second-default\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted second default bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP NumberFormatExceptation",
					"item": [
						{
							"name": "configure bgp 65000.10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "722d64fa-312a-437c-912f-5f3472bd35f7",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 65000.10\n bgp router-id 7.8.9.10\n address-family ipv4 unicast\n  network 1.2.3.0/24\n !\n neighbor 4.5.6.0\n  remote-as 10001\n  address-family ipv4 unicast\n commit\n end\n\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3d88cf2-60d2-4681-b2a6-82095115d41b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp 65000.10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b408d60e-cf99-4280-be3e-9b7b8ded982c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "848b94fe-d49c-40dc-891c-11176ff91179",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP-multineighbor CRUD",
					"item": [
						{
							"name": "create BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bd53e6d-8c7a-481a-a46e-e2e554e49552",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c947c098-463a-4195-b6e8-b3100dbfa30b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"{{bgp_ni-name}}\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"{{bgp_ni-name}}\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf4545d0-9c7a-48b8-a01e-1cb35985ef48",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06838967-278c-4a35-b183-916f881491ad",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//config prefix",
											"pm.test(\"Validate config prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update BGP by adding new neighbor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76fc3497-013f-4d0e-ac8c-6c0538c79198",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75a57832-fbb9-4958-ac6b-26e3b33deb5c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"{{bgp_ni-name}}\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"{{bgp_ni-name}}\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"transport\":{\n                        \"config\":{\n                           \"local-address\":\"{{l3_vpn_bgp_global_neighbor_transport}}\"\n                        }\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"policy1\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  },\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}1\"\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"{{route-policy1}}\"\n                           ],\n                           \"export-policy\":[\n                              \"{{route-policy2}}\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf4545d0-9c7a-48b8-a01e-1cb35985ef48",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5b69ff7-18f8-4642-ad64-5d7e199d1366",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(100011);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//config peer-as",
											"pm.test(\"Validate config peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77a88c45-01bc-4428-8c00-dc8c6086b109",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf4545d0-9c7a-48b8-a01e-1cb35985ef48",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5b69ff7-18f8-4642-ad64-5d7e199d1366",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN_BGP CRUD",
					"item": [
						{
							"name": "configure BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ece9f93-4296-49bd-8181-a37060826ae4",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"{{bgp_process-name}}\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"{{bgp_process-name}}\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     },\n                 {\n                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                       \"config\": {\n                           \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                           \"enabled\": true\n                       }\n                   }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0102be20-392e-4dbe-b53c-bd2e2a5a3cd1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure L3VPN BGP with SAFI",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29cbdf21-837f-48f8-bfb0-d85705f161e5",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32b4fc74-141f-4d37-941e-bfee414516af",
										"exec": [
											"console.log((new Date()).toISOString());",
											"setTimeout(function(){}, 90000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "592da446-9b20-4cec-8ea3-9c05f47325b7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c80d4bbe-43d3-4e03-a388-8bb88a20aec4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d6d2bce-484f-46a2-b08c-c10c7b6e4a98",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined-sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a14116f-277d-4aae-b0a9-42970f165a07",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP bgp-defined-sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1559fde1-78ae-45d2-ac12-3f0ffa4b9bee",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81625608-fcfe-4444-aa5d-90420936d30e",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d2d2adf-57de-4355-b373-544b8b5e7318",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
											"var configured_item_val = '66.66.67.0';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46a8f868-22d3-4497-a1b9-ae2333b479ea",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dd103c6-df5b-41ff-b958-7cd17e2bdb3c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 2  bug   UNI-697",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8044f91f-5027-419e-9d21-592d59359773",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5fe57f5-3314-4d11-aa87-ccd96a73a49d",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_rd\";",
											"var configured_item_val = '65000:100';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);",
											"console.warn(\"// FIXME UNI-697 this does not work: Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to 65000:100');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc8d2def-f70a-4126-ab9c-f74ebe8601e1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"/*      After fix UNI-697 this should be uncommented and next request removed",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rd\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UNI-697",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc8d2def-f70a-4126-ab9c-f74ebe8601e1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//route-distinguisher",
											"pm.test(\"UNI-697: inalid route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rd\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc0223b0-a1fe-44de-aa17-9b087cf66434",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create other interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cf10808-73fd-4fa0-a3d6-39b93c00d691",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{l3_vpn_bgp_nonexist_interface_id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c03460d1-d61e-4422-8281-d6eb6cf38959",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca934b26-27af-4850-b41a-18a00c213db5",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
											"var configured_item_val = 'Loopback1970';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c53b9ac-4819-4ebd-99ea-9b887b70d1a1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9fede35-6bf5-42b4-81df-0fa24b0079b5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"//not present replaced id",
											"pm.test(\"Check that previous interface is not present (id = \" + pm.environment.get(\"original_value\") + ')', function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').not.to.deep.include({id:pm.environment.get(\"original_value\")});",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e70625c-521c-4640-9731-f4631fcfc48c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8788403d-71b3-47a5-a0df-7ef7822682f7",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
											"var configured_item_val = '20.30.40.0';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6133dbe8-f533-410a-8f4e-23143a552266",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eec5c90-889f-4726-abee-3ca24faf9ae4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5de40728-e7b4-4429-a844-be7f6231a7b7",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1a54aa5-4b32-4324-a9ba-50a350ef5dc4",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_router_id\";",
											"var configured_item_val = '1.1.1.2';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3351d8f7-cc6f-4381-a6f6-959e8a039e84",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5a113d-db68-4d71-b7f5-4034e8d6b7c3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_router_id\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "575bef2d-b28e-46af-8ffd-ecc130f586a1",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9277b95-d8ec-4ad2-815f-4e2274129b95",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
											"var configured_item_val = '23';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3192001e-8083-468e-9efc-b38bd8c40468",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update L3VPN BGP defined sets 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fc71899-b61d-4bcd-a546-922c517ed99b",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bff134c-dcd6-47e5-8028-e814ceda3fe8",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
											"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda22ab6-43c8-4495-84e9-ab6834d30a9b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update L3VPN BGP defined sets 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b15f19d-f934-453e-a034-705068ba8c83",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83a994bb-c867-494d-a598-901f95a7d2eb",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
											"var configured_item_val = '62000:45';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c66bd04-d7f1-4e94-93d2-dfd482044cd3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update L3VPN BGP defined sets 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdcf821c-faf2-4ee9-8992-e805b615cd1f",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d8afbf7-f6d7-4299-b306-2295df37d55e",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
											"var configured_item_val = '61000:90';",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\",\n                            \"{{l3_vpn_bgp_rt_imp_4}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71123fb9-400e-4e70-91c7-b907d03ea2f8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
											"pm.environment.set(configured_item_key, undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update L3VPN BGP defined sets 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12a5f558-2d59-4c72-9e93-5a14452e1af2",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01e505d5-3fb0-4081-8612-b8efd2d3874d",
										"exec": [
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
											"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
											"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
											"pm.environment.set(configured_item_key, configured_item_val);",
											"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "970c9abc-08d9-4c8b-a2b3-40dbf677d7d8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
											"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update L3VPN BGP defined sets 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ae4fcc6-aabf-4516-bcf4-c348c05ff26f",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf100ed0-389e-4c60-830b-b92310b0ab5e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 1a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d33b2bae-e5e0-4600-bbe2-d656f61dcff4",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e7f9f9e-8db8-41c7-bcb6-0b5012711ffa",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 1a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca2206c7-e997-48d9-b817-946310128ede",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"console.log(\"Response: \" +  jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
											"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
											"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
											"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
											"",
											"var mystring = [];",
											"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 1b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a044ec5-c70b-428e-ab30-4d42e04d00ff",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}/interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}",
										"interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 1b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e80996e0-b9cf-4dcb-b95f-5b62f214b30d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"console.log(\"Response: \" +  jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
											"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
											"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
											"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
											"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 3a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d86e6047-e1cb-4468-8110-67b3d75d3037",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 3a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "269ab8ae-a085-4a35-9b90-5033ea4b8731",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
											"",
											"",
											"var mystring = [];",
											"mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
											"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
											"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 3b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a50ba67-f1ab-4433-828d-00d0e4b2534c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a56388f6-db6a-4c4f-a3ce-d5f2083d711e",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 60000);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 3b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1959ab00-2604-4c46-95ba-49a0a54d6c05",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"');",
											"mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
											"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
											"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
											"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
											"mystring.push('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"');",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd8b1468-29b7-47d3-ae7c-43893639b11b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 4a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a646f35-8608-42a8-a811-41f1314215c1",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 4a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3dd24b2-fd9d-42df-9c89-3ad56c0a23ca",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"console.log(\"Response: \" +  jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
											"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
											"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
											"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
											"",
											"var mystring = [];",
											"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update 4b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23e717e-e74a-4b8b-ae4d-a1e48f82bfd9",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated 4b",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3022a193-b7ca-4b0e-9717-d429b8d405cb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"console.log(\"Response: \" +  jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
											"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
											"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
											"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
											"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure 2. L3VPN BGP with SAFI",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acd1b143-cc14-4fdc-9279-c4a9239dca22",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id2}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id2}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show  2. L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa87f389-f457-407d-9ddd-b8acc6cd1c9c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
											"});",
											"",
											"pm.test('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"",
											"pm.test('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
											"});",
											"",
											"pm.test('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"",
											"pm.test('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"",
											"pm.test('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"",
											"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\"));",
											"});",
											"",
											"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e9f4eab-4121-49b5-b47c-41d9452c8826",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined-sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "680e292c-91be-49d0-844b-ec1009ee9a7f",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var testedobject = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
											"var confcount = 0;",
											"confcount = testedobject.length;",
											"",
											"",
											"// test 1. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"",
											"",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"",
											"// test 1. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"    ",
											"",
											"// test 2. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"",
											"// test 2. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "delete configured 2. L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b51dd00-6a95-4a4b-9173-bba98ee8b81c",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b9e0f05-2299-4788-9659-6b75d73a94ea",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f749375-6cee-46dd-ae4c-2ee89faf9e33",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted 2. L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b8f7d80-cf05-4a89-bc54-ea0d09599c00",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted 2. L3VPN BGP (defined sets)    UNI-698",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dc5fb01-e6fe-4b7d-979a-dcd1d90d59cd",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
											"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});",
											"",
											"console.warn(\"bug: UNI-698\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined-sets   UNI-698",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b1e7441-fd62-4999-808c-0da228a805c7",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var testedobject = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
											"var confcount = 0;",
											"confcount = testedobject.length;",
											"",
											"",
											"// test 1. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"",
											"",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"",
											"// test 1. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"    ",
											"",
											"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
											"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
											"",
											"",
											"console.warn(\"bug: UNI-698\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "configure 2. L3VPN BGP with SAFI 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19eeb5fb-fec0-4542-aa0a-bf5fea99e6f9",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ddf1a2c-51b2-49b9-9373-5723ac4810b6",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 60000);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show  2. L3VPN BGP network instance 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b115cee-de98-460a-a669-ca95fc51a444",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(",
											"    '\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"' + ', ' +",
											"    '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"' + ', ' +",
											"    '\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\") + ', ' +",
											"    '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if (jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == 'default') {",
											"                pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
											"                pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
											"                pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
											"                pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
											"                pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][i][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											"",
											"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
											"});",
											"",
											"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"",
											"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure L3VPN BGP defined sets 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ec1424b-2d9e-4e6f-af5b-287c74461d18",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit UNI-698",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"",
											"console.warn(\"bug: UNI-698\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined-sets 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e0082ed-9d69-4b4b-b8b8-108768c6e856",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var testedobject = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
											"var confcount = 0;",
											"confcount = testedobject.length;",
											"",
											"// test 1. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"",
											"",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"// test 1. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"    ",
											"// test 2. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"// test 2. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "UNI-698 export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e0082ed-9d69-4b4b-b8b8-108768c6e856",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"console.warn(\"bug: UNI-698\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/ext-community-sets/ext-community-set/{{l3_vpn_bgp_vrf2}}-route-target-export-set",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"ext-community-sets",
										"ext-community-set",
										"{{l3_vpn_bgp_vrf2}}-route-target-export-set"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "UNI-698 import",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e0082ed-9d69-4b4b-b8b8-108768c6e856",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"console.warn(\"bug: UNI-698\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/ext-community-sets/ext-community-set/{{l3_vpn_bgp_vrf2}}-route-target-import-set",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"ext-community-sets",
										"ext-community-set",
										"{{l3_vpn_bgp_vrf2}}-route-target-import-set"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "delete previous 2. L3VPN BGP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d94f9f52-56ec-4559-84cb-842c3eb273a4",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show BGP global - config 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d0102a2-4420-48a0-a443-173958f288d5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance 2  UNI-701",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb58404-de59-4de3-a828-293e517c3ee2",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
											"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
											"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
											"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
											"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
											"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
											"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
											"",
											"",
											"",
											"//id",
											"console.log(\"bug: UNI-701\")",
											"",
											"var mystring = [];",
											"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted 2. L3VPN BGP (network instance) 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c53ac04-50df-4ca4-b383-5fb6f6a9f89d",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted 2. L3VPN BGP (defined sets) 2  UNI-698",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1d67e92-38d0-479c-9e72-07ec3b91a6b6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
											"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
											"});",
											"",
											"console.warn(\"bug: UNI-698\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined-sets 2 UNI-698",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acdfacfa-8ba8-4a1b-827a-795a1186c352",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var testedobject = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
											"var confcount = 0;",
											"confcount = testedobject.length;",
											"",
											"",
											"// test 1. VRF + import",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"",
											"",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"",
											"",
											"// test 1. VRF + export",
											"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"var wasfound = false;",
											"for (var i = 0; i < confcount; i++) {",
											"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
											"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"        ",
											"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
											"        console.log(pole);",
											"        for (var i = 0; i < pole.length; i++) {",
											"            switch(pole[i]) {",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                    break;",
											"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                    break;",
											"                default:",
											"                    test[\"Found not expected value \" + pole[i]] = false;",
											"            } ",
											"        }",
											"        wasfound = true;",
											"    }",
											"}",
											"",
											"if (!wasfound) {",
											"    test[testedstring + \"was not found.\"] = false;",
											"}",
											"    ",
											"",
											"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
											"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
											"",
											"console.warn(\"bug: UNI-698\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": [
								{
									"name": "show L3VPN BGP defined-sets",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Server",
											"value": "Jetty(8.1.19.v20160209)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "localhost",
											"path": "/restconf",
											"secure": false,
											"value": "ekd6v44e3q2y32rdvlb5ino",
											"key": "JSESSIONID"
										}
									],
									"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
								}
							]
						},
						{
							"name": "delete L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28632d29-2577-4ed0-8f8d-b1f308bab004",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2be17624-748c-48f1-96f7-a27b989c01cd",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37541017-ebc3-456d-9903-8a29cb0a4732",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit   UNI-696",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after fix should be removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config after fix should be removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network after fix should be removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after fix should be removed Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1be75a68-f71f-4617-9874-46f0017112d5",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "411c6a24-0cb9-49f9-90ec-3881ebb06613",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid configuration L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec951608-cfce-456c-a685-dab3f0dcf912",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate processing error\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate error message\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"No enabled address family for VRF: THIS_IS_MY_VRF_DO_NOT_TOUCH\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network after fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cb1a513-ed40-4374-bb57-f5df268e6940",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "create L3VPN BGP on non existing interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08ad1bda-613d-4243-874f-9dc78ee358e2",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"{{bgp_process-name}}\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate processing error\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network after fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid L3VPN BGP vrf name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce13366c-83bb-418e-8460-687d5599791e",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"network-instance\": [\n   {\n     \"name\": \"{{l3_vpn_bgp_vrf_invalid}}\",\n     \"config\": {\n       \"name\": \"{{l3_vpn_bgp_vrf_invalid}}\",\n       \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n       \"enabled\": true\n     }\n   }\n ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf_invalid}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf_invalid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate processing error\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network after fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XE BGP-XeExt CRUD",
			"item": [
				{
					"name": "XE BGP-XeExt CRUD Setup",
					"item": [
						{
							"name": "configurate interafces and ipv6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63623e64-1b68-4758-b1b3-1ecb132ee1ce",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a89e444-f729-4f01-afc0-86870e8a1e04",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{test_interface}}\n     no shutdown\n     exit\n     interface {{test_interface_upd}}\n     no shutdown\n     exit\n     ipv6 unicast-routing\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XE BGP-XeExt CRUD Teardown",
					"item": [
						{
							"name": "deconfigurate prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface {{test_interface}}\n     no interface {{test_interface_upd}}\n     no vrf definition Mgmt-intf\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a529a32e-dd7a-47b8-8a72-0d0759123322",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 BGP CRUD",
			"item": [
				{
					"name": "XR5 BGP CRUD Setup",
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as2}} instance {{bgp_process-name2}}\n     no route-policy {{input_policy}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as2}} instance {{bgp_process-name2}}\n neighbor-group {{bgp_group}}\n exit\n exit\n route-policy {{input_policy}}\n end-policy\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5816fc34-4ad6-4dbd-9e0f-b8b1ad5ddaba",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD READERS",
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6b7050-4803-4487-9ba0-7c9e92e0e7e2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d21a327-9ad6-4fe1-ad59-155889de3ac5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group before bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n neighbor {{ip1}}\n remote-as {{bgp_peer-as}}\n use neighbor-group {{bgp_group}}\n no shutdown\n commit\n end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce971aea-9da8-4792-bdd4-9c64ab73fe24",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cdd3a0f-8ba4-4f4a-a329-e9db424510b7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as\")));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99ec49c7-e6aa-4759-8252-bbd59182be39",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 10000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b408d60e-cf99-4280-be3e-9b7b8ded982c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50649797-ca7d-4e66-9115-882934025804",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD Teardown",
					"item": [
						{
							"name": "delete route-policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{input_policy}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72a05a76-db83-44eb-b69b-4550b7b31ff5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos BGP-JunosExt CRUD",
			"item": [
				{
					"name": "Junos BGP-JunosExt CRUD Setup",
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "set bgp groups precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset routing-options autonomous-system {{bgp_as}}\nset protocols bgp group {{bgp_group}} type internal\nset protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "407007a1-bd6c-4040-9b14-a4b5ba3acf3b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos BGP-JunosExt CRUD Teardown",
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "026420ee-bf9e-48ee-9023-0d1818e92851",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR6 BGP-multineighbor CRUD",
			"item": [
				{
					"name": "XR6 BGP-multineighbor CRUD Setup",
					"item": [
						{
							"name": "delete BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0407cb-16e8-4889-af1a-1bff5ccf556f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf4545d0-9c7a-48b8-a01e-1cb35985ef48",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0eecf9e-7a24-4cb4-ad51-1f786a21f5aa",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     route-policy {{route-policy1}}\n     end-policy\n     route-policy {{route-policy2}}\n     end-policy\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 BGP-multineighbor CRUD Teardown",
					"item": [
						{
							"name": "deconfigure policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddadc813-02f2-41a0-88a3-4cfd58190d5e",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{route-policy1}}\n     no route-policy {{route-policy2}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 BGP-multineighbor READERS",
					"item": [
						{
							"name": "configure bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp {{bgp}}\nbgp router-id {{router}}\naddress-family ipv4 unicast\nexit\naddress-family vpnv4 unicast\nexit\nneighbor {{neighbor}}\nremote-as {{bgp}}\nupdate-source {{test_interface}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61b725d0-8dbd-47db-9e73-148c2f6ab391",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse((\"true\")));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"router\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"router\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate config afi-safi-name = frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate config afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4aab10cd-32ce-4998-a1ba-18ca63522342",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c547ef50-216a-4291-a928-a4c887aada37",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_nonexisting-process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_nonexisting-process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ad1db41-4b0c-42b8-805e-96f4c378497c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{bgp}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61b725d0-8dbd-47db-9e73-148c2f6ab391",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4aab10cd-32ce-4998-a1ba-18ca63522342",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR6 L3VPN_BGP CRUD",
			"item": [
				{
					"name": "XR6 L3VPN_BGP CRUD Setup",
					"item": [
						{
							"name": "delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c07adc41-08ea-4d10-8e5f-897f0306b5bf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d035e58-5090-42c1-82a9-d7030179fed4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous 2. L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1afb7a44-3e63-4a7d-805c-52e97c1d03a5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d167bde-433f-4e97-8c2b-2b03891224d8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7621ff51-6778-442e-af2f-f7e2909c9098",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f16ffd1e-de3f-4e64-83a7-cf63736105da",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b2bcb1d-2bc8-4da6-a138-6b1bbf5a93e3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd08b9b9-3160-4116-8390-4702886cff88",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b890713-5b2c-4920-a7c3-febfe7cb1d23",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 L3VPN_BGP READERS",
					"item": [
						{
							"name": "delete previous L3VPN BGP and prerequest route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65d0a131-18d9-4114-94ec-dd781a814523",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\nroute-policy RPL_PASS_ALL\npass\nend-policy\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "393cbd13-41cc-4af4-b289-b8601dfa4fc6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nvrf {{l3_vpn_bgp_vrf}}\naddress-family ipv4 unicast \nimport route-target \n{{l3_vpn_bgp_rt_imp_1}}\n{{l3_vpn_bgp_rt_imp_2}}\n{{l3_vpn_bgp_rt_imp_3}}\nexit\nexport route-target \n{{l3_vpn_bgp_rt_exp_1}}\n{{l3_vpn_bgp_rt_exp_2}}\n{{l3_vpn_bgp_rt_exp_3}}\nexit\nexit\nexit\ninterface {{l3_vpn_bgp_interface_id}}\nvrf {{l3_vpn_bgp_vrf}}\nexit\nrouter bgp {{l3_vpn_bgp_as_number}}\nbgp router-id {{l3_vpn_bgp_router_id}}\naddress-family vpnv4 unicast\nvrf {{l3_vpn_bgp_vrf}}\nrd {{l3_vpn_bgp_rd}}\naddress-family ipv4 unicast \nnetwork {{l3_vpn_bgp_network_prefix}} {{l3_vpn_bgp_network_prefix_mask1}}\nexit\nneighbor {{l3_vpn_bgp_neighbor_address}}\nremote-as {{l3_vpn_bgp_remote_as}}\naddress-family ipv4 unicast \nroute-policy RPL_PASS_ALL in\nroute-policy RPL_PASS_ALL out\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aecadbf4-8e3a-44ee-a5d6-e39a629c3648",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"",
											"pm.test(\"Validate id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"",
											"pm.test(\"Validate as\", function() {",
											"    var str = pm.environment.get(\"l3_vpn_bgp_as_number\");",
											"    var pos = str.lastIndexOf(\".\")",
											"    var res = str.substring(0, pos);",
											"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
											"    pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(num);",
											"});",
											"",
											"",
											"//in SETUP Configure L3VPN BGP I configure router-id for global BGP",
											"//this GET reader is for VRF - this is reason why it did not get into reader output",
											"//postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\")",
											"",
											"pm.test(\"Validate route-distinguisher\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"pm.test(\"Validate prefix\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"pm.test(\"Validate prefix\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"",
											"pm.test(\"Validate peer-as\", function() {",
											"    var str = pm.environment.get(\"l3_vpn_bgp_remote_as\");",
											"    var pos = str.lastIndexOf(\".\")",
											"    var res = str.substring(0, pos);",
											"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
											"    pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(num);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "707ac556-7342-466d-8391-b19ad32c86d5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"    /*",
											"    // this is not good because it relies on ordered input in environmental variabes....",
											"    ",
											"    pole.sort();",
											"    console.log(pole);",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
											"    */",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											"if (jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"frinx-openconfig-routing-policy:defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e39bfa0e-9a39-461d-bc10-e937cde79fc2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1031efc-9ee5-473c-96cb-f12323a28112",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2391267a-6d3a-4b66-a324-502317ad749e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete prereqest route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e39bfa0e-9a39-461d-bc10-e937cde79fc2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy RPL_PASS_ALL\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b2e05c6-fcdc-4313-94c6-b6c2fef8e3d9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}