{
	"info": {
		"_postman_id": "61db9a10-feb6-45ba-ab00-fac0340c065a",
		"name": "FRINX Scale",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "IOU Mount",
			"description": null,
			"item": [
				{
					"name": "Mount iou node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{router_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 0,\n\n      \"cli-topology:keepalive-delay\": 55,\n      \"cli-topology:keepalive-initial-delay\": 55,\n      \"cli-topology:keepalive-timeout\": 120\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wait while connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52ee3626-d301-442c-9fa6-567617c00da3",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('Wait while connected');",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d26e8fa2-fe5d-4c13-a44d-aa2fad03d161",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify all nodes connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f5f5501-96ed-4a2d-b6b5-68437181b72e",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"console.log(jsonData['topology'][0]['node'].length)",
									"var i;",
									"for (i = 0; i < jsonData['topology'][0]['node'].length; i++) {",
									"    console.log(jsonData['topology'][0]['node'][i]['cli-topology:connection-status'])",
									"    pm.expect(jsonData['topology'][0]['node'][i]['cli-topology:connection-status']).to.eql(\"connected\");",
									"    pm.test(\"Connection status \"+jsonData['topology'][0]['node'][i]['node-id'], function () {",
									"       pm.expect(jsonData['topology'][0]['node'][i]['cli-topology:connection-status']).to.eql(\"connected\");",
									"    });",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "226f64e9-eaa3-4164-960e-32e9559cb9a3",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3fbe7d3-78be-439f-995e-f1eea6ffe389",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": {{test_interface}},\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": {{test_interface}}\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{test_interface}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IOU RPC",
			"description": null,
			"item": [
				{
					"name": "calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a792f809-dca0-49a2-972e-352b69901fad",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						}
					},
					"response": []
				},
				{
					"name": "dry-run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f25e53ce-fa29-4745-a431-cf5136ed6ac2",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb0ed565-1852-4f8f-bc63-ca2df3475271",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    }\n            }\n        }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync-from-network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da24a525-5a8b-42fc-ace6-eaec6c9bda5a",
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t \n\t\t}\n\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IOU Unmount",
			"description": null,
			"item": [
				{
					"name": "Verify removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unount iou node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}