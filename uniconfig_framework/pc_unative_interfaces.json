{
	"info": {
		"_postman_id": "795d3a04-8a64-4f1f-b7e3-9d4f6d54672e",
		"name": "pc_unative_interfaces",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Junos",
			"item": [
				{
					"name": "Junos17-interface Setup",
					"item": [
						{
							"name": "install junos",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"junos\",\n        \"cli\": {\n            \"cli-topology:host\": \"10.103.5.208\",\n            \"cli-topology:port\": \"22\",\n            \"cli-topology:transport-type\": \"ssh\",\n            \"cli-topology:device-type\": \"junos\",\n            \"cli-topology:device-version\": \"17.3\",\n            \"cli-topology:username\": \"root\",\n            \"cli-topology:password\": \"Agiebiz2\",\n            \"cli-topology:journal-size\": 150,\n            \"uniconfig-config:install-uniconfig-node-enabled\": false\n        },\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"10.103.5.208\",\n            \"netconf-node-topology:port\": 830,\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"root\",\n            \"netconf-node-topology:password\": \"Agiebiz2\",\n            \"netconf-node-topology:dry-run-journal-size\": 100\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/rests/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "CLEAR CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"configure \\r\\nEntering configuration mode\\r\\n\\r\\n[edit]\\r\\nroot# load override initial_configuration.txt \\r\\n|\\bcommit\\r\\nexit\\r\\nload complete\\r\\n\\r\\n[edit]\\r\\nroot# commit \\r\\ncommit complete\\r\\n\\r\\n[edit]\\r\\nroot# exit \\r\\nExiting configuration mode\\r\\n\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Junos17-interface Teardown",
					"item": [
						{
							"name": "Clear config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "CLEAR CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"configure \\r\\nEntering configuration mode\\r\\n\\r\\n[edit]\\r\\nroot# load override initial_configuration.txt \\r\\n|\\bcommit\\r\\nexit\\r\\nload complete\\r\\n\\r\\n[edit]\\r\\nroot# commit \\r\\ncommit complete\\r\\n\\r\\n[edit]\\r\\nroot# exit \\r\\nExiting configuration mode\\r\\n\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "uninstall junos",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"connection-type\": \"cli\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8181/rests/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "IOS XR5",
			"item": [
				{
					"name": "XR5-Interfaces Setup",
					"item": [
						{
							"name": "install XR5 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr_ip}}\",\n            \"cli-topology:port\": \"{{topology_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"5.3.4\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": true\n\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful POST request\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload disk0:initial_configuration.txt\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR5-Interfaces Teardown",
					"item": [
						{
							"name": "Clear config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override initial_configuration.txt\ncommit\nexit\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with oper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Status of node\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "uninstall XR5 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"connection-type\": \"cli\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "IOS XR5 Interface",
					"item": [
						{
							"name": "Prepare loopback interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Loopback999\nshutdown\nexit\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node  status: \" + pm.response.json()[\"output\"][\"configuration-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] === postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node  status: \" + pm.response.json()[\"output\"][\"configuration-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] === postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get uniconfig node confg datastore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"frinx-openconfig-interfaces:interfaces\"][\"interface\"];",
											"",
											"pm.test(\"Evaluate prepared loopback interface \", function () {",
											"    let interfaces = []",
											"    let expectedinterfaces = ['MgmtEth0/0/CPU0/0','GigabitEthernet0/0/0/2','Loopback999','GigabitEthernet0/0/0/0','GigabitEthernet0/0/0/1'];",
											"    result.forEach((s) =>  interfaces.push(s[\"name\"])) ",
											"    pm.expect(interfaces).to.include.members(expectedinterfaces);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  inferface from cli mountpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"var result = pm.response.json()[\"frinx-openconfig-interfaces:interfaces\"][\"interface\"];",
											"",
											"pm.test(\"Evaluate prepared loopback interface \", function () {",
											"    var found=false;",
											"    let interfaces = []",
											"    let expectedinterfaces = ['MgmtEth0/0/CPU0/0','GigabitEthernet0/0/0/2','Loopback999','GigabitEthernet0/0/0/0','GigabitEthernet0/0/0/1'];",
											"    result.forEach((s) =>  interfaces.push(s[\"name\"])) ",
											"    pm.expect(interfaces).to.include.members(expectedinterfaces);",
											"",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-interfaces-clinative:interface\": [\n        {\n            \"name\": \"GigabitEthernet0/0/0/0\",\n            \"description\": \"test interface\",\n            \"load-interval\": 300,\n            \"dampening\": \"5 20 45 10 30\",\n            \"mtu\": 2048,\n            \"address-family\": {\n                \"ipv4\": {\n                    \"multicast\": [\n                        null\n                    ]\n                }\n            },\n            \"ipv4\": {\n                \"address\": \"172.30.15.1 255.255.255.240\",\n                \"verify\": {\n                    \"unicast\": {\n                        \"source\": {\n                            \"reachable-via\": {\n                                \"rx\": \"allow-self-ping allow-default\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F0",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  updated inferface from cli mountpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"interface\"];",
											"pm.test(\"configuration check on GigabitEthernet0/0/0/0 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/0\"){",
											"                pm.expect(nodeResult[\"address-family\"][\"ipv4\"][\"multicast\"][0]).to.be.null;",
											"                pm.expect(nodeResult[\"ipv4\"][\"verify\"][\"unicast\"][\"source\"][\"reachable-via\"][\"rx\"]).to.eql(\"allow-default allow-self-ping\");",
											"",
											"",
											"                pm.expect(nodeResult[\"ipv4\"][\"address\"]).to.eql(\"172.30.15.1 255.255.255.240\");",
											"                pm.expect(nodeResult[\"dampening\"]).to.eql(\"5 20 45 10 30\");",
											"                pm.expect(nodeResult[\"mtu\"]).to.eql(2048);",
											"                pm.expect(nodeResult[\"description\"]).to.eql(\"test interface\");",
											"",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F0",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-interfaces-clinative:interface\": [\n        {\n            \"name\": \"Loopback1\",\n            \"description\": \"test loopback interface\",\n            \"ipv6\": {\n                \"address\": \"fd9e:7aa7:4c72:d9c1::10/64\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=Loopback1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=Loopback1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loopback999 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=Loopback999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=Loopback999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Bundle-Ether interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"Bundle-Ether100\",\n            \"ipv4\": {\n                \"address\": \"192.168.99.1/24\"\n            },\n            \"bundle\": {\n                \"minimum-active\": {\n                    \"links\": 2\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=Bundle-Ether100?=",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=Bundle-Ether100"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign G0/0/0/1 to Bundle-Ether",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-interfaces-clinative:interface\": [\n        {\n            \"name\": \"GigabitEthernet0/0/0/1\",\n            \"bundle\": {\n                \"id\": [\n                    {\n                        \"value\": 100,\n                        \"mode\": \"active\"\n                    }\n                ]\n            },\n            \"lacp\": {\n                \"period\": {\n                    \"short\": [\n                        null\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign G0/0/0/2 to Bundle-Ether",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-interfaces-clinative:interface\": [\n        {\n            \"name\": \"GigabitEthernet0/0/0/2\",\n            \"bundle\": {\n                \"id\": [\n                    {\n                        \"value\": 100,\n                        \"mode\": \"passive\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            ",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no interface GigabitEthernet0/0/0/2\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no interface GigabitEthernet0/0/0/2\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no interface GigabitEthernet0/0/0/2\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no interface GigabitEthernet0/0/0/2\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no interface GigabitEthernet0/0/0/2\")",
											"",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check uniconfig node config DS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"xr5-interfaces-clinative:interface\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"MgmtEth0/0/CPU0/0\", \"GigabitEthernet0/0/0/2\",\"Loopback1\",\"Bundle-Ether100\",\"GigabitEthernet0/0/0/0\",\"GigabitEthernet0/0/0/1\"]",
											"        var disableincludes = [\"Loopback999\"]",
											"",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                found = false",
											"            }",
											"        });",
											"        pm.expect(found).to.be.true;",
											"",
											"    })",
											"pm.test(\"configuration check on Loopback1\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"Loopback1\"){",
											"",
											"                pm.expect(nodeResult[\"ipv6\"][\"address\"]).eql(\"fd9e:7aa7:4c72:d9c1::10/64\");",
											"                pm.expect(nodeResult[\"description\"]).to.eql(\"test loopback interface\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    pm.test(\"configuration check on Bundle-Ether100\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"Bundle-Ether100\"){",
											"",
											"                pm.expect(nodeResult[\"bundle\"][\"minimum-active\"][\"links\"]).to.eql(2);",
											"                pm.expect(nodeResult[\"ipv4\"][\"address\"]).to.eql(\"192.168.99.1 255.255.255.0\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    pm.test(\"configuration check on GigabitEthernet0/0/0/2\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/2\"){",
											"",
											" ",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"mode\"]).to.eql(\"passive\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"        pm.test(\"configuration check on GigabitEthernet0/0/0/1\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/1\"){",
											"",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"mode\"]).to.eql(\"active\");",
											"                pm.expect(nodeResult[\"lacp\"][\"period\"][\"short\"][0]).to.be.null;",
											"",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get uniconfig node operational DS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"xr5-interfaces-clinative:interface\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"MgmtEth0/0/CPU0/0\", \"GigabitEthernet0/0/0/2\",\"Loopback1\",\"Bundle-Ether100\",\"GigabitEthernet0/0/0/0\",\"GigabitEthernet0/0/0/1\"]",
											"        var disableincludes = [\"Loopback999\"]",
											"",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                found = false",
											"            }",
											"        });",
											"        pm.expect(found).to.be.true;",
											"",
											"    })",
											"pm.test(\"configuration check on Loopback1\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"Loopback1\"){",
											"",
											"                pm.expect(nodeResult[\"ipv6\"][\"address\"]).eql(\"fd9e:7aa7:4c72:d9c1::10/64\");",
											"                pm.expect(nodeResult[\"description\"]).to.eql(\"test loopback interface\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    pm.test(\"configuration check on Bundle-Ether100\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"Bundle-Ether100\"){",
											"",
											"                pm.expect(nodeResult[\"bundle\"][\"minimum-active\"][\"links\"]).to.eql(2);",
											"                pm.expect(nodeResult[\"ipv4\"][\"address\"]).to.eql(\"192.168.99.1 255.255.255.0\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    pm.test(\"configuration check on GigabitEthernet0/0/0/2\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/2\"){",
											"",
											" ",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"mode\"]).to.eql(\"passive\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"        pm.test(\"configuration check on GigabitEthernet0/0/0/1\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/1\"){",
											"",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"bundle\"][\"id\"][0][\"mode\"]).to.eql(\"active\");",
											"                pm.expect(nodeResult[\"lacp\"][\"period\"][\"short\"][0]).to.be.null;",
											"",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Junos Interface",
					"item": [
						{
							"name": "Get configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"junos17-interfaces-clinative:interfaces\"];",
											"var includes = [\"ge-0/0/3\", \"fxp0\",\"ge-0/0/0\",\"ge-0/0/1\",\"ge-0/0/2\"]",
											"pm.test(\"configuration check\", function() {",
											"        var found = false",
											"        var disableincludes = [\"ge-0/0/3\",\"ge-0/0/0\",\"ge-0/0/1\",\"ge-0/0/2\"]",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                pm.expect(nodeResult[\"disable\"][0]).to.be.null;",
											"                found = true",
											"            }",
											"",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"pm.test(\"configuration check on fxp0 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(nodeResult[\"name\"] === \"fxp0\"){",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.contain(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"10.103.5.208/24\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET SYNCED DATA",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:38"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"junos\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"junos17-firewall-clinative:firewall\": {\n                    \"filter\": [\n                        {\n                            \"name\": \"FILTER-01\",\n                            \"term\": [\n                                {\n                                    \"name\": \"T2\",\n                                    \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T3\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T1\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                                }\n                            ],\n                            \"fast-lookup-filter\": [\n                                null\n                            ],\n                            \"interface-shared\": [\n                                null\n                            ]\n                        }\n                    ],\n                    \"family\": {\n                        \"inet6\": {\n                            \"filter\": [\n                                {\n                                    \"name\": \"FILTER-03\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"TX\",\n                                            \"filter\": \"FILTER-02\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"name\": \"FILTER-02\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"rule-1\",\n                                            \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                            \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                                        },\n                                        {\n                                            \"name\": \"rule-2\",\n                                            \"then\": \"accept;\",\n                                            \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get single interface from cli MountPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    var result = pm.response.json()[\"interfaces\"];",
											"pm.test(\"configuration check on fxp0 interface\", function() {",
											"        var found = false",
											"        var includes = [\"ge-0/0/3\", \"fxp0\",\"ge-0/0/0\",\"ge-0/0/1\",\"ge-0/0/2\"]",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(nodeResult[\"name\"] === \"fxp0\"){",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.contain(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"10.103.5.208/24\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-interfaces-clinative:interfaces=fxp0?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-interfaces-clinative:interfaces=fxp0"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET DATA FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"junos17-firewall-clinative:firewall"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-09firewall\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:54"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"firewall\": {\n        \"filter\": [\n            {\n                \"name\": \"FILTER-01\",\n                \"term\": [\n                    {\n                        \"name\": \"T2\",\n                        \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                        \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T3\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T1\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                    }\n                ],\n                \"fast-lookup-filter\": [\n                    null\n                ],\n                \"interface-shared\": [\n                    null\n                ]\n            }\n        ],\n        \"family\": {\n            \"inet6\": {\n                \"filter\": [\n                    {\n                        \"name\": \"FILTER-03\",\n                        \"term\": [\n                            {\n                                \"name\": \"TX\",\n                                \"filter\": \"FILTER-02\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"FILTER-02\",\n                        \"term\": [\n                            {\n                                \"name\": \"rule-1\",\n                                \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                            },\n                            {\n                                \"name\": \"rule-2\",\n                                \"then\": \"accept;\",\n                                \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Setup interface GigaEthernet0/0/1 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"junos17-interfaces-clinative:interfaces\": [\n        {\n            \"name\": \"ge-0/0/1\",\n            \"description\": \"test interface\",\n            \"mtu\": 1024,\n            \"unit\": [\n                {\n                    \"id\": \"0\",\n                    \"description\": \"single unit\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": \"192.168.3.3/24\"\n                        }\n                    }\n                }\n            ],\n            \"hold-time\": {\n                \"up\": [\n                    {\n                        \"value\": 100,\n                        \"down\": 80\n                    }\n                ]\n            },\n            \"damping\": {\n                \"half-life\": 15,\n                \"suppress\": 4000\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete GigaEthernet0/0/2 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-interfaces-clinative:interfaces=ge-0%2F0%2F2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-interfaces-clinative:interfaces=ge-0%2F0%2F2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AE100 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"junos17-interfaces-clinative:interfaces\": [\n        {\n            \"name\": \"ae100\",\n            \"description\": \"the first aggregated interface\",\n            \"unit\": [\n                {\n                    \"id\": \"0\",\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": \"172.16.10.1/24\"\n                        }\n                    }\n                }\n            ],\n            \"aggregated-ether-options\": {\n                \"lacp\": {\n                    \"active\": [\n                        null\n                    ],\n                    \"periodic\": \"fast\"\n                }\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/junos17-interfaces-clinative:interfaces=ae100",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"junos17-interfaces-clinative:interfaces=ae100"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"    pm.test(\"Validate overall-status\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"Validate configuration-status\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"Validate node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration\": \"2020-04-24T17:55:10.96: configure\\n2020-04-24T17:55:10.964: delete firewall filter FILTER-01 term T2 then discard\\ndelete firewall filter FILTER-01 term T2 from icmp-type echo-reply\\ndelete firewall filter FILTER-01 term T3 then accept\\ndelete firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\ndelete firewall filter FILTER-01 term T3 from protocol tcp\\ndelete firewall filter FILTER-01 term T1 then accept\\ndelete firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\ndelete firewall filter FILTER-01 fast-lookup-filter\\ndelete firewall filter FILTER-01 interface-shared\\ndelete firewall family inet6 filter FILTER-03 term TX filter FILTER-02\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then log\\ndelete firewall family inet6 filter FILTER-02 term rule-1 then discard\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\ndelete firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\ndelete firewall family inet6 filter FILTER-02 term rule-2 then accept\\ndelete firewall family inet6 filter FILTER-02 term rule-2 from icmp-code address-unreachable\\n2020-04-24T17:55:10.968: set firewall filter FILTER-01 term T4 then discard\\nset firewall filter FILTER-01 term T4 from destination-address 1.2.3.0/24\\nset firewall filter FILTER-01 term T4 from protocol udp\\nset firewall filter FILTER-01 term T2 then discard\\nset firewall filter FILTER-01 term T2 from icmp-type echo-reply\\nset firewall filter FILTER-01 term T3 then accept\\nset firewall filter FILTER-01 term T3 from source-address 172.16.2.1/32\\nset firewall filter FILTER-01 term T3 from protocol tcp\\nset firewall filter FILTER-01 term T1 then accept\\nset firewall filter FILTER-01 term T1 from source-address 192.168.10.1/32\\nset firewall filter FILTER-01 fast-lookup-filter\\nset firewall family inet6 filter FILTER-02 term rule-1 then log\\nset firewall family inet6 filter FILTER-02 term rule-1 then discard\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::01/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from address be::02/128\\nset firewall family inet6 filter FILTER-02 term rule-1 from port snmp\\nset firewall family inet6 filter FILTER-02 term rule-2 then accept\\nset firewall family inet6 filter FILTER-02 term rule-2 from icmp-code port-unreachable\\n2020-04-24T17:55:10.968: commit\\n2020-04-24T17:55:10.968: exit configuration-mode\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"    pm.test(\"Validate overall-status\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"Validate configuration-status\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"Validate node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"junos\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": [
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "SYNC FROM NETWORK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": [
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								},
								{
									"name": "REPLACE CONFIG WITH OPER",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=15ig9foo4u35316qiuzyly0i6g;Path=/restconf"
										},
										{
											"key": "Set-Cookie",
											"value": "rememberMe=deleteMe; Path=/restconf; Max-Age=0; Expires=Thu, 23-Apr-2020 15:42:29 GMT"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Check deleted ge-0/0/2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-interfaces-clinative:interfaces=ge-0%2F0%2F2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-interfaces-clinative:interfaces=ge-0%2F0%2F2"
									]
								}
							},
							"response": [
								{
									"name": "GET DATA FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"junos17-firewall-clinative:firewall"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-09firewall\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:54"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"firewall\": {\n        \"filter\": [\n            {\n                \"name\": \"FILTER-01\",\n                \"term\": [\n                    {\n                        \"name\": \"T2\",\n                        \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                        \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T3\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T1\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                    }\n                ],\n                \"fast-lookup-filter\": [\n                    null\n                ],\n                \"interface-shared\": [\n                    null\n                ]\n            }\n        ],\n        \"family\": {\n            \"inet6\": {\n                \"filter\": [\n                    {\n                        \"name\": \"FILTER-03\",\n                        \"term\": [\n                            {\n                                \"name\": \"TX\",\n                                \"filter\": \"FILTER-02\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"FILTER-02\",\n                        \"term\": [\n                            {\n                                \"name\": \"rule-1\",\n                                \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                            },\n                            {\n                                \"name\": \"rule-2\",\n                                \"then\": \"accept;\",\n                                \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Get AE100 from cli MountPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    var result = pm.response.json()[\"interfaces\"];",
											"pm.test(\"configuration check on ae100 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.eql(\"ae100\");",
											"            if(nodeResult[\"name\"] === \"ae100\"){",
											"                pm.expect(nodeResult[\"aggregated-ether-options\"][\"lacp\"][\"active\"][0]).to.be.null;",
											"                pm.expect(nodeResult[\"aggregated-ether-options\"][\"lacp\"][\"periodic\"]).to.be.eql(\"fast\");",
											"                pm.expect(nodeResult[\"description\"]).to.contain(\"the first aggregated interface\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"172.16.10.1/24\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-interfaces-clinative:interfaces=ae100",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-interfaces-clinative:interfaces=ae100"
									]
								}
							},
							"response": [
								{
									"name": "GET DATA FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"junos17-firewall-clinative:firewall"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-09firewall\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:54"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"firewall\": {\n        \"filter\": [\n            {\n                \"name\": \"FILTER-01\",\n                \"term\": [\n                    {\n                        \"name\": \"T2\",\n                        \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                        \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T3\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T1\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                    }\n                ],\n                \"fast-lookup-filter\": [\n                    null\n                ],\n                \"interface-shared\": [\n                    null\n                ]\n            }\n        ],\n        \"family\": {\n            \"inet6\": {\n                \"filter\": [\n                    {\n                        \"name\": \"FILTER-03\",\n                        \"term\": [\n                            {\n                                \"name\": \"TX\",\n                                \"filter\": \"FILTER-02\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"FILTER-02\",\n                        \"term\": [\n                            {\n                                \"name\": \"rule-1\",\n                                \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                            },\n                            {\n                                \"name\": \"rule-2\",\n                                \"then\": \"accept;\",\n                                \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Get ge-0/0/1 from cli MountPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    var result = pm.response.json()[\"interfaces\"];",
											"pm.test(\"configuration check on ge-0/0/1 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"ge-0/0/1\"){",
											"                pm.expect(nodeResult[\"damping\"][\"half-life\"]).to.eql(15);",
											"                pm.expect(nodeResult[\"damping\"][\"suppress\"]).to.eql(4000);",
											"",
											"",
											"                pm.expect(nodeResult[\"hold-time\"][\"up\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"hold-time\"][\"up\"][0][\"down\"]).to.eql(80);",
											"",
											"",
											"                pm.expect(nodeResult[\"description\"]).to.eql(\"test interface\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"192.168.3.3/24\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"description\"]).to.eql(\"single unit\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node={{node_id}}",
										"yang-ext:mount",
										"junos17-interfaces-clinative:interfaces=ge-0%2F0%2F1"
									]
								}
							},
							"response": [
								{
									"name": "GET DATA FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=junos/yang-ext:mount/junos17-firewall-clinative:firewall?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=junos",
												"yang-ext:mount",
												"junos17-firewall-clinative:firewall"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-09firewall\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:54"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"firewall\": {\n        \"filter\": [\n            {\n                \"name\": \"FILTER-01\",\n                \"term\": [\n                    {\n                        \"name\": \"T2\",\n                        \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                        \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T3\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                    },\n                    {\n                        \"name\": \"T1\",\n                        \"then\": \"accept;\",\n                        \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                    }\n                ],\n                \"fast-lookup-filter\": [\n                    null\n                ],\n                \"interface-shared\": [\n                    null\n                ]\n            }\n        ],\n        \"family\": {\n            \"inet6\": {\n                \"filter\": [\n                    {\n                        \"name\": \"FILTER-03\",\n                        \"term\": [\n                            {\n                                \"name\": \"TX\",\n                                \"filter\": \"FILTER-02\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"FILTER-02\",\n                        \"term\": [\n                            {\n                                \"name\": \"rule-1\",\n                                \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                            },\n                            {\n                                \"name\": \"rule-2\",\n                                \"then\": \"accept;\",\n                                \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Get interfaces config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"junos17-interfaces-clinative:interfaces\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = false",
											"        var includes = [\"ge-0/0/3\", \"fxp0\",\"ge-0/0/0\",\"ge-0/0/1\",\"ae100\"]",
											"        var disableincludes = [\"ge-0/0/3\",\"ge-0/0/0\"]",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                pm.expect(nodeResult[\"disable\"][0]).to.be.null;",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"pm.test(\"configuration check on ge-0/0/1 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"ge-0/0/1\"){",
											"                pm.expect(nodeResult[\"damping\"][\"half-life\"]).to.eql(15);",
											"                pm.expect(nodeResult[\"damping\"][\"suppress\"]).to.eql(4000);",
											"",
											"",
											"                pm.expect(nodeResult[\"hold-time\"][\"up\"][0][\"value\"]).to.eql(100);",
											"                pm.expect(nodeResult[\"hold-time\"][\"up\"][0][\"down\"]).to.eql(80);",
											"",
											"",
											"                pm.expect(nodeResult[\"description\"]).to.contain(\"test interface\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"192.168.3.3/24\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"description\"]).to.contain(\"single unit\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"",
											"pm.test(\"configuration check on ae100 interface\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"ae100\"){",
											"                pm.expect(nodeResult[\"aggregated-ether-options\"][\"lacp\"][\"active\"][0]).to.be.null;",
											"                pm.expect(nodeResult[\"aggregated-ether-options\"][\"lacp\"][\"periodic\"]).to.be.eql(\"fast\");",
											"                pm.expect(nodeResult[\"description\"]).to.contain(\"the first aggregated interface\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"id\"]).to.eql(\"0\");",
											"                pm.expect(nodeResult[\"unit\"][0][\"family\"][\"inet\"][\"address\"]).to.eql(\"172.16.10.1/24\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET SYNCED DATA",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=junos"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-24 15:42:38"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"junos\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"junos17-firewall-clinative:firewall\": {\n                    \"filter\": [\n                        {\n                            \"name\": \"FILTER-01\",\n                            \"term\": [\n                                {\n                                    \"name\": \"T2\",\n                                    \"then\": \"{\\r\\n    discard;\\r\\n}\",\n                                    \"from\": \"{\\r\\n    icmp-type echo-reply;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T3\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        172.16.2.1/32;\\r\\n    }\\r\\n    protocol tcp;\\r\\n}\"\n                                },\n                                {\n                                    \"name\": \"T1\",\n                                    \"then\": \"accept;\",\n                                    \"from\": \"{\\r\\n    source-address {\\r\\n        192.168.10.1/32;\\r\\n    }\\r\\n}\"\n                                }\n                            ],\n                            \"fast-lookup-filter\": [\n                                null\n                            ],\n                            \"interface-shared\": [\n                                null\n                            ]\n                        }\n                    ],\n                    \"family\": {\n                        \"inet6\": {\n                            \"filter\": [\n                                {\n                                    \"name\": \"FILTER-03\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"TX\",\n                                            \"filter\": \"FILTER-02\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"name\": \"FILTER-02\",\n                                    \"term\": [\n                                        {\n                                            \"name\": \"rule-1\",\n                                            \"then\": \"{\\r\\n    log;\\r\\n    discard;\\r\\n}\",\n                                            \"from\": \"{\\r\\n    address {\\r\\n        be::01/128;\\r\\n        be::02/128;\\r\\n    }\\r\\n    port snmp;\\r\\n}\"\n                                        },\n                                        {\n                                            \"name\": \"rule-2\",\n                                            \"then\": \"accept;\",\n                                            \"from\": \"{\\r\\n    icmp-code address-unreachable;\\r\\n}\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "IOS XR5 Interface ACL",
					"item": [
						{
							"name": "Create Acl 'INPUT-FILTER'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-acl-clinative:ipv4\": {\n        \"access-list\": [\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 5,\n                \"remark\": \"Permit management protocols - TELNET and SSH\"\n            },\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp 192.168.10.0 0.0.0.255 any eq telnet\"\n            },\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 20,\n                \"permit\": \"tcp 192.168.10.0 0.0.0.255 any eq ssh\"\n            },\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 25,\n                \"remark\": \"Permit UDP traffic from single host to another host\"\n            },\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 30,\n                \"permit\": \"udp host 192.168.10.1 host 201.24.15.1 range 1 1023\"\n            },\n            {\n                \"name\": \"INPUT-FILTER\",\n                \"sequence-number\": 40,\n                \"deny\": \"ipv4 any any log\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Acl to G0/0/0/2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access-group\": [\n        {\n            \"acl-name\": \"INPUT-FILTER\",\n            \"ingress\": [\n                null\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F2/ipv4/access-group=INPUT-FILTER",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-interfaces-clinative:interface=GigabitEthernet0%2F0%2F0%2F2",
										"ipv4",
										"access-group=INPUT-FILTER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get node config datastore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var result = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"xr5-interfaces-clinative:interface\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"MgmtEth0/0/CPU0/0\", \"GigabitEthernet0/0/0/2\",\"GigabitEthernet0/0/0/0\",\"GigabitEthernet0/0/0/1\"]",
											"        var disableincludes = [\"Loopback999\",\"Loopback1\",\"Bundle-Ether100\"]",
											"",
											"        result.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            if(disableincludes.includes(nodeResult[\"name\"])){",
											"                found = false",
											"            }",
											"        });",
											"        pm.expect(found).to.be.true;",
											"",
											"    })",
											"",
											"    pm.test(\"configuration check on GigabitEthernet0/0/0/2\", function() {",
											"        var found = false",
											"        result.forEach((nodeResult,index) => {",
											"            if(nodeResult[\"name\"] === \"GigabitEthernet0/0/0/2\"){",
											"                pm.expect(nodeResult[\"ipv4\"][\"access-group\"][0][\"acl-name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"ipv4\"][\"access-group\"][0][\"ingress\"][0]).to.be.null;",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"var resultfilter = pm.response.json()[\"frinx-uniconfig-topology:configuration\"][\"xr5-acl-clinative:ipv4\"][\"access-list\"];",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"sequence-number\"] === 5){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"remark\"]).to.eql(\"Permit management protocols - TELNET and SSH\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp 192.168.10.0 0.0.0.255 any eq telnet\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp 192.168.10.0 0.0.0.255 any eq ssh\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"sequence-number\"] === 25){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"remark\"]).to.eql(\"Permit UDP traffic from single host to another host\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"udp host 192.168.10.1 host 201.24.15.1 range 1 1023\");",
											"                found = true  ",
											"            }",
											"            else if(nodeResult[\"sequence-number\"] === 40){",
											"                pm.expect(nodeResult[\"name\"]).to.eql(\"INPUT-FILTER\");",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"ipv4 any any log\");",
											"                found = true     ",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "IOS XR5 ACL",
					"item": [
						{
							"name": "Setup device config",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Output check\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"Invalid input detected at '^' marker\");",
											"        pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"commit\");",
											"        pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"end\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"command\": \"conf t\nipv6 access-list ACL6-01\n 10 remark \\\"This is just a test\\\"\n 20 permit tcp fe10::10/64 eq 1451 any syn\n 30 deny ospf fe20::20/64 host fe10::101\n 40 permit ipv6 any any\n!\nipv4 access-list log-update rate 10\nipv4 access-list ACL01\n 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\n 20 permit ospf any any\n 30 permit eigrp any any\n 40 deny ipv4 host 1.1.1.1 any log\n!\nipv4 access-list ACL02\n 10 deny esp 10.0.0.0/8 any icmp-off\n 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\n 30 permit ipv4 any any\n!\ncommit\nend\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology=cli/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology=cli",
										"node={{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": [
								{
									"name": "SETUP DEVICE CONFIG",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"command\": \"conf t\nipv6 access-list ACL6-01\n 10 remark \\\"This is just a test\\\"\n 20 permit tcp fe10::10/64 eq 1451 any syn\n 30 deny ospf fe20::20/64 host fe10::101\n 40 permit ipv6 any any\n!\nipv4 access-list log-update rate 10\nipv4 access-list ACL01\n 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\n 20 permit ospf any any\n 30 permit eigrp any any\n 40 deny ipv4 host 1.1.1.1 any log\n!\nipv4 access-list ACL02\n 10 deny esp 10.0.0.0/8 any icmp-off\n 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\n 30 permit ipv4 any any\n!\ncommit\nend\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/operations/network-topology:network-topology/topology=cli/node=iosxr/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"operations",
												"network-topology:network-topology",
												"topology=cli",
												"node=iosxr",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"output\": \"conf t\\r\\n\\rWed Apr 22 09:08:28.914 UTC\\r\\nCurrent Configuration Session  Line       User     Date                     Lock\\r\\n00000000-06d9a120-00000000     vty1       cisco    Wed Apr 22 09:00:26 2020 \\r\\nRP/0/0/CPU0:XR5(config)#ipv6 access-list ACL6-01\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#10 remark \\\"This is just a test\\\"\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#20 permit tcp fe10::10/64 eq 1451 any syn\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#30 deny ospf fe20::20/64 host fe10::101\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#40 permit ipv6 any any\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#!\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv6-acl)#ipv4 access-list log-update rate 10\\r\\n\\rRP/0/0/CPU0:XR5(config)#ipv4 access-list ACL01\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#20 permit ospf any any\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#30 permit eigrp any any\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#40 deny ipv4 host 1.1.1.1 any log\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#!\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#ipv4 access-list ACL02\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#10 deny esp 10.0.0.0/8 any icmp-off\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#30 permit ipv4 any any\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#!\\r\\n\\rRP/0/0/CPU0:XR5(config-ipv4-acl)#commit\\r\\n\\rWed Apr 22 09:08:36.814 UTC\\r\\nRP/0/0/CPU0:XR5(config-ipv4-acl)#end\\r\\n\\r\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IPV4 uniconfig node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:ipv4\"][\"access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL02\", \"ACL01\"]",
											"        var sequence = [10,20,30,40]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"        });",
											"    })",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ipv4 any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"eigrp any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"icmp 172.16.1.0/24 172.16.2.0/24 echo\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ospf any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 40){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"ipv4 host 1.1.1.1 any log\");",
											"                found = true  ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"esp 10.0.0.0/8 any icmp-off\");",
											"                found = true     ",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET UNICONFIG NODE",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:09:25"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"iosxr\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"xr5-acl-clinative:ipv4\": {\n                    \"access-list\": [\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"ipv4 any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"eigrp any any\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 20,\n                            \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 20,\n                            \"permit\": \"ospf any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 40,\n                            \"deny\": \"ipv4 host 1.1.1.1 any log\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 10,\n                            \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 10,\n                            \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\"\n                        }\n                    ]\n                },\n                \"xr5-acl-clinative:ipv6\": {\n                    \"access-list\": [\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 40,\n                            \"permit\": \"ipv6 any any\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 10,\n                            \"remark\": \"This is just a test\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 20,\n                            \"permit\": \"tcp fe10::10/64 eq 1451 any syn\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 30,\n                            \"deny\": \"ospf fe20::20/64 host fe10::101\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get IPV4  from cli MountPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"ipv4\"][\"access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL02\", \"ACL01\"]",
											"        var sequence = [10,20,30,40]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"        });",
											"    })",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ipv4 any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"eigrp any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"icmp 172.16.1.0/24 172.16.2.0/24 echo\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ospf any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 40){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"ipv4 host 1.1.1.1 any log\");",
											"                found = true  ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"esp 10.0.0.0/8 any icmp-off\");",
											"                found = true     ",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=cli/node={{node_id}}/yang-ext:mount/xr5-acl-clinative:ipv4?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=cli",
										"node={{node_id}}",
										"yang-ext:mount",
										"xr5-acl-clinative:ipv4"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET IPV4 CONFIG FROM CLI MOUNTPOINT",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=cli/node=iosxr/yang-ext:mount/xr5-acl-clinative:ipv4?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=cli",
												"node=iosxr",
												"yang-ext:mount",
												"xr5-acl-clinative:ipv4"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-10ipv4\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:09:37"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"ipv4\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 30,\n                \"permit\": \"ipv4 any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 30,\n                \"permit\": \"eigrp any any\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 20,\n                \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 40,\n                \"deny\": \"ipv4 host 1.1.1.1 any log\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 10,\n                \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Get IPV6  from cli MountPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:ipv6\"][\"access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL6-01\"]",
											"        var sequence = [10,20,30,40]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"        });",
											"    })",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"name\"] === \"ACL6-01\" && nodeResult[\"sequence-number\"] === 40){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ipv6 any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL6-01\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"remark\"]).to.eql(\"This is just a test\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL6-01\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp fe10::10/64 eq 1451 any syn\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL6-01\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"ospf fe20::20/64 host fe10::101\");",
											"                found = true",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv6"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET UNICONFIG NODE",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:09:25"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"iosxr\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"xr5-acl-clinative:ipv4\": {\n                    \"access-list\": [\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"ipv4 any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"eigrp any any\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 20,\n                            \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 20,\n                            \"permit\": \"ospf any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 40,\n                            \"deny\": \"ipv4 host 1.1.1.1 any log\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 10,\n                            \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 10,\n                            \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\"\n                        }\n                    ]\n                },\n                \"xr5-acl-clinative:ipv6\": {\n                    \"access-list\": [\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 40,\n                            \"permit\": \"ipv6 any any\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 10,\n                            \"remark\": \"This is just a test\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 20,\n                            \"permit\": \"tcp fe10::10/64 eq 1451 any syn\"\n                        },\n                        {\n                            \"name\": \"ACL6-01\",\n                            \"sequence-number\": 30,\n                            \"deny\": \"ospf fe20::20/64 host fe10::101\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Delete IPV6 Acls",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv6"
									]
								}
							},
							"response": [
								{
									"name": "DELETE IPV6 ACLS",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv6"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no ipv6 access-list ACL6-01 40 permit ipv6 any any\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no ipv6 access-list ACL6-01 40\")",
											"            pm.expect(nodeResult[\"configuration\"]).to.contain(\"no ipv6 access-list ACL6-01 10 remark\")",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful calculate diff request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": [
								{
									"name": "CALCULATE DIFF",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"deleted-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03\",\n                            \"data\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-03\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"TX\\\",\\n          \\\"filter\\\": \\\"FILTER-02\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"status\": \"complete\",\n                    \"created-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4\",\n                            \"data\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"T4\\\",\\n      \\\"then\\\": \\\"discard;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"updated-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2\",\n                            \"data-actual\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code address-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code network-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        },\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01\",\n                            \"data-actual\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ],\\n      \\\"interface-shared\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T4\\\",\\n          \\\"then\\\": \\\"discard;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get Uniconfig node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful calculate diff request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv6"
									]
								}
							},
							"response": [
								{
									"name": "GET UNICONFIG NODE",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2013-10-21node\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:11:28"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"node\": [\n        {\n            \"node-id\": \"iosxr\",\n            \"frinx-uniconfig-topology:configuration\": {\n                \"xr5-acl-clinative:ipv4\": {\n                    \"access-list\": [\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"ipv4 any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 30,\n                            \"permit\": \"eigrp any any\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 20,\n                            \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 20,\n                            \"permit\": \"ospf any any\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 40,\n                            \"deny\": \"ipv4 host 1.1.1.1 any log\"\n                        },\n                        {\n                            \"name\": \"ACL02\",\n                            \"sequence-number\": 10,\n                            \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n                        },\n                        {\n                            \"name\": \"ACL01\",\n                            \"sequence-number\": 10,\n                            \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Put new ACL rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL01\",\n            \"sequence-number\": 50,\n            \"remark\": \"test description\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,50",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4",
										"access-list=ACL01,50"
									]
								}
							},
							"response": [
								{
									"name": "PUT NEW ACL RULE",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL01\",\n            \"sequence-number\": 50,\n            \"remark\": \"test description\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,50",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv4",
												"access-list=ACL01,50"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created ACL rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL01\"]",
											"        var sequence = [50]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"            pm.expect(nodeResult[\"remark\"]).to.eql(\"test description\");",
											"        });",
											"    })",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,50?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4",
										"access-list=ACL01,50"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET CREATED ACL RULE",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,50?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv4",
												"access-list=ACL01,50"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-10access-list\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:13:22"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL01\",\n            \"sequence-number\": 50,\n            \"remark\": \"test description\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Put multiple IPV6 Acl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-acl-clinative:ipv6\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp fe10::10/64 eq 1451 any syn\"\n            },\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf fe20::20/64 host fe10::101\"\n            },\n            {\n                \"name\": \"ACL6-X2\",\n                \"sequence-number\": 10,\n                \"permit\": \"udp ce50::15/64 any eq 123\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv6"
									]
								}
							},
							"response": [
								{
									"name": "PUT MULTIPLE IPV6 ACLS",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xr5-acl-clinative:ipv6\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp fe10::10/64 eq 1451 any syn\"\n            },\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf fe20::20/64 host fe10::101\"\n            },\n            {\n                \"name\": \"ACL6-X2\",\n                \"sequence-number\": 10,\n                \"permit\": \"udp ce50::15/64 any eq 123\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv6"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Length",
											"value": "0"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful calculate diff request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": [
								{
									"name": "CALCULATE DIFF",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"deleted-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03\",\n                            \"data\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-03\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"TX\\\",\\n          \\\"filter\\\": \\\"FILTER-02\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"status\": \"complete\",\n                    \"created-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4\",\n                            \"data\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"T4\\\",\\n      \\\"then\\\": \\\"discard;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"updated-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2\",\n                            \"data-actual\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code address-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code network-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        },\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01\",\n                            \"data-actual\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ],\\n      \\\"interface-shared\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T4\\\",\\n          \\\"then\\\": \\\"discard;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get IPV6 Acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:ipv6\"][\"access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL6-X1\",\"ACL6-X2\"]",
											"        var sequence = [10,20]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"        });",
											"    })",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"name\"] === \"ACL6-X1\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp fe10::10/64 eq 1451 any syn\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL6-X1\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ospf fe20::20/64 host fe10::101\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL6-X2\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"udp ce50::15/64 any eq 123\");",
											"                found = true     ",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv6"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET IPV6 ACLS",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv6?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv6"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-10ipv6\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-22 09:15:05"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"xr5-acl-clinative:ipv6\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp fe10::10/64 eq 1451 any syn\"\n            },\n            {\n                \"name\": \"ACL6-X1\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf fe20::20/64 host fe10::101\"\n            },\n            {\n                \"name\": \"ACL6-X2\",\n                \"sequence-number\": 10,\n                \"permit\": \"udp ce50::15/64 any eq ntp\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Update Acl rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL01\",\n            \"sequence-number\": 10,\n            \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,10",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4",
										"access-list=ACL01,10"
									]
								}
							},
							"response": [
								{
									"name": "UPDATE ACL RULE",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL01\",\n            \"sequence-number\": 10,\n            \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL01,10",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv4",
												"access-list=ACL01,10"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful calculate diff request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"pm.test(\"Commited node status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"      for(var i = 0; i < result.length; i++){",
											"         if( result[i][\"node-id\"] = postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"",
											"         }",
											"      }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": [
								{
									"name": "CALCULATE DIFF",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"junos\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"junos\",\n                    \"deleted-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-03\",\n                            \"data\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-03\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"TX\\\",\\n          \\\"filter\\\": \\\"FILTER-02\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"status\": \"complete\",\n                    \"created-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01/term=T4\",\n                            \"data\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"T4\\\",\\n      \\\"then\\\": \\\"discard;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        }\n                    ],\n                    \"updated-data\": [\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/family/inet6/filter=FILTER-02/term=rule-2\",\n                            \"data-actual\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code address-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"term\\\": [\\n    {\\n      \\\"name\\\": \\\"rule-2\\\",\\n      \\\"then\\\": \\\"accept;\\\",\\n      \\\"from\\\": \\\"{\\\\r\\\\n    icmp-code network-unreachable;\\\\r\\\\n}\\\"\\n    }\\n  ]\\n}\"\n                        },\n                        {\n                            \"path\": \"network-topology:network-topology/topology=uniconfig/node=junos/frinx-uniconfig-topology:configuration/junos17-firewall-clinative:firewall/filter=FILTER-01\",\n                            \"data-actual\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ],\\n      \\\"interface-shared\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\",\n                            \"data-intended\": \"{\\n  \\\"filter\\\": [\\n    {\\n      \\\"name\\\": \\\"FILTER-01\\\",\\n      \\\"term\\\": [\\n        {\\n          \\\"name\\\": \\\"T4\\\",\\n          \\\"then\\\": \\\"discard;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    destination-address {\\\\r\\\\n        1.2.3.0/24;\\\\r\\\\n    }\\\\r\\\\n    protocol udp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T2\\\",\\n          \\\"then\\\": \\\"{\\\\r\\\\n    discard;\\\\r\\\\n}\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    icmp-type echo-reply;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T3\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        172.16.2.1/32;\\\\r\\\\n    }\\\\r\\\\n    protocol tcp;\\\\r\\\\n}\\\"\\n        },\\n        {\\n          \\\"name\\\": \\\"T1\\\",\\n          \\\"then\\\": \\\"accept;\\\",\\n          \\\"from\\\": \\\"{\\\\r\\\\n    source-address {\\\\r\\\\n        192.168.10.1/32;\\\\r\\\\n    }\\\\r\\\\n}\\\"\\n        }\\n      ],\\n      \\\"fast-lookup-filter\\\": [\\n        null\\n      ]\\n    }\\n  ]\\n}\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get IPV4 Acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:ipv4\"][\"access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL02\", \"ACL01\"]",
											"        var sequence = [10,20,30,40,50]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"        });",
											"    })",
											"pm.test(\"check filters\", function() {",
											"        var found",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            found = false",
											"            if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ipv4 any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 30){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"eigrp any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"icmp 172.16.1.0/24 172.16.2.0/24 echo\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 20){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"ospf any any\");",
											"                found = true",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 40){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"ipv4 host 1.1.1.1 any log\");",
											"                found = true  ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"permit\"]).to.eql(\"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL02\" && nodeResult[\"sequence-number\"] === 10){",
											"                pm.expect(nodeResult[\"deny\"]).to.eql(\"esp 10.0.0.0/8 any icmp-off\");",
											"                found = true     ",
											"            }",
											"            else if(nodeResult[\"name\"] === \"ACL01\" && nodeResult[\"sequence-number\"] === 50){",
											"                pm.expect(nodeResult[\"remark\"]).to.eql(\"test description\");",
											"                found = true     ",
											"            }",
											"        });",
											"            pm.expect(found).to.be.true;",
											"    })",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET IPV4 ACLS",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv4"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-10ipv4\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-23 11:41:43"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"xr5-acl-clinative:ipv4\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 30,\n                \"permit\": \"ipv4 any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 30,\n                \"permit\": \"eigrp any any\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 20,\n                \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 50,\n                \"remark\": \"test description\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 40,\n                \"deny\": \"ipv4 host 1.1.1.1 any log\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 10,\n                \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255\"\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Update IPV4 Acl entry to invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xr5-acl-clinative:access-list\": [\n        {\n            \"name\": \"ACL02\",\n            \"sequence-number\": 30,\n            \"permit\": \"ipv7 any any\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL02,30",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4",
										"access-list=ACL02,30"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"configuration-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": [
								{
									"name": "DRY-RUN-COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration\": \"2020-04-22T11:12:00.449: configure terminal\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.453: no ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 30 permit ipv4 any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 30 permit eigrp any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 20 deny icmp 172.16.1.0/24 172.16.2.0/24 echo\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 20 permit ospf any any\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 50 remark \\\"test description\\\"\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 40 deny ipv4 host 1.1.1.1 any log\\n2020-04-22T11:12:00.456: ipv4 access-list ACL02 10 deny esp 10.0.0.0/8 any icmp-off\\n2020-04-22T11:12:00.456: ipv4 access-list ACL01 10 permit tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255 range 1 1024\\n2020-04-22T11:12:00.456: commit\\n2020-04-22T11:12:00.456: end\\n\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"error-type\"]).to.eql(\"processing-error\")",
											"            pm.expect(nodeResult[\"error-message\"]).to.contain(\"Invalid input detected at '^' marker.\")",
											"            pm.expect(nodeResult[\"rollback-status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": [
								{
									"name": "COMMIT",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"iosxr\"\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://127.0.0.1:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/yang.operation+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"output\": {\n        \"node-results\": {\n            \"node-result\": [\n                {\n                    \"node-id\": \"iosxr\",\n                    \"configuration-status\": \"complete\"\n                }\n            ]\n        },\n        \"overall-status\": \"complete\"\n    }\n}"
								}
							]
						},
						{
							"name": "Sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(nodeResult[\"status\"]).to.eql(\"complete\")",
											"        });",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"{{node_id}}\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IPV4 Acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"var resultfilter = pm.response.json()[\"xr5-acl-clinative:access-list\"];",
											"pm.test(\"configuration check\", function() {",
											"        var found = true",
											"        var includes = [\"ACL02\"]",
											"        var sequence = [30]",
											"",
											"        resultfilter.forEach((nodeResult,index) => {",
											"            pm.expect(nodeResult[\"name\"]).to.be.oneOf(includes);",
											"            pm.expect(nodeResult[\"sequence-number\"]).to.be.oneOf(sequence);",
											"            pm.expect(nodeResult[\"permit\"]).to.eql(\"ipv4 any any\");",
											"            pm.expect(nodeResult[\"permit\"]).to.not.eql(\"ipv7 any any\");",
											"",
											"        });",
											"    })",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4/access-list=ACL02,30?content=config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node={{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"xr5-acl-clinative:ipv4",
										"access-list=ACL02,30"
									],
									"query": [
										{
											"key": "content",
											"value": "config"
										}
									]
								}
							},
							"response": [
								{
									"name": "GET IPV4 ACLS",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=iosxr/frinx-uniconfig-topology:configuration/xr5-acl-clinative:ipv4?content=config",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8181",
											"path": [
												"rests",
												"data",
												"network-topology:network-topology",
												"topology=uniconfig",
												"node=iosxr",
												"frinx-uniconfig-topology:configuration",
												"xr5-acl-clinative:ipv4"
											],
											"query": [
												{
													"key": "content",
													"value": "config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "ETag",
											"value": "\"2020-03-10ipv4\""
										},
										{
											"key": "Last-Modified",
											"value": "2020-Apr-23 11:41:43"
										},
										{
											"key": "Content-Type",
											"value": "application/yang-data+json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"xr5-acl-clinative:ipv4\": {\n        \"access-list\": [\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 30,\n                \"permit\": \"ipv4 any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 30,\n                \"permit\": \"eigrp any any\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 20,\n                \"deny\": \"icmp 172.16.1.0/24 172.16.2.0/24 echo\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 20,\n                \"permit\": \"ospf any any\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 50,\n                \"remark\": \"test description\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 40,\n                \"deny\": \"ipv4 host 1.1.1.1 any log\"\n            },\n            {\n                \"name\": \"ACL02\",\n                \"sequence-number\": 10,\n                \"deny\": \"esp 10.0.0.0/8 any icmp-off\"\n            },\n            {\n                \"name\": \"ACL01\",\n                \"sequence-number\": 10,\n                \"permit\": \"tcp 192.168.10.0 0.0.0.255 192.168.20.0 0.0.0.255\"\n            }\n        ]\n    }\n}"
								}
							]
						}
					]
				}
			]
		}
	]
}