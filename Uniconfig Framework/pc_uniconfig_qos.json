{
	"info": {
		"_postman_id": "46484ee6-d5be-4b2e-bc80-caa4f5e27cac",
		"name": "pc_uniconfig_qos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "d9e079bb-b76b-4bb3-a92f-818424f6b1fa",
			"name": "XR5 QOS CRUD",
			"item": [
				{
					"_postman_id": "1e9cad3e-4ea5-43a3-b252-eec365a46317",
					"name": "XR5 QOS CRUD READERS",
					"item": [
						{
							"_postman_id": "211a64a8-c40a-4051-9425-43e213dee75a",
							"name": "configure class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n class-map match-all {{qos_class_name3}}\n match qos-group {{qos_group}}\n match mpls experimental topmost {{qos_mpls_topmost_min}}\n match precedence {{qos_precedence5}}\n match access-group ipv4 {{qos_class_name3}}\n end-class-map\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "5ab0e749-76da-4495-9262-7651225c086a",
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "735f4d43-9dbc-40da-8bbe-4a22170b6cc8",
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "bc55ef08-a80f-4d60-b201-8700a730c202",
							"name": "show class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87e869fa-702f-4eb5-bbea-8af0604c0d1c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = \" + pm.environment.get(\"qos_precedence5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_min\")));",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name3\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a7f5f0c5-e53e-4cbe-a103-ed9e2ca3f371",
							"name": "delete class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no class-map match-all {{qos_class_name3}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "658cfa3f-9347-4edf-b1b6-faa81f63f771",
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "85e3a9ae-06b3-49f7-8428-d62e8052705e",
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "34a1e565-e3d5-4429-a38b-8e3a7f358454",
							"name": "show deleted class-map match-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "c0e5b1c9-2441-420a-b641-334c38d3eae1",
							"name": "configure class-map match-any and policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any {{qos_class_name5}}\n match mpls experimental topmost {{qos_mpls_topmost_min}} \n match precedence {{qos_precedence0}} \n end-class-map\npolicy-map {{qos_policy_name3}}\n class {{qos_class_name5}}\n  set qos-group {{qos_set_group}}\n  set mpls experimental topmost {{qos_set_mpls_topmost_upd}}\n  set precedence {{qos_precedence0}}\n  priority level {{qos_weight_priority}} \n exit\n class class-default\n  set qos-group {{qos_set_group}}\n  set mpls experimental topmost {{qos_set_mpls_topmost_upd}}\n  set precedence {{qos_precedence0}}\n  police rate percent 1 \n  exit \n  queue-limit {{qos_queue_limit_ms}} ms \n  bandwidth remaining percent {{bandwidth_percent_remaining}} \n exit \n end-policy-map \n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "3538d7b0-0f87-43d1-9fe1-3442b2806025",
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "891f0d59-84c3-4050-868c-a421807f4322",
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "68f74a29-9930-4a06-8e90-03039bbb45b6",
							"name": "show class-map match-any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "037018ba-93ff-4f00-9425-71bcd3b7f3fc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_min\")));",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate precedence = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate  precedense2= \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate precedence3 = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2= \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name5}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "566e52a2-82ef-4977-b61f-41ff2e644a0c",
							"name": "show default class",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1acaf823-b7be-4316-b855-e96d6d3c9736",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =all \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
											"});",
											"//",
											"pm.test(\"Validate  = \" + pm.environment.get(\"qos_precedence0\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name_default\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name_default\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name_default\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name_default\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_policy_name_default}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_policy_name_default}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e257f2f8-a8d9-4935-81d5-1301e8757d7b",
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence2 =2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//frinx-qos-extension:max-queue-depth-ms",
											"pm.test(\"Validate frinx-qos-extension:max-queue-depth-ms = \" + pm.environment.get(\"qos_queue_limit_ms\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms\")));",
											"});",
											"//cir-pct-remaining",
											"pm.test(\"Validate cir-pct-remaining = \" + pm.environment.get(\"bandwidth_percent_remaining\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining\")));",
											"});",
											"//max-queue-depth-percent",
											"pm.test(\"Validate max-queue-depth-percent = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence2 = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//id",
											"pm.test(\"Validate config id = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//weight",
											"pm.test(\"Validate weight = \" + pm.environment.get(\"qos_weight_priority\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority\")));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"qos_class_name5\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name5\"));",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence1 =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence1 =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name3\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"scheduler-policies",
										"scheduler-policy",
										"{{qos_policy_name3}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "166fce22-a512-4c4a-8599-d51ffb5a7b1d",
							"name": "delete class-map match-any and policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no policy-map {{qos_policy_name3}}\n no class-map match-any {{qos_class_name5}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "a282225d-14da-4317-8473-b0b120ef5313",
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "27e8aa41-9385-4550-83d5-32b91b6492de",
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "7ffd8f8e-da13-46a2-afbc-4d9c1cf119d4",
							"name": "show deleted class-map match-any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_class_name5}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "df3fc230-3581-4e80-9eed-1e0d84857e44",
							"name": "show deleted default class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_policy_name3}}-default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"classifiers",
										"classifier",
										"{{qos_policy_name3}}-default"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "feb300c5-f543-4cbc-adc6-b88bc037870f",
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name3}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-qos:qos",
										"scheduler-policies",
										"scheduler-policy",
										"{{qos_policy_name3}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "97dd028e-0646-4c87-b464-e5211a794c7a",
			"name": "Tests",
			"item": [
				{
					"_postman_id": "2f3464fd-94a6-4b22-8a96-d11654c682a8",
					"name": "QOS CRUD",
					"item": [
						{
							"_postman_id": "462afe74-351f-4196-af19-f4553d174b73",
							"name": "QOS CRUD sync-set",
							"item": [
								{
									"_postman_id": "4f737589-c020-48d1-ac72-1e51117ccbbe",
									"name": "create policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n    \"ios-cli:command\" : \"conf t\n    class-map match-any {{qos_class_name5}}\n    match mpls experimental topmost {{qos_mpls_topmost_min}} \n    match precedence {{qos_precedence0}} \n    end-class-map \n    policy-map {{qos_policy_name1}}\n    class {{qos_class_name5}}\n    set qos-group {{qos_group}}\n    set mpls experimental topmost {{qos_mpls_topmost_min}}\n    set precedence routine\n    police rate percent 1\n    queue-limit 5 ms\n    bandwidth remaining percent 1\n    end-policy-map\n    commit\n    end\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "7041493d-f765-4234-a185-16217f905f9a",
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "398e5c23-d65c-461d-9983-7cd6ceccc45a",
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "0361d129-04ce-4a98-8ccc-73e02a3c0699",
									"name": "delete policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no policy-map {{qos_policy_name1}}\n     commit\n     end\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "bdc989b1-6bd5-4813-b573-2f608e917c5d",
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88921231-6c66-4c0a-9477-ea1fc44a03dd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "7397471f-ac7c-489b-a65c-8f8100c45b07",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a822036-53b0-45bb-b3b2-6ad91bb9931f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6bcdc41-4ae0-40be-8e26-f57a7eccbef6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 15 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 15000);"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "51960ce2-7f05-4a1c-8a07-7b5509e92daf",
									"name": "show updated policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bcb0c2b-2283-4431-8210-4c0f73b3203c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
													"});",
													"//terms id",
													"pm.test(\"Validate terms id = 1\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
													"});",
													"//terms actions mpls",
													"pm.test(\"Validate terms actions mpls = 0\", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
													"});",
													"//terms actions precedens",
													"pm.test(\"Validate terms actions precedens = routine\", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
													"});",
													"//terms actions qos-group",
													"pm.test(\"Validate terms actions qos-group = 10\", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([10]);",
													"});",
													"//terms actions config target-group",
													"pm.test(\"Validate terms actions target-group = plmap1\", function() {",
													"    pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"plmap1\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name5}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "2517e4ef-78a2-4554-be49-ebfdc5514538",
									"name": "show updated policy-map unified",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e79e6a9-7be6-4aab-9d05-926a0a99e547",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
													"});",
													"//terms id",
													"pm.test(\"Validate terms id = 1\", function() {",
													"  pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
													"});",
													"//terms actions mpls",
													"pm.test(\"Validate terms actions mpls = 0\", function() {",
													"    pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
													"});",
													"//terms actions precedens",
													"pm.test(\"Validate terms actions precedens = critical\", function() {",
													"    pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
													"});",
													"//terms actions qos-group",
													"pm.test(\"Validate terms actions qos-group = critical\", function() {",
													"    pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([10]);",
													"});",
													"//terms actions config target-group",
													"pm.test(\"Validate terms actions config target-group = critical\", function() {",
													"    pm.expect(pm.response.json()[\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"plmap1\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"unified",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name5}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "6227b318-bd3a-4730-b7c0-dbfc974dfbcb",
									"name": "update policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map {{qos_policy_name1}}\nclass {{qos_class_name5}}\nqueue-limit 1 ms\ncommit\nend\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "733a3d4a-d5f6-4bc3-8c6e-ee2ae278c87d",
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bce73e3-821b-4da4-b531-44e6ae8fd068",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "62be20e8-178c-4609-a3bc-7b1ba2e95224",
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c123b59a-2298-4cfd-86ae-5af7ba934f4b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "0a07351f-a9ce-4209-9f44-b492d2004356",
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "732a2be4-b819-4e4c-8441-f1237308d402",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "bf09e46f-c830-4b67-b098-237ea6824dd6",
									"name": "show updated policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"plmap1\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"plmap1\");",
													"});",
													"pm.test(\"Validate shedulers max-queue-depth-ms = 5\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(5);",
													"});",
													"pm.test(\"Validate shedulers max-queue-depth-percent = 1\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
													"});",
													"pm.test(\"Validate terms actions mpls = 0\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "bcdcff15-5284-4e6c-bb26-3c3c17915f77",
									"name": "show updated policy-map unified",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"name\"]).to.eql(\"plmap1\");",
													"});",
													"//name config",
													"pm.test(\"Validate config name = Tos0\", function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"plmap1\");",
													"});",
													"pm.test(\"Validate shedulers max-queue-depth-ms = 5\", function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(5);",
													"});",
													"pm.test(\"Validate shedulers max-queue-depth-percent = 1\", function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
													"});",
													"pm.test(\"Validate terms actions mpls = 0\", function() {",
													"  pm.expect(pm.response.json()[\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"unified",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "fbd32b5c-3293-496b-9ca4-c622ec2ebee0",
									"name": "delete policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "b6ad46e7-8d61-45ce-a232-98f3e33a025b",
									"name": "delete class match-any",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name5}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name5}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "9d36488d-4e9b-48a8-bc59-f22219e618ca",
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "5c79c6a4-f34a-43c2-a499-262205bd33e6",
									"name": "show deleted policy-map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"_postman_id": "b19f53f4-3db1-4094-947d-ea61b687a1b0",
							"name": "QOS CRUD basic",
							"item": [
								{
									"_postman_id": "91d57f83-67e8-45bc-a624-3e7d9f747285",
									"name": "configure class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"3\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"3\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group2}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    },\n                    {\n                        \"id\": \"5\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group}}]\n                        },\n                        \"config\": {\n                            \"id\": \"5\"\n                        }\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"4\"\n                        }\n                    },\n                    {\n                        \"id\": \"6\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence2}}\",\n                                \"{{qos_precedence7}}\",\n                                \"{{qos_precedence1}}\"\n                            ]\n                        },\n                        \"config\": {\n                            \"id\": \"6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "74752c7a-1b13-43e5-b9ce-69bed9f6b7d4",
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a61df41-4d08-41a5-97e5-e5abad5323a8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains class-map match-any map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class-map match-any map1\");",
													"    });",
													"    pm.test('dryrun - contains match access-group ipv4 inacl1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match access-group ipv4 inacl1\");",
													"    });",
													"    pm.test('dryrun - contains match access-group ipv6 outacl3 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match access-group ipv6 outacl3\");",
													"    });",
													"    pm.test('dryrun - contains match precedence ipv4 1 5', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence ipv4 priority critical\");",
													"    });",
													"    pm.test('dryrun - contains match precedence ipv6 1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence ipv6 priority\");",
													"    });",
													"    pm.test('dryrun - contains match qos-group 10', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match qos-group 10\");",
													"    });",
													"    pm.test('dryrun - contains match precedence 2 7 1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence immediate network priority\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "354b5597-5280-4fc3-84d9-cc50aa81be6b",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66edf6fb-d61c-4528-96f7-742bdeed8309",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "462df6ac-8af6-42ac-8731-d22633fe9fb9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 10000);"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "102a1a39-62c1-4636-afee-120d5e68bd55",
									"name": "show configured class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "819a5f21-d3e0-478f-9d9b-c499c1ca9b0e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"]",
													"var arraysize=list.length;",
													"var items=[];",
													"for(i = 0; i < arraysize; i++){",
													"   items[i]=list[i][\"id\"];",
													"}",
													"pm.test(\"Validate config id = 1 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 1){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('1');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('1');",
													"",
													"});",
													"pm.test(\"Validate config id = 2 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 2){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('2');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group2\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('2');",
													"",
													"});",
													"pm.test(\"Validate config id = 3 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 3){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('3');        ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));   ",
													"        pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));        ",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('3');",
													"",
													"});",
													"pm.test(\"Validate config id = 4 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 4){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('4');       ",
													"        pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('4');",
													"",
													"});",
													"pm.test(\"Validate config id = 5 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 5){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('5');       ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10])",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('5');",
													"",
													"});",
													"pm.test(\"Validate config id = 6 \", function() {",
													"for(i = 0; i < arraysize; i++ ){",
													"    if(items[i] == 6){",
													"        pm.expect(list[i][\"config\"][\"id\"]).to.eql('6');  ",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));   ",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));",
													"        pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"        break;",
													"    }",
													"} ",
													"    pm.expect(items).to.be.an('array').that.includes('6');",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "e4858a2a-a513-44f8-9f4d-f41c536c48af",
									"name": "update class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group_upd}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"3\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\",\n                                        \"{{qos_precedence2}}\",\n                                        \"{{qos_precedence6}}\",\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence0}}\"\n                                      \n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"3\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group2_upd}}\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    },\n                    {\n                        \"id\": \"5\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group2}}]\n                        },\n                        \"config\": {\n                            \"id\": \"5\"\n                        }\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence1}}\",\n                                        \"{{qos_precedence5}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\",\n                                        \"{{qos_precedence2}}\",\n                                        \"{{qos_precedence6}}\",\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence0}}\"\n                                    ]\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"4\"\n                        }\n                    },\n                    {\n                        \"id\": \"6\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence5}}\",\n                                \"{{qos_precedence3}}\",\n                                \"{{qos_precedence4}}\",\n                                \"{{qos_precedence6}}\",\n                                \"{{qos_precedence0}}\"\n                            ]\n                        },\n                        \"config\": {\n                            \"id\": \"6\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "28d5e20e-9883-4f97-9727-e9d9e6987635",
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f7f8fe0-35ec-4e02-9e41-aaf280e7bffc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no class-map map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map1\");",
													"    });",
													"    pm.test('dryrun - contains class-map match-any map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class-map match-any map1\");",
													"    });",
													"    pm.test('dryrun - contains match access-group ipv6 inacl2 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"access-group ipv6 inacl2\");",
													"    });",
													"    pm.test('dryrun - contains match access-group ipv4 outacl4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"access-group ipv4 outacl4\");",
													"    });",
													"    ",
													"    ",
													"    pm.test('dryrun - contains match precedence ipv6 5 2 7 0 1 3 6 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"precedence ipv6 priority critical flash flash-override immediate internet network routine\");",
													"    });",
													"    pm.test('dryrun - contains match precedence ipv4 5 2 7 0 1 3 6 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"precedence ipv4 priority critical flash flash-override immediate internet network routine\");",
													"    });",
													"    pm.test('dryrun - contains match qos-group 66', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"qos-group 66\");",
													"    });",
													"        pm.test('dryrun - contains match precedence 0 5 3 6 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"precedence critical flash flash-override internet routine\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fbba52be-787a-4c06-bd1b-4ed8eb26f9aa",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 10000);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "4a999000-ebf7-4bd7-9137-712e3bc9e255",
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "6dc27c53-e01a-40f7-84a2-4d4263f00e71",
									"name": "show updated class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be22b5d8-1feb-478c-8b87-bdcddece4438",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"];",
													"var items = [];",
													"var item = [];",
													"",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"id\"];",
													"    item[i] = list[i][\"id\"];",
													"",
													"}",
													"pm.test(\"Validate order and no duplicates \", function() {",
													"    ",
													"for(var i = 0; i < list.length; i++){",
													"         pm.expect(items[i]).to.eql(item[i]);",
													"}",
													"    pm.expect(items).to.have.members(item);",
													"    pm.expect(items).to.have.lengthOf.at.most(item.length);",
													"    pm.expect(item).to.have.lengthOf.at.most(items.length);",
													"",
													"});",
													"//id 1",
													"pm.test(\"Validate config id 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql('1');",
													"             pm.expect(list[i][\"config\"][\"id\"]).to.eql('1');",
													"             pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group_upd\"));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes('1');",
													"});",
													"",
													"",
													"pm.test(\"Validate config id = 2\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"2\") {",
													"      pm.expect(items[i]).to.eql(\"2\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"2\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group2_upd\"));        ",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('2');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 3\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == 3) {",
													"      pm.expect(items[i]).to.eql(\"3\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"3\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"    }",
													"    ",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('3');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 4\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"4\") {",
													"      pm.expect(items[i]).to.eql(\"4\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"4\");        ",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence1\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence2\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));",
													"      pm.expect(list[i][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence7\"));",
													"",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('4');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 5\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"5\") {",
													"      pm.expect(items[i]).to.eql(\"5\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"5\");        ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([66])",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('5');",
													"",
													"});",
													"",
													"pm.test(\"Validate config id = 6\", function() {",
													"  for (var i = 0; i < list.length; i++) {",
													"    if (items[i] == \"6\") {",
													"      pm.expect(items[i]).to.eql(\"6\");        ",
													"      pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"6\");        ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence0\"));   ",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence3\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence4\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence5\"));",
													"      pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"]).to.include(pm.environment.get(\"qos_precedence6\"));",
													"",
													"    }",
													"  }",
													"      pm.expect(items).to.be.an('array').that.includes('6');",
													"",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "1f727d7e-6e5e-491f-818d-b704e484508b",
									"name": "update class any map1 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name1}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name1}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\"\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence0}}\"\n                            ]\n                        },\n                         \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "8e283a2b-b575-4d61-a34d-8c25eea65f06",
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fc50b92-4aeb-402d-a345-2544f458255d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no class-map map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map1\");",
													"    });",
													"    pm.test('dryrun - contains class-map match-any map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class-map match-any map1\");",
													"    });",
													"    pm.test('dryrun - contains access-group ipv6 inacl12 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"access-group ipv6 inacl1\");",
													"    });",
													"    pm.test('dryrun - contains precedence 0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"precedence routine\");",
													"    });",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains no set mpls experimental topmost', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no set mpls experimental topmost\");",
													"    });",
													"    pm.test('dryrun - contains no set qos-group', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no set qos-group\");",
													"    });",
													"        pm.test('dryrun - contains set precedence 6', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set precedence internet\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8e60798-2c81-49d4-b718-2bb466aadc8e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c9550cc4-9c78-4b54-92a5-4ee798ff6f20",
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "3196d929-ec21-44fa-b5e7-12ee2a316d6c",
									"name": "show updated class any map1 removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7bea4c4-2057-43c4-ab5b-6c370da9844a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"];",
													"var items=[];",
													"console.log(list);",
													"console.log(list.length);",
													"",
													"for(var i = 0;i < list.length;i++){",
													"    items[i] = list[i][\"id\"];",
													"}",
													"//id",
													"pm.test(\"Validate config id 1 = 1\", function() {",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"];",
													"    for(var i = 0;i < list.length; i++){",
													"        if(list[i][\"id\"] == \"1\"){",
													"            pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"1\");",
													"            pm.expect(list[i][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"            pm.expect(list[i][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"            pm.expect(list[i][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"        }",
													"    }",
													"            pm.expect(items).to.be.an('array').that.includes(\"1\");",
													"});",
													"pm.test(\"Validate config id 2 = 2\", function() {",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"];",
													"    for(var i = 0;i < list.length; i++){",
													"        if(list[i][\"id\"] == \"2\"){",
													"            pm.expect(list[i][\"config\"][\"id\"]).to.eql(\"2\");",
													"            pm.expect(list[i][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence0\"));",
													"            pm.expect(list[i][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"            pm.expect(list[i][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"        }",
													"    }",
													"            pm.expect(items).to.be.an('array').that.includes(\"2\");",
													"});",
													"",
													"",
													"//config name",
													"pm.test(\"Validate config  name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "5a3d2187-af20-48d7-96e1-8f9acfd01b8e",
									"name": "configure class all map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group}}\",\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence7}}\",\n                                        \"{{qos_precedence3}}\",\n                                        \"{{qos_precedence4}}\"\n                                    ]\n                                }\n                            },\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": {{qos_mpls_topmost_max}}\n                                }\n                            },\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence1}}\",\n                                \"{{qos_precedence3}}\"\n                            ],\n                            \"frinx-qos-extension:qos-group\": [{{qos_group3}}]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence5}}\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [{{qos_set_group}}],\n                                    \"set-mpls-tc\": {{qos_set_mpls_topmost}}\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name2}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "27f6cb30-7147-418a-9211-6689754f0109",
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff5ed853-c5bd-4873-b790-74e37e33ab34",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains class-map match-all map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class-map match-all map2\");",
													"    });",
													"    pm.test('dryrun - contains match qos-group 512', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match qos-group 512\");",
													"    });",
													"    pm.test('dryrun - contains match precedence 3 1 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence priority flash\");",
													"    });",
													"    pm.test('dryrun - contains mpls experimental topmost 7', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"mpls experimental topmost 7\");",
													"    });",
													"    pm.test('dryrun - contains access-group ipv6 inacl1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"access-group ipv6 inacl1\");",
													"    });",
													"    pm.test('dryrun - contains policy-map plmap2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap2\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains set mpls experimental topmost 3', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set mpls experimental topmost 3\");",
													"    });",
													"    pm.test('dryrun - contains set qos-group 4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set qos-group 4\");",
													"    });",
													"    pm.test('dryrun - contains set precedence 5', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set precedence critical\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "2618be8d-abb5-4f91-9e73-654d572a0e58",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "f24e0924-e42e-46cd-9f79-7b65818c70e3",
									"name": "show configured class all map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "359e2b7e-b952-45b8-9efb-9b5662f23139",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//id",
													"pm.test(\"Validate config term id = all \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"];",
													"",
													"pm.test(\"Validate precedence 1 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence1\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 3 = \" + pm.environment.get(\"qos_precedence1\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"",
													"",
													"});",
													"//traffic-class",
													"pm.test(\"Validate mpls traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_max\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_max\")));",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([512]);",
													"});",
													"//",
													"var list2 = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:precedences\"]",
													"pm.test(\"Validate precedence ipv6 7 = \" + pm.environment.get(\"qos_precedence7\"), function() {",
													"  pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence7\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence ipv6 3 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"    pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"",
													"});",
													"//",
													"pm.test(\"Validate precedence ipv4 4 = \" + pm.environment.get(\"qos_precedence4\"), function() {",
													"    pm.expect(list2).to.contain(pm.environment.get(\"qos_precedence4\"));",
													"",
													"});",
													"//frinx-qos-extension:acl-ref",
													"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_access_group\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv6\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = all\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//set-mpls-tc",
													"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost\")));",
													"});",
													"//frinx-qos-extension:set-qos-group",
													"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([4]);",
													"});",
													"//",
													"pm.test(\"Validate precedence actions 5 = \" + pm.environment.get(\"qos_precedence5\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
													"});",
													"//target-group",
													"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name2\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "60ce7ddd-79c3-43b9-a231-3b527490f844",
									"name": "update class all map2 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:qos-group\": [{{qos_group3}}]\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name2}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "88b4a81d-1c1d-417a-897b-c2e5f5e02130",
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ce23019-d9c7-425c-be88-e6ad37702053",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"    pm.test('dryrun - contains no class-map map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map2\");",
													"    });",
													"    pm.test('dryrun - contains class-map match-all map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class-map match-all map2\");",
													"    });",
													"    pm.test('dryrun - contains qos-group 512', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"qos-group 512\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4babb383-2daa-4eb9-8715-776bd10d68b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "cc560da4-d71f-49cd-9d30-77026f03cd8a",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "7d45a392-7b2c-4c3a-bd78-6b5227ea2501",
									"name": "show configured class all map2 remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "586c749b-872f-48e1-aaed-ddc23cb3aecb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config id",
													"pm.test(\"Validate config id all= all\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group3\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([512]);",
													"});",
													"//id",
													"pm.test(\"Validate id all= all\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "6a6865fd-cbca-44ef-a0fb-1e2898488d0c",
									"name": "update class all second map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"classifier\": [\n        {\n            \"name\": \"{{qos_class_name2}}\",\n            \"config\": {\n                \"name\": \"{{qos_class_name2}}\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"conditions\": {\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:acl-ref\": \"{{qos_access_group_upd}}\",\n                                    \"frinx-qos-extension:precedences\": [\n                                        \"{{qos_precedence5}}\"\n                                    ]\n                                }\n                            },\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": {{qos_mpls_topmost_min}}\n                                }\n                            },\n                            \"frinx-qos-extension:precedences\": [\n                                \"{{qos_precedence7}}\",\n                                \"{{qos_precedence3}}\",\n                                \"{{qos_precedence4}}\"\n                            ],\n                            \"frinx-qos-extension:qos-group\": [{{qos_group4}}]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"{{qos_precedence6}}\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [{{qos_set_group2}}],\n                                    \"set-mpls-tc\": {{qos_set_mpls_topmost_upd}}\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"{{qos_policy_name1}}\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"all\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "81c01825-7620-4b4b-b9a6-c3b2a35b26fe",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6089d69c-88b9-4e35-ba11-f50316ecb49c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no class-map map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map2\");",
													"    });",
													"    pm.test('dryrun - contains match qos-group 5', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match qos-group 5\");",
													"    });",
													"    pm.test('dryrun - contains match precedence 7 3 4 ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence network flash flash-override\");",
													"    });",
													"    pm.test('dryrun - contains match mpls experimental topmost 0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match mpls experimental topmost 0\");",
													"    });",
													"    pm.test('dryrun - contains match access-group ipv4 inacl2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match access-group ipv4 inacl2\");",
													"    });",
													"    pm.test('dryrun - contains match precedence ipv4 5', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"match precedence ipv4 critical\");",
													"    });",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains set mpls experimental topmost 1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set mpls experimental topmost 1\");",
													"    });",
													"    pm.test('dryrun - contains set qos-group 5', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set qos-group 5\");",
													"    });",
													"    pm.test('dryrun - contains set precedence 6', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"set precedence internet\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81c4a9b6-0ff6-4124-8e99-fe7889d9c0bf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "6181661d-be39-431b-941d-20aeac78f0a4",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c1453a43-0338-4899-9d7f-b07f32d7c335",
									"name": "show configured class all second map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54c9e905-1da9-4220-8e39-5258b54ac7f7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config id",
													"pm.test(\"Validate config id = all\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
													"});",
													"//",
													"var list = pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"];",
													"pm.test(\"Validate precedence 7 = \" + pm.environment.get(\"qos_precedence7\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence7\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 3 = \" + pm.environment.get(\"qos_precedence3\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence3\"));",
													"});",
													"//",
													"pm.test(\"Validate precedence 4 = \" + pm.environment.get(\"qos_precedence4\"), function() {",
													"  pm.expect(list).to.contain(pm.environment.get(\"qos_precedence4\"));",
													"});",
													"//traffic-class",
													"pm.test(\"Validate traffic-class = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_min\")));",
													"});",
													"//",
													"pm.test(\"Validate ipv4 precedence 5  = \" + pm.environment.get(\"qos_precedence5\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence5\"));",
													"});",
													"//frinx-qos-extension:acl-ref",
													"pm.test(\"Validate frinx-qos-extension:acl-ref = \" + pm.environment.get(\"qos_access_group_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(pm.environment.get(\"qos_access_group_upd\"));",
													"});",
													"//frinx-qos-extension:qos-group",
													"pm.test(\"Validate frinx-qos-extension:qos-group = \" + pm.environment.get(\"qos_group4\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([5]);",
													"});",
													"//id",
													"pm.test(\"Validate id = all\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
													"});",
													"//set-mpls-tc",
													"pm.test(\"Validate set-mpls-tc = \" + pm.environment.get(\"qos_set_mpls_topmost_upd\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(JSON.parse(pm.environment.get(\"qos_set_mpls_topmost_upd\")));",
													"});",
													"//frinx-qos-extension:set-qos-group",
													"pm.test(\"Validate frinx-qos-extension:set-qos-group = \" + pm.environment.get(\"qos_set_group2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([5]);",
													"});",
													"//",
													"pm.test(\"Validate actions precedence 6= \" + pm.environment.get(\"qos_precedence6\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(pm.environment.get(\"qos_precedence6\"));",
													"});",
													"//target-group",
													"pm.test(\"Validate target-group = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_class_name2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "9c55d36c-30b9-4040-b6c3-2a592172f822",
									"name": "configure policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"max-queue-depth-percent\": {{qos_depth_percent}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"weight\": {{qos_weight_priority}},\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "5570f019-ee99-4dd7-a3fe-2742a0828e4c",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class class-default', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class class-default\");",
													"    });",
													"    pm.test('dryrun - contains no priority ', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no priority\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains priority level 1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"priority level 1\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth remaining', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth remaining\");",
													"    });",
													"    pm.test('dryrun - contains police rate percent 50', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"police rate percent 50\");",
													"    });",
													"    pm.test('dryrun - contains no queue-limit', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no queue-limit\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c19246b0-9ef5-48e4-b714-f601d359b4df",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "05712a96-bea3-4e63-b871-389d6b9ff498",
									"name": "show configured policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b10f9d8-a5f9-4977-a3a7-e475d2ebc2da",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"var item = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//------------------------------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority\")));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(JSON.parse(pm.environment.get(\"qos_depth_percent\")));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "c76f08a8-0144-47c9-bfcd-91993ba5301a",
									"name": "update policy plmap1 depth percent and priority level",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"max-queue-depth-percent\": {{qos_depth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"weight\": {{qos_weight_priority_upd}},\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "8b9bedfe-9df8-4930-9b22-202390c8c255",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains priority level 2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"priority level 2\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth remaining', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth remaining\");",
													"    });",
													"    pm.test('dryrun - contains police rate percent 90', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"police rate percent 90\");",
													"    });",
													"    pm.test('dryrun - contains no queue-limit', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no queue-limit\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "69bad264-33f3-4c71-9f10-1445391e498c",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "283ca55a-b483-4074-aa03-bf220ab0fb45",
									"name": "show updated policy plmap1 depth percent and priority level",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff848d9a-6a37-4d38-96d3-4a6e92b5a62b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//------------------------------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(JSON.parse(pm.environment.get(\"qos_weight_priority_upd\"))); ",
													"            ",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "0b0d59c7-9111-4cf4-87e3-0d3a1edb7b36",
									"name": "update policy plmap1 with bandwidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms}},\n                                \"cir-pct\": {{bandwidth_percent}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "21c801f4-463d-47c4-b74c-341786be8772",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains no priority', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no priority\");",
													"    });",
													"    pm.test('dryrun - contains bandwidth percent 60', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth percent 60\");",
													"    });",
													"    pm.test('dryrun - contains bandwidth remaining percent 15', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth remaining percent 15\");",
													"    });",
													"    pm.test('dryrun - contains no police', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no police\");",
													"    });",
													"    pm.test('dryrun - contains queue-limit 24 ms', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"queue-limit 24 ms\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "e2156f44-c229-46f0-95eb-b46ec0521471",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "824f7279-037e-451f-a46d-85daf5ad8933",
									"name": "show updated policy plmap1 with bandwidth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c61fe0b1-6abd-4df7-9068-ab8a1edde61b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"//-----------------------------------------------------",
													"var list = pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"console.log()",
													"",
													"//------------------------------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining\")));",
													"        }",
													"    }",
													"",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "abe3e779-a7e4-41ff-89cd-fad9d3f1e453",
									"name": "update policy plmap1 with bandwidth updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining_upd}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms_upd}},\n                                \"cir-pct\": {{bandwidth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "df866b5c-b608-46f6-836c-aee1255c5bc7",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4fd91b0-a871-4ff5-8050-93629d21dd40",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains bandwidth percent 30', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth percent 30\");",
													"    });",
													"    pm.test('dryrun - contains bandwidth remaining percent 60', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth remaining percent 60\");",
													"    });",
													"    pm.test('dryrun - contains no police', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no police\");",
													"    });",
													"    pm.test('dryrun - contains queue-limit 19 ms', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"queue-limit 19 ms\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "25cc5c64-1594-4e2a-971f-1cdbfe44ff3b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "616ac58e-9b96-4271-a468-640a68570dc4",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "37c09a83-68a7-4deb-8d9f-10baa23085e9",
									"name": "show updated policy plmap1 with bandwidth updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee4071d4-65f4-4170-af65-6a5530024ae2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"",
													"var list = pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"];",
													"var items = [];",
													"console.log(list)",
													"for(var i = 0; i < list.length; i++){",
													"    ",
													"    items[i] = list[i][\"sequence\"];",
													"}",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining_upd\")));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "5af47904-5463-4051-85b5-3973fc499828",
									"name": "update policy plmap1 to map1 and map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduler-policy\": [\n        {\n            \"name\": \"{{qos_policy_name1}}\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": {{bandwidth_percent_remaining_upd}},\n                                \"frinx-qos-extension:max-queue-depth-ms\": {{qos_queue_limit_ms_upd}},\n                                \"cir-pct\": {{bandwidth_percent_upd}}\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name2}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name2}}\",\n                                        \"queue\": \"{{qos_class_name2}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    },\n                                        {\n                        \"sequence\": 3,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"{{qos_class_name1}}\",\n                                    \"config\": {\n                                        \"id\": \"{{qos_class_name1}}\",\n                                        \"queue\": \"{{qos_class_name1}}\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 3\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{qos_policy_name1}}\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "ea0c5a2c-b12d-4b65-a80d-fc5f2a27be37",
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "3cebd15e-fba2-43c6-bccb-b6447614cc25",
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "fd1f3a00-51fe-4abb-ac74-8213150dcacb",
									"name": "show updated policy plmap1 to map1 and map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c32081ab-64d6-4d56-a034-41bb60a4e52d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"qos_policy_name1\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(pm.environment.get(\"qos_policy_name1\"));",
													"});",
													"//-------------------------------",
													"var list = pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"]",
													"var items = [];",
													"for(var i = 0; i < list.length;i++){",
													"    items[i]=list[i][\"sequence\"];",
													"    ",
													"    ",
													"}",
													"//-----------------------------------",
													"//sequence",
													"pm.test(\"Validate sequence 2=2 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"2\"){",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(2);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(2);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 1=1 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"1\"){",
													"             pm.expect(items[i]).to.eql(1);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(1);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name2\"));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(JSON.parse(pm.environment.get(\"qos_queue_limit_ms_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_upd\")));",
													"             pm.expect(list[i][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(JSON.parse(pm.environment.get(\"bandwidth_percent_remaining_upd\")));",
													"",
													"            ",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(1);",
													"});",
													"//sequence",
													"pm.test(\"Validate sequence 3=3 \", function() {",
													"    for(var i = 0; i < list.length; i++){",
													"        if(items[i] == \"3\"){",
													"             pm.expect(items[i]).to.eql(3);",
													"             pm.expect(list[i][\"config\"][\"sequence\"]).to.eql(3);",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"             pm.expect(list[i][\"inputs\"][\"input\"][0][\"id\"]).to.eql(pm.environment.get(\"qos_class_name1\"));",
													"        }",
													"    }",
													"    pm.expect(items).to.be.an('array').that.includes(3);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "db9ef7d5-2f09-4c10-8328-9764b2dbba07",
									"name": "delete policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "43ea0049-661c-41be-b203-fe80b7369d43",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4776ab4-8e16-4f15-8e8a-c7cb555bbcdd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains no class class-default', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class class-default\");",
													"    });",
													"    pm.test('dryrun - contains class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"class map2\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth\");",
													"    });",
													"    pm.test('dryrun - contains no bandwidth remaining', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth remaining\");",
													"    });",
													"    pm.test('dryrun - contains no police', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no police\");",
													"    });",
													"    pm.test('dryrun - contains no queue-limit', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no queue-limit\");",
													"    });",
													"  ",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c8af0fc5-aaf6-4387-918a-7918f21630ee",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "04376f3b-3a68-4bc1-9353-b8ea821d8e4d",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "72d8db91-24b2-4e6d-b0fb-79fe72ce9860",
									"name": "show deleted policy plmap1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/{{qos_policy_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"scheduler-policies",
												"scheduler-policy",
												"{{qos_policy_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "18ab9184-3dc5-48f6-a62d-83cf752d6180",
									"name": "delete class map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "23d83532-0493-4d5b-b2f2-17cd914b9911",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a314b6fc-c72d-4e4d-883e-127b89b152d3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains no class map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class map1\");",
													"    });",
													"    pm.test('dryrun - contains no class-map map1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map1\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1060036-d755-41f2-8b1c-f599a6d03878",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "214bd106-6f5d-4ec4-899f-5674969df6a3",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "ab1d5113-d19a-49d6-a3d5-ac2c1b9c25d9",
									"name": "show deleted class any map1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "af5a5b67-7250-4ad2-9931-d214e7797fd5",
									"name": "delete class map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "cca0a31a-6645-42d8-85bb-ba4f480e5eab",
									"name": "create dry-run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e41de781-a0b4-400e-a7b8-c55bb0c83509",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains policy-map plmap1', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"policy-map plmap1\");",
													"    });",
													"    pm.test('dryrun - contains no class map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class map2\");",
													"    });",
													"    pm.test('dryrun - contains no class-map map2', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no class-map map2\");",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c22dab1c-81d1-4668-b604-35e3d0d058b6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "262acac2-b67c-483e-9623-2feb7a7cc6e2",
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "d1efc7fd-32e7-4e17-9fd9-6c9e0c61bc27",
									"name": "show deleted class any map2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/{{qos_class_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-qos:qos",
												"classifiers",
												"classifier",
												"{{qos_class_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"_postman_id": "07706de7-c290-479f-a809-6dd9901d78ce",
							"name": "QOS CRUD deleting_policy-map",
							"item": [
								{
									"_postman_id": "040b0095-1ddc-4ae0-b655-b9ef676728aa",
									"name": "configure class map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n class-map match-any Tos0\n match mpls experimental topmost 0 \n match precedence 0 \n end-class-map\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "66129e25-eec3-4c41-85ae-d7c9811475b4",
									"name": "sync-from-network1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "db1a410a-c401-41a0-8ac7-c46e5455af32",
									"name": "calculate-diff1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f01e54f-3019-4a27-b779-3eb3afa1ebc2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "76c17291-c1ec-420e-98ce-77e56c14e77a",
									"name": "configure policy map",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n policy-map Count-Policy\n  class Tos0\n  set qos-group 0\n  set mpls  experimental topmost 0\n   set precedence critical\n  priority level 1\n end-policy-map\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "8fbe6cd4-062d-4be6-989a-75a399055f17",
									"name": "sync-from-network2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "e5a7e308-0aa9-44dc-82b4-1770494ea83d",
									"name": "dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97ea3ca4-dd16-47e2-84f2-bb3ed0409098",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"dryrun-manager:dryrun-commit"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "503bd8db-02aa-4f57-96ac-3b2a776e6158",
									"name": "remove class and policy maps",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-any Tos0\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"_postman_id": "a7e27952-0e68-4aca-9d76-a3b31794054d",
									"name": "sync-from-network3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}