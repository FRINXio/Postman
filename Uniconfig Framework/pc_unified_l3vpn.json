{
	"info": {
		"_postman_id": "eff07e3d-982f-49ad-824f-c39286caeece",
		"name": "PC_Unified_L3VPN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Classic L3VPN BGP CRUD",
			"description": null,
			"item": [
				{
					"name": "Classic L3VPN BGP CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous 2. L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L3VPN BGP READERS",
					"description": null,
					"item": [
						{
							"name": "Delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno ip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nno ip vrf {{l3_vpn_bgp_vrf}}\nexit\n\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nip vrf {{l3_vpn_bgp_vrf}}\nrd {{l3_vpn_bgp_rd}}\nroute-target export {{l3_vpn_bgp_rt_exp_1}}\nroute-target export {{l3_vpn_bgp_rt_exp_2}}\nroute-target export {{l3_vpn_bgp_rt_exp_3}}\nroute-target import {{l3_vpn_bgp_rt_imp_1}}\nroute-target import {{l3_vpn_bgp_rt_imp_2}}\nroute-target import {{l3_vpn_bgp_rt_imp_3}}\nexit\ninterface {{l3_vpn_bgp_interface_id}}\nip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nrouter bgp {{l3_vpn_bgp_as_number}}\nbgp router-id {{l3_vpn_bgp_router_id}}\naddress-family ipv4 vrf {{l3_vpn_bgp_vrf}}\nnetwork {{l3_vpn_bgp_network_prefix}} mask {{l3_vpn_bgp_network_prefix_mask1}}\nneighbor {{l3_vpn_bgp_neighbor_address}} remote-as {{l3_vpn_bgp_remote_as}}\nneighbor {{l3_vpn_bgp_neighbor_address}} activate\nexit\nexit\nexit\n\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"//network-instance name",
											"pm.test(\"Validate network-instance name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"l3_vpn_bgp_protocol_enabled\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_protocol_enabled\")));",
											"});",
											"//config afi-safi-name",
											"pm.test(\"Validate config afi-safi-name = \" + pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"));",
											"});",
											"//global config as",
											"pm.test(\"Validate global config as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//config afi-safi-name",
											"pm.test(\"Validate config afi-safi-name = \" + pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_types_IPV4_UNICAST\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//config prefix",
											"pm.test(\"Validate config prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config bgp name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//bgp name",
											"pm.test(\"Validate bgp name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_STATIC_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_STATIC_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_STATIC_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_STATIC_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//ext-community-set-name",
											"pm.test(\"Validate ext-community-set-name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\", function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\");",
											"});",
											"//config ext-community-set-name",
											"pm.test(\"Validate config ext-community-set-name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\", function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\");",
											"});",
											"//ext-community-member 1",
											"pm.test(\"Validate ext-community-member 1 = \" + pm.environment.get(\"l3_vpn_bgp_rt_imp_1\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"][0]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_imp_1\"));",
											"});",
											"//ext-community-member 2",
											"pm.test(\"Validate ext-community-member 2 = \" + pm.environment.get(\"l3_vpn_bgp_rt_imp_2\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"][1]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_imp_2\"));",
											"});",
											"//ext-community-member 3",
											"pm.test(\"Validate ext-community-member 3 = \" + pm.environment.get(\"l3_vpn_bgp_rt_imp_3\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"][2]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_imp_3\"));",
											"});",
											"//ext-community-set-name",
											"pm.test(\"Validate ext-community-set-name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\", function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\");",
											"});",
											"//config ext-community-set-name",
											"pm.test(\"Validate ext-community-set-name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\", function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\");",
											"});",
											"//ext-community-member 4",
											"pm.test(\"Validate  = ext-community-member 4\" + pm.environment.get(\"l3_vpn_bgp_rt_exp_1\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"][0]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_exp_1\"));",
											"});",
											"//ext-community-member 5",
											"pm.test(\"Validate  = ext-community-member 5\" + pm.environment.get(\"l3_vpn_bgp_rt_exp_2\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"][1]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_exp_2\"));",
											"});",
											"//ext-community-member 6",
											"pm.test(\"Validate  = ext-community-member 6\" + pm.environment.get(\"l3_vpn_bgp_rt_exp_3\"), function() {",
											"  pm.expect(pm.response.json()[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"][2]).to.eql(pm.environment.get(\"l3_vpn_bgp_rt_exp_3\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno ip vrf forwarding {{l3_vpn_bgp_vrf}}\nexit\nno ip vrf {{l3_vpn_bgp_vrf}}\nexit\n\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Classic L3VPN OSPF CRUD",
			"description": null,
			"item": [
				{
					"name": "Classic L3VPN OSPF CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Delete previous OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de80c235-5f9c-4aa2-a714-d0f2521a56af",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c84fc8a-88f2-4bfb-9da0-79d52c311155",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "758d2968-1339-44d6-8ffe-fc35979e6620",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c333478-71c9-478a-899e-d68bf0db3d78",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous global OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89cf3aad-f5bd-43d1-b5b0-a48ff1cf41f2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous global OSPF3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55101a86-527f-4d84-88f5-b714e0288d89",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c06a962-743c-435a-86af-ba1e36d9a7f0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR L3VPN BGP CRUD",
			"description": null,
			"item": [
				{
					"name": "XR L3VPN BGP CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c07adc41-08ea-4d10-8e5f-897f0306b5bf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l3_vpn_bgp_nonexist_interface_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d035e58-5090-42c1-82a9-d7030179fed4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous 2. L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1afb7a44-3e63-4a7d-805c-52e97c1d03a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d167bde-433f-4e97-8c2b-2b03891224d8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b2bcb1d-2bc8-4da6-a138-6b1bbf5a93e3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L3VPN BGP READERS",
					"description": null,
					"item": [
						{
							"name": "Delete previous L3VPN BGP and prerequest route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65d0a131-18d9-4114-94ec-dd781a814523",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\nroute-policy RPL_PASS_ALL\npass\nend-policy\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "393cbd13-41cc-4af4-b289-b8601dfa4fc6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nvrf {{l3_vpn_bgp_vrf}}\naddress-family ipv4 unicast \nimport route-target \n{{l3_vpn_bgp_rt_imp_1}}\n{{l3_vpn_bgp_rt_imp_2}}\n{{l3_vpn_bgp_rt_imp_3}}\nexit\nexport route-target \n{{l3_vpn_bgp_rt_exp_1}}\n{{l3_vpn_bgp_rt_exp_2}}\n{{l3_vpn_bgp_rt_exp_3}}\nexit\nexit\nexit\ninterface {{l3_vpn_bgp_interface_id}}\nvrf {{l3_vpn_bgp_vrf}}\nexit\nrouter bgp {{l3_vpn_bgp_as_number}}\nbgp router-id {{l3_vpn_bgp_router_id}}\naddress-family vpnv4 unicast\nvrf {{l3_vpn_bgp_vrf}}\nrd {{l3_vpn_bgp_rd}}\naddress-family ipv4 unicast \nnetwork {{l3_vpn_bgp_network_prefix}} {{l3_vpn_bgp_network_prefix_mask1}}\nexit\nneighbor {{l3_vpn_bgp_neighbor_address}}\nremote-as {{l3_vpn_bgp_remote_as}}\naddress-family ipv4 unicast \nroute-policy RPL_PASS_ALL in\nroute-policy RPL_PASS_ALL out\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP network instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
											"});",
											"",
											"pm.test(\"Validate id\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
											"});",
											"",
											"pm.test(\"Validate as\", function() {",
											"    var str = pm.environment.get(\"l3_vpn_bgp_as_number\");",
											"    var pos = str.lastIndexOf(\".\")",
											"    var res = str.substring(0, pos);",
											"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
											"    pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(num);",
											"});",
											"",
											"",
											"//in SETUP Configure L3VPN BGP I configure router-id for global BGP",
											"//this GET reader is for VRF - this is reason why it did not get into reader output",
											"//postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\")",
											"",
											"pm.test(\"Validate route-distinguisher\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
											"});",
											"",
											"pm.test(\"Validate prefix\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"pm.test(\"Validate prefix\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
											"});",
											"",
											"pm.test(\"Validate peer-as\", function() {",
											"    var str = pm.environment.get(\"l3_vpn_bgp_remote_as\");",
											"    var pos = str.lastIndexOf(\".\")",
											"    var res = str.substring(0, pos);",
											"    var num = res * 65536 + Number(str.substring(pos + 1,str.length));",
											"    pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(num);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show L3VPN BGP defined sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"/*-- THIS DOES NOR WORK IN NEWMAN",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
											"",
											"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
											"*/",
											"",
											"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"",
											"",
											"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"",
											"",
											"    /*",
											"    // this is not good because it relies on ordered input in environmental variabes....",
											"    ",
											"    pole.sort();",
											"    console.log(pole);",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
											"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
											"    */",
											"",
											"",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
											"    ",
											"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
											"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
											"    ",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"",
											"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"} else {",
											"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
											"    ",
											"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
											"    console.log(pole);",
											"    for (var i = 0; i < pole.length; i++) {",
											"        switch(pole[i]) {",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
											"                break;",
											"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
											"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
											"                break;",
											"            default:",
											"                test[\"Found not expected value \" + pole[i]] = false;",
											"        } ",
											"    }",
											"    ",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous L3VPN BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e39bfa0e-9a39-461d-bc10-e937cde79fc2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{l3_vpn_bgp_as_number}}\ninterface {{l3_vpn_bgp_interface_id}}\nno vrf {{l3_vpn_bgp_vrf}}\nexit\nno vrf {{l3_vpn_bgp_vrf}}\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (network instance)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_bgp_vrf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted L3VPN BGP (defined sets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete prereqest route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e39bfa0e-9a39-461d-bc10-e937cde79fc2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy RPL_PASS_ALL\ncommit\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR L3VPN OSPF CRUD",
			"description": null,
			"item": [
				{
					"name": "XR L3VPN OSPF CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete previous OSPF global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f7c0a1e-7fb4-48c1-bddf-e0072149fb0c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79a88d4b-1bf7-493c-9105-c486f8914e54",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8724c538-7200-4dbc-9252-769d35968a25",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5683c409-cd1c-4062-a336-833de5344f5f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous global OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e16fe6d0-9689-4be4-b20d-6683b6aabd1b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous global OSPF3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45400b89-02ac-4831-a999-6e8de0363e5d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "to update ODL cache after deleting OSPF/33 and  before an attempt to delete network-instance/33",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e44455f4-4ffa-4f62-9204-6109237e5e98",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previous OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a76bf1fa-1db7-4fae-9489-6e495df9a051",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure route policy PASS_ALL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2ada2dd-3826-4aa0-bd85-aa81f29136a2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     route-policy PASS_ALL\n     pass\n     end-policy\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4746f6-1d48-42bf-b84f-9273ae7aee56",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L3VPN OSPF CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete route policy PASS_ALL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64779387-562c-4445-88c4-4670bab546b8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy PASS_ALL\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55366fd8-bc52-489c-a6cf-d2ebdc7fe59f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "L3VPN OSPF CRUD",
					"description": null,
					"item": [
						{
							"name": "Create OSPF  global 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id2}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric2}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id2}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id2\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id2\")))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface metric is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric2\")))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 area",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id3}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated area",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   OSPF global instance 2 area id was updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id3\")))",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface metric is updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\")))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove OSPF interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\r\n                            \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove OSPF2 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\r\n                             \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 2 interafces added",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    },\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF2 updated interafces",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0]  ospf metric was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]) === JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\"))",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[1] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 - remove interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"});",
											"",
											"pm.test(",
											"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
											"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
											"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if ((jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) && (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"identifier\"] == \"frinx-openconfig-policy-types:OSPF\")) {",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"                ;",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"});",
											"",
											"pm.test(",
											"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
											"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
											"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if ((jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) && (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"identifier\"] == \"frinx-openconfig-policy-types:OSPF\")) {",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"                ;",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                \t{\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id2}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                                                    }\n                                                },\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    },\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf1 config  name = \" + pm.environment.get(\"l3_vpn_ospf_instance_2_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_2_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf1 name = \" + pm.environment.get(\"l3_vpn_ospf_instance_2_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_2_name\"));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_router_id2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_router_id2\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface config id = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface  id = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface2 config id = \" + pm.environment.get(\"l3_vpn_ospf_interface2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface2\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface2 id = \" + pm.environment.get(\"l3_vpn_ospf_interface2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface2\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_ospf_area_id\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_ospf_area_id\")));",
											"});",
											"//name",
											"pm.test(\"Validate ospf2 config name = \" + pm.environment.get(\"l3_vpn_ospf_instance_3_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_3_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf2 name = \" + pm.environment.get(\"l3_vpn_ospf_instance_3_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_3_name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted removed OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1 copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OSPF  global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request1\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table-connections\": {\n        \"table-connection\": [\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \t\"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\"\n\n            },\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF  global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"888\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"888\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"88.88.88.89\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 909,\n                            \"config\": {\n                                \"identifier\": 909\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DEL request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN BGP CRUD",
					"description": null,
					"item": [
						{
							"name": "L3VPN BGP CRUD global",
							"description": "According\nhttps://github.com/FRINXio/translation-units-docs/blob/master/Configuration%20datasets/network-instances/protocols/bgp.md\nthere is no command set for XE device.",
							"item": [
								{
									"name": "BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ece9f93-4296-49bd-8181-a37060826ae4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     },\n                 {\n                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                       \"config\": {\n                           \"afi-safi-name\": \"frinx-openconfig-bgp-types:L3VPN_IPV4_UNICAST\",\n                           \"enabled\": true\n                       }\n                   }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP with SAFI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29cbdf21-837f-48f8-bfb0-d85705f161e5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32b4fc74-141f-4d37-941e-bfee414516af",
												"type": "text/javascript",
												"exec": [
													"console.log((new Date()).toISOString());",
													"setTimeout(function(){}, 90000);",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d6d2bce-484f-46a2-b08c-c10c7b6e4a98",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP bgp-defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"bgp-defined-sets\" {\r\n\t\text-community-sets {\r\n\t\t\text-community-set [\r\n\t\t\t\t{            \r\n\t\t\t\t\t\"config\": {\r\n                \t\t\"ext-community-set-name\": \"<vrf>-route-target-export-set\"\r\n                \t\t\"ext-community-set-member\": [\r\n                \t\t\t{<rt_exp_1>}\r\n                \t\t\t{<rt_exp_2>}\r\n                \t\t\t{<rt_exp_3>}\r\n                \t\t]\r\n           \t\t\t}\r\n        \t\t}\r\n        \t\t{            \r\n\t\t\t\t\t\"config\": {\r\n                \t\t\"ext-community-set-name\": \"<vrf>-route-target-import-set\"\r\n                \t\t\"ext-community-set-member\": [\r\n                \t\t\t{<rt_imp_1>}\r\n                \t\t\t{<rt_imp_2>}\r\n                \t\t\t{<rt_imp_3>}\r\n                \t\t]\r\n           \t\t\t}\r\n        \t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81625608-fcfe-4444-aa5d-90420936d30e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d2d2adf-57de-4355-b373-544b8b5e7318",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
													"var configured_item_val = '66.66.67.0';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_neighbor_address\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8044f91f-5027-419e-9d21-592d59359773",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5fe57f5-3314-4d11-aa87-ccd96a73a49d",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rd\";",
													"var configured_item_val = '65000:10';// After fix MU-226 change this value to 65000:100",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);",
													"console.warn(\"// FIXME MU-226 this does not work: Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to 65000:100');",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rd\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l3_vpn_bgp_nonexist_interface_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create other interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cf10808-73fd-4fa0-a3d6-39b93c00d691",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Loopback1970\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": \"Loopback1970\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l3_vpn_bgp_nonexist_interface_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c03460d1-d61e-4422-8281-d6eb6cf38959",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca934b26-27af-4850-b41a-18a00c213db5",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
													"var configured_item_val = 'Loopback1970';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"//this needs to be fixed - there should be no GigabitEthernet0/0/0/2\" only  \"Loopback1970\"",
													"//not present replaced id",
													"pm.test(\"Check that previous interface is not present (id = \" + pm.environment.get(\"original_value\") + ')', function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').not.to.deep.include({id:pm.environment.get(\"original_value\")});",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_interface_id\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e70625c-521c-4640-9731-f4631fcfc48c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8788403d-71b3-47a5-a0df-7ef7822682f7",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
													"var configured_item_val = '20.30.40.0';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_network_prefix\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5de40728-e7b4-4429-a844-be7f6231a7b7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1a54aa5-4b32-4324-a9ba-50a350ef5dc4",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_router_id\";",
													"var configured_item_val = '1.1.1.2';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_router_id\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "575bef2d-b28e-46af-8ffd-ecc130f586a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9277b95-d8ec-4ad2-815f-4e2274129b95",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
													"var configured_item_val = '23';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show updated 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  //pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"]).to.be.an('array').to.deep.include({id:pm.environment.get(\"l3_vpn_bgp_interface_id\")});",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"var configured_item_key = \"l3_vpn_bgp_network_prefix_mask2\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fc71899-b61d-4bcd-a546-922c517ed99b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0bff134c-dcd6-47e5-8028-e814ceda3fe8",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b15f19d-f934-453e-a034-705068ba8c83",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83a994bb-c867-494d-a598-901f95a7d2eb",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
													"var configured_item_val = '62000:45';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_exp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdcf821c-faf2-4ee9-8992-e805b615cd1f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d8afbf7-f6d7-4299-b306-2295df37d55e",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
													"var configured_item_val = '61000:90';",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\",\n                            \"{{l3_vpn_bgp_rt_imp_4}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71123fb9-400e-4e70-91c7-b907d03ea2f8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_4\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_4\";",
													"pm.environment.set(configured_item_key, undefined);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12a5f558-2d59-4c72-9e93-5a14452e1af2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01e505d5-3fb0-4081-8612-b8efd2d3874d",
												"type": "text/javascript",
												"exec": [
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"var configured_item_val = '61000:15'; // must by lesser than l3_vpn_bgp_rt_imp_2",
													"pm.environment.set(\"original_value\", pm.environment.get(configured_item_key));",
													"pm.environment.set(configured_item_key, configured_item_val);",
													"console.log(\"Changing \" + configured_item_key + \" from \"  + pm.environment.get(\"original_value\") + ' to ' + configured_item_val);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													"var configured_item_key = \"l3_vpn_bgp_rt_imp_1\";",
													"pm.environment.set(configured_item_key, pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update L3VPN BGP defined sets 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ae4fcc6-aabf-4516-bcf4-c348c05ff26f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"/*-- THIS DOES NOR WORK IN NEWMAN",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")) === true;",
													"",
													"tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"].includes(postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")) === true;",
													"*/",
													"",
													"if (jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\") {",
													"    ",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 0\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][0][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"",
													"",
													"    /*",
													"    // this is not good because it relies on ordered input in environmental variabes....",
													"    ",
													"    pole.sort();",
													"    console.log(pole);",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = pole[0] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = pole[1] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\");",
													"    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = pole[2] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\");",
													"    */",
													"",
													"",
													"} else {",
													"    tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in 1\"] = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"    ",
													"    var pole = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"][1][\"config\"][\"ext-community-member\"];",
													"    console.log(pole);",
													"    for (var i = 0; i < pole.length; i++) {",
													"        switch(pole[i]) {",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                break;",
													"            case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                break;",
													"            default:",
													"                test[\"Found not expected value \" + pole[i]] = false;",
													"        } ",
													"    }",
													"    ",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d33b2bae-e5e0-4600-bbe2-d656f61dcff4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 1a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"//tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"var mystring = [];",
													"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1b",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a044ec5-c70b-428e-ab30-4d42e04d00ff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}/interfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}",
												"interfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 1b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 3a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d86e6047-e1cb-4468-8110-67b3d75d3037",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 3a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"//tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"//tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"//tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"//tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"",
													"var mystring = [];",
													"//mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
													"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
													"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 3b",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a50ba67-f1ab-4433-828d-00d0e4b2534c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a56388f6-db6a-4c4f-a3ce-d5f2083d711e",
												"type": "text/javascript",
												"exec": [
													"/*",
													"  This update does not create these item when it is run via Newman:",
													"  2. Body matches string \"router-id\":\"1.1.1.1\"",
													"  3. Body matches string \"neighbor-address\":\"66.66.66.0\"",
													"  4. Body matches string \"peer-as\":4194304010",
													"  5. Body matches string \"prefix\":\"10.20.30.0/24\"",
													"  5⠄ AssertionFailure in test-script",
													"*/",
													"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 3b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"');",
													"mystring.push('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"mystring.push('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"');",
													"mystring.push('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"');",
													"mystring.push('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"mystring.push('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"');",
													"mystring.push('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 4a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a646f35-8608-42a8-a811-41f1314215c1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 4a",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"//tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"var mystring = [];",
													"mystring.push('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update 4b",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d23e717e-e74a-4b8b-ae4d-a1e48f82bfd9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated 4b",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"console.log(\"Response: \" +  jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]);",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\")) || (jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][1][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure 2. L3VPN BGP with SAFI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acd1b143-cc14-4fdc-9279-c4a9239dca22",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id2}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id2}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  2. L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
													"});",
													"",
													"pm.test('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"",
													"pm.test('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"});",
													"",
													"pm.test('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"",
													"pm.test('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"",
													"pm.test('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"",
													"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id2\"));",
													"});",
													"",
													"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e9f4eab-4121-49b5-b47c-41d9452c8826",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"// test 2. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 2. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": [
										{
											"id": "9e9eba01-207f-4e6c-a7bf-4ae05d36a5c1",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-routing-policy:routing-policy",
														"defined-sets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete previous 2. L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b8f7d80-cf05-4a89-bc54-ea0d09599c00",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var mystring = [];",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": [
										{
											"id": "256c68d7-6516-48a3-8797-8e4874a124a3",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-routing-policy:routing-policy",
														"defined-sets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Configure 2. L3VPN BGP with SAFI 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19eeb5fb-fec0-4542-aa0a-bf5fea99e6f9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ddf1a2c-51b2-49b9-9373-5723ac4810b6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"MU-230 - Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 60000);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf2}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd2}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf2}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  2. L3VPN BGP network instance 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(",
													"    '\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\") + ', ' +",
													"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"' + ', ' +",
													"    '\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"' + ', ' +",
													"    '\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\") + ', ' +",
													"    '\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
													"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
													"    if (arrayLength > 0) {",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            if (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == 'default') {",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"            }",
													"        }        ",
													"    }",
													"});",
													"",
													"",
													"pm.test('\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\"));",
													"});",
													"",
													"/*",
													"pm.test('\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"",
													"pm.test('\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\"));",
													"});",
													"",
													"pm.test('\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"",
													"pm.test('\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"",
													"pm.test('\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"*/",
													"",
													"pm.test('\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"",
													"pm.test('\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\") + '\"', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_rd2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure L3VPN BGP defined sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ec1424b-2d9e-4e6f-af5b-287c74461d18",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf2}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"// test 2. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"2. VRF - Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 2. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"2. VRF - Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": [
										{
											"id": "1ecb6d41-fa44-4b31-bca3-1fa79bbf96b1",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-routing-policy:routing-policy",
														"defined-sets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete previous 2. L3VPN BGP 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show BGP global - config 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + \"default\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP network instance 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_bgp_vrf\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_vrf\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_remote_as_decimal\")));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
													"});",
													"//id",
													"console.log(\"Here is commented validation of interface id - I do not know, why\")",
													"/*",
													"pm.test(\"Validate id = \" + pm.environment.get(\"l3_vpn_bgp_interface_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_interface_id\"));",
													"});",
													"*/",
													"//route-distinguisher",
													"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"l3_vpn_bgp_rd\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_rd\"));",
													"});",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"tests['\"name\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + '\"'] = jsonData[\"network-instance\"][0][\"name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"tests['\"as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_as_number_decimal\"));",
													"tests['\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_router_id\");",
													"tests['\"neighbor-address\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_neighbor_address\");",
													"tests['\"peer-as\":' + postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\")] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"] === parseInt(postman.getEnvironmentVariable(\"l3_vpn_bgp_remote_as_decimal\"));",
													"tests['\"prefix\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\") + '\"'] = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix\") + '/' + postman.getEnvironmentVariable(\"l3_vpn_bgp_network_prefix_mask2\");",
													"//tests['\"id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\") + '\"'] = jsonData[\"network-instance\"][0][\"interfaces\"][\"interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_interface_id\");",
													"tests['\"route-distinguisher\":\"' + postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\") + '\"'] = jsonData[\"network-instance\"][0][\"config\"][\"route-distinguisher\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_rd\");",
													"//tests[] = jsonData[\"network-instance\"][\"\"][\"\"][\"\"][][\"\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\");",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (network instance) 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c53ac04-50df-4ca4-b383-5fb6f6a9f89d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted 2. L3VPN BGP (defined sets) 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var mystring = [];",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");",
													"mystring.push(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "show L3VPN BGP defined-sets 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var testedobject = jsonData[\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"ext-community-sets\"][\"ext-community-set\"];",
													"var confcount = 0;",
													"confcount = testedobject.length;",
													"",
													"",
													"// test 1. VRF + import",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"",
													"",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-import-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\"):",
													"                    tests[\"Route target import set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_imp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"",
													"",
													"// test 1. VRF + export",
													"var testedstring = postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"var wasfound = false;",
													"for (var i = 0; i < confcount; i++) {",
													"    if (testedobject[i][\"ext-community-set-name\"] === testedstring) {",
													"        tests[\"1.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"        ",
													"        tests[\"2.\" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\" + \" in \" + i] = testedobject[i][\"config\"][\"ext-community-set-name\"] === postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf\") + \"-route-target-export-set\";",
													"",
													"        var pole = testedobject[i][\"config\"][\"ext-community-member\"];",
													"        console.log(pole);",
													"        for (var i = 0; i < pole.length; i++) {",
													"            switch(pole[i]) {",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_1\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_2\")] = true;",
													"                    break;",
													"                case postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\"):",
													"                    tests[\"Route target export set contains \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_rt_exp_3\")] = true;",
													"                    break;",
													"                default:",
													"                    test[\"Found not expected value \" + pole[i]] = false;",
													"            } ",
													"        }",
													"        wasfound = true;",
													"    }",
													"}",
													"",
													"if (!wasfound) {",
													"    test[testedstring + \"was not found.\"] = false;",
													"}",
													"    ",
													"",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-export-set\");",
													"tests[\"Body does not match string \" + postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\"] = !responseBody.has(postman.getEnvironmentVariable(\"l3_vpn_bgp_vrf2\") + \"-route-target-import-set\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": [
										{
											"id": "509502b6-755a-4ab3-a35a-921389a4ead0",
											"name": "show L3VPN BGP defined-sets",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-routing-policy:routing-policy",
														"defined-sets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Server",
													"value": "Jetty(8.1.19.v20160209)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [
												{
													"expires": "Invalid Date",
													"httpOnly": false,
													"domain": "localhost",
													"path": "/restconf",
													"secure": false,
													"value": "ekd6v44e3q2y32rdvlb5ino",
													"key": "JSESSIONID"
												}
											],
											"body": "{\"defined-sets\":{\"frinx-openconfig-bgp-policy:bgp-defined-sets\":{\"ext-community-sets\":{\"ext-community-set\":[{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}},{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"config\":{\"ext-community-set-name\":\"OTHER_SCH_VRF-route-target-import-set\",\"ext-community-member\":[\"61000:10\",\"61000:20\",\"61000:30\"]}},{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"config\":{\"ext-community-set-name\":\"THIS_IS_MY_VRF_DO_NOT_TOUCH-route-target-export-set\",\"ext-community-member\":[\"62000:40\",\"62000:50\",\"62000:60\"]}}]}}}}"
										}
									]
								},
								{
									"name": "Delete L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28632d29-2577-4ed0-8f8d-b1f308bab004",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete previous L3VPN BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2be17624-748c-48f1-96f7-a27b989c01cd",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BGP global",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37541017-ebc3-456d-9903-8a29cb0a4732",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (network instance)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1be75a68-f71f-4617-9874-46f0017112d5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted L3VPN BGP (defined sets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "411c6a24-0cb9-49f9-90ec-3881ebb06613",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L3VPN BGP CRUD Negative",
							"description": null,
							"item": [
								{
									"name": "Configure L3VPN BGP defined sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.warn(\"// FIXME this is succesfully created instead of failure because there is no referenced network instance - MU-186\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-bgp-policy:bgp-defined-sets\": {\n        \"ext-community-sets\": {\n            \"ext-community-set\": [\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-import-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_imp_1}}\",\n                            \"{{l3_vpn_bgp_rt_imp_2}}\",\n                            \"{{l3_vpn_bgp_rt_imp_3}}\"\n                        ]\n                    }\n                },\n                {\n                    \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                    \"config\": {\n                        \"ext-community-set-name\": \"{{l3_vpn_bgp_vrf}}-route-target-export-set\",\n                        \"ext-community-member\": [\n                            \"{{l3_vpn_bgp_rt_exp_1}}\",\n                            \"{{l3_vpn_bgp_rt_exp_2}}\",\n                            \"{{l3_vpn_bgp_rt_exp_3}}\"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l3_vpn_bgp_nonexist_interface_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l3_vpn_bgp_nonexist_interface_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create L3VPN BGP on non existing interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{l3_vpn_bgp_vrf}}\",\n      \"config\": {\n        \"name\": \"{{l3_vpn_bgp_vrf}}\",\n        \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n        \"route-distinguisher\": \"{{l3_vpn_bgp_rd}}\",\n        \"enabled-address-families\": [\n          \"{{l3_vpn_bgp_enabled_address_families}}\"\n        ],\n        \"enabled\": true\n      },\n      \"interfaces\": {\n        \"interface\": [\n          {\n            \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\",\n            \"config\": {\n              \"id\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n            }\n          }\n        ]\n      },\n      \"inter-instance-policies\": {\n        \"apply-policy\": {\n          \"config\": {\n            \"export-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-export\"\n            ],\n            \"import-policy\": [\n              \"{{l3_vpn_bgp_vrf}}-route-target-import\"\n            ]\n          }\n        }\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"name\": \"default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n              \"name\": \"default\",\n              \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n              \"enabled\": true\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n            \t\t\t\"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\",\n                        \"config\": {\n                            \"prefix\": \"{{l3_vpn_bgp_network_prefix}}/{{l3_vpn_bgp_network_prefix_mask2}}\"\n                        }\n                    }\n                ]\n            },\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\": \"{{l3_vpn_bgp_router_id}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                      \"config\": {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"enabled\": true\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid L3VPN BGP vrf name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"network-instance\": [\n   {\n     \"name\": \"{{l3_vpn_bgp_vrf_invalid}}\",\n     \"config\": {\n       \"name\": \"{{l3_vpn_bgp_vrf_invalid}}\",\n       \"type\": \"frinx-openconfig-network-instance-types:L3VRF\",\n       \"enabled\": true\n     }\n   }\n ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_bgp_vrf_invalid}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l3_vpn_bgp_vrf_invalid}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L3VPN OSPF CRUD Copy",
					"description": null,
					"item": [
						{
							"name": "Create OSPF  global 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ac1655c-6ae8-4ecf-857b-3b5bd6b7e22c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8377ffab-2f90-48d2-966e-c1498faddd9d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63cbff62-38a2-473d-8bf2-d3deeb625c82",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id2}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric2}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id2}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b00f472-30cb-4890-a4af-12c6de4b32ed",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id2\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id2\")))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 2 area interface metric is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric2\")))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 area",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18b75f2a-660f-4236-b96e-362a82099272",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id3}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated area",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7e4fbc3-773f-4daf-bc1f-51303ccdf85d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the OSPF global instance 2 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_2_name\"))",
											"});",
											"",
											"pm.test(\"Verify the   OSPF global instance 2 area id was updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id3\")))",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "281cbee4-8864-4edd-b851-279af935d5eb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF metric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c69d6f6-2fca-46a6-8390-aa98b7aba69e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface metric is updated\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\")))",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove OSPF interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be45f226-c2b2-410b-975d-19b4806a01a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\r\n                            \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c2217c6-d45f-4942-acb5-22cce702d516",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove OSPF2 interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a27f6748-7deb-4655-8780-10815058dfba",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"protocol\": [\r\n        {\r\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\r\n            \"config\": {\r\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\r\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\r\n            },\r\n            \"ospfv2\": {\r\n                \"global\": {\r\n                    \"config\": {\r\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\r\n                    }\r\n                },\r\n                \"areas\": {\r\n                    \"area\": [\r\n                        {\r\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\r\n                             \"config\": {\r\n                                \"identifier\": {{l3_vpn_ospf_area_id3}}\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb25281e-31ae-429f-870b-3bc6dea903d9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 2 interafces added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cdc4a8f-11b6-416e-806f-45e076a67a38",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    },\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF2 updated interafces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e4e0e-5bb5-4c56-bb15-ef1be1eba1c7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0]  ospf metric was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]) === JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_metric3\"))",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[0] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\")",
											"});",
											"",
											"pm.test(\"Verify the  OSPF global instance 2 area interface[1] is added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]) === postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\")",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF2 - remove interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6b9149f-d45e-45e1-86f3-2e951c9fac85",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id2}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": \"{{l3_vpn_ospf_area_id3}}\",\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \t  \"metric\": {{l3_vpn_ospf_metric3}}\n                                        \t }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\":  {{l3_vpn_ospf_area_id3}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated OSPF2 without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "236d3cd8-fe54-4ab3-aa56-d19270d02bbc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = \"\\\"interface\\\":\\\"\" + String (postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"))+\"\\\"\";",
											"tests[\"Body doesnt matches string\" + mystring] = !responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b8d3d2-6f8a-4665-b57c-484afbe3c45e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24f151ea-5f0f-4a2d-b157-a1cc154640c2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"});",
											"",
											"pm.test(",
											"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
											"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
											"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if ((jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) && (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"identifier\"] == \"frinx-openconfig-policy-types:OSPF\")) {",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"                ;",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15077394-a2da-461a-bcc8-115436a79a55",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_2_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_2_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea253704-37c1-4b04-8a90-5f6fad7fd171",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify the  OSPF VRF network-instance was added\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"});",
											"",
											"pm.test(",
											"    '\"name\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\") + ', ' +",
											"    '\"router-id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_router_id3\") + '\"' + ', ' +",
											"    '\"interface id\":\"' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"' + ', ' +",
											"    '\"interface id\":' + postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\") + '\"', function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"])",
											"    var arrayLength = jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"].length",
											"    if (arrayLength > 0) {",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            if ((jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"] == postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\")) && (jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"identifier\"] == \"frinx-openconfig-policy-types:OSPF\")) {",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_3_name\"))",
											"                ;",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id3\"))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"                pm.expect(jsonData[\"network-instance\"][0][\"protocols\"][\"protocol\"][i][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface2\"));",
											"            }",
											"        }        ",
											"    }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf without interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "323258cd-0e10-4457-859e-0958b1fcfea1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                    {\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_3_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id3}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_instance_3_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c1a83af-be17-4cbb-a553-57bce828dc65",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5c74c96-e00e-4eb9-8b45-5bf7bc1c9603",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-instance\": [\n        {\n            \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n            \"protocols\": {\n                \"protocol\": [\n                \t{\n                        \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                        \"name\": \"{{l3_vpn_ospf_instance_2_name}}\",\n                        \"config\": {\n                            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                            \"name\": \"{{l3_vpn_ospf_instance_2_name}}\"\n                        },\n                        \"ospfv2\": {\n                            \"global\": {\n                                \"config\": {\n                                    \"router-id\": \"{{l3_vpn_router_id2}}\"\n                                }\n                            },\n                            \"areas\": {\n                                \"area\": [\n                                    {\n                                        \"identifier\": \"{{l3_vpn_ospf_area_id}}\",\n                                        \"interfaces\": {\n                                            \"interface\": [\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                                                    }\n                                                },\n                                                {\n                                                    \"id\": \"{{l3_vpn_ospf_interface2}}\",\n                                                    \"config\": {\n                                                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                                                    }\n                                                }\n                                            ]\n                                        },\n                                        \"config\": {\n                                            \"identifier\": \"{{l3_vpn_ospf_area_id}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"interfaces\": {\n                \"interface\": [\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface2}}\"\n                    },\n                    {\n                        \"id\": \"{{l3_vpn_ospf_interface}}\"\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"{{l3_vpn_ospf_ni_name}}\",\n                \"type\": \"frinx-openconfig-network-instance-types:L3VRF\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf1 config  name = \" + pm.environment.get(\"l3_vpn_ospf_instance_2_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_2_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf1 name = \" + pm.environment.get(\"l3_vpn_ospf_instance_2_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_2_name\"));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_router_id2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_router_id2\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface config id = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface  id = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface2 config id = \" + pm.environment.get(\"l3_vpn_ospf_interface2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface2\"));",
											"});",
											"//id",
											"pm.test(\"Validate interface2 id = \" + pm.environment.get(\"l3_vpn_ospf_interface2\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface2\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_ospf_area_id\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_ospf_area_id\")));",
											"});",
											"//name",
											"pm.test(\"Validate ospf2 config name = \" + pm.environment.get(\"l3_vpn_ospf_instance_3_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_3_name\"));",
											"});",
											"//name",
											"pm.test(\"Validate ospf2 name = \" + pm.environment.get(\"l3_vpn_ospf_instance_3_name\"), function() {",
											"  pm.expect(pm.response.json()[\"network-instance\"][0][\"protocols\"][\"protocol\"][1][\"name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_instance_3_name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5115240-27d3-4554-ab66-4a1e2be2c4c6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted removed OSPF VRF + ospf 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e9a7d87-4ae8-4842-b738-3a7ef99e3e44",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_ni_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_ni_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f69b9c2a-c367-4832-b2f9-eebba1711b65",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5428dde3-e717-4d9c-a92f-a243545f2c9e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cad1b92a-0751-446e-b8d6-fdaded5263a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured BGP global",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + \"default\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
											"});",
											"//router-id",
											"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + '/' + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OSPF  global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a4f6962-7421-491f-b3dd-e3ad44f74c69",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"{{l3_vpn_ospf_instance_1_name}}\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"{{l3_vpn_ospf_instance_1_name}}\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"{{l3_vpn_router_id}}\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{l3_vpn_ospf_area_id}},\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{l3_vpn_ospf_interface}}\",\n                                        \"config\": {\n                                        \t\"id\": \"{{l3_vpn_ospf_interface}}\",\n                                            \"metric\": {{l3_vpn_ospf_metric}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": {{l3_vpn_ospf_area_id}}\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show OSPF global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d066d6e3-286b-45a4-aa90-9612c4e65fec",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\")",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 name is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_instance_1_name\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 router id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_router_id\"))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"l3_vpn_ospf_area_id\")))",
											"});",
											"",
											"",
											"pm.test(\"Verify the   Verify OSPF global instance 1 area interface id is present\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_interface\"))",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55f64af9-0416-4ee0-be9f-f6d6a30e97e7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table-connections\": {\n        \"table-connection\": [\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \t\"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"src-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\"\n\n            },\n            {\n                \"config\": {\n                    \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                    \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\",\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \t\"import-policy\": [\"PASS_ALL\"]\n                },\n                \"address-family\": \"frinx-openconfig-types:IPV4\",\n                \"src-protocol\": \"{{l3_vpn_bgp_table_policy}}\",\n                \"dst-protocol\": \"{{l3_vpn_ospf_table_policy}}\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe91f8c9-8bd9-4307-aab6-d78b85d0ef68",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify the  table-connections contains src-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][0][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"pm.test(\"Verify the  table-connections contains src-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"src-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_bgp_table_policy\"))",
											"});",
											"",
											"pm.test(\"Verify the  table-connections contains dst-protocol2\", function () { ",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData[\"network-instance\"][0][\"table-connections\"][\"table-connection\"][1][\"dst-protocol\"]).to.eql(postman.getEnvironmentVariable(\"l3_vpn_ospf_table_policy\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OSPF  global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de725746-776b-4b4a-85e2-d7025d923146",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"888\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"888\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"config\": {\n                        \"router-id\": \"88.88.88.89\"\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 909,\n                            \"config\": {\n                                \"identifier\": 909\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF global 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92cb50fe-de8a-404c-a13e-282dac95adcc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/888",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"888"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF <-> BGP redis",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bf41e3f-be53-4712-be8a-b633a87ecdcc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/table-connections",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"table-connections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BGP global for OSPF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91db9438-e55b-4ebc-a01d-c482cf93e840",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete global OSPF1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffb857c1-ff18-4313-8243-6928f83a6c94",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{l3_vpn_ospf_instance_1_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{l3_vpn_ospf_instance_1_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OSPF VRF + ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db725dd6-371a-4795-9443-9313007fd2ad",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l3_vpn_ospf_instance_3_name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l3_vpn_ospf_instance_3_name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}