{
	"info": {
		"_postman_id": "461331e5-0c32-4129-b5af-dbe9a11cb1a6",
		"name": "pc_uniconfig_RPC_netconf_dryrun",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "configure ETH IFC",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{eth_intf-id}}\ndescription testing interface\nno shutdown\ncommit\nend\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync-from-network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"pm.test(\"Validate configuration-status\", function() {",
									"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
									"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
									"",
									"  }",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"    pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "replace config with operational",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate result\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						}
					},
					"response": []
				},
				{
					"name": "create empty interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "netconf dry-run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"pm.test(\"dryrun - overall-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "interface commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"",
									"pm.test(\"Validate overall-configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"    pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "show cleaned empty interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate enabled\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
									"});",
									"/* -- see MCCAS-40",
									"pm.test(\"Validate description\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
									"});",
									"*/",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"pm.test(\"Validate mtu\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"Subinterface not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
									"});",
									"",
									"pm.test(\"Statistics not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
									"});",
									"",
									"pm.test(\"Ethernet not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
									"});",
									"",
									"pm.test(\"Damping not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
									"});",
									"",
									"pm.test(\"Validate hold-time presence\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create subinterface ip",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}",
								"subinterfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "netconf dry-run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"dryrun - subinterface IP\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"address\");",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
									"});",
									"",
									"",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"dryrun - subintrface IP\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(\"address\");",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "create commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"",
									"pm.test(\"Validate overall-configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"    pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "show created subinterface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate enabled\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
									"});",
									"pm.test(\"Validate description\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"pm.test(\"Validate mtu\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"Subinterface not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
									"});",
									"",
									"pm.test(\"Statistics not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
									"});",
									"",
									"pm.test(\"Ethernet not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
									"});",
									"",
									"pm.test(\"Damping not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
									"});",
									"",
									"pm.test(\"Validate hold-time presence\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
									"});",
									"",
									"",
									"pm.test(\"Validate ip\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
									"});",
									"pm.test(\"Validate ip\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
									"});",
									"pm.test(\"Validate prefix-length\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update subinterface ip",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}",
								"subinterfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "netconf dry-run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - operation replace interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"replace\\\"\");",
									"});",
									"pm.test(\"dryrun - subintrface IP\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"address\");",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
									"",
									"",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - operation replace interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"replace\\\"\");",
									"",
									"});",
									"pm.test(\"dryrun - subintrface IP\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(\"address\");",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "update commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"",
									"pm.test(\"Validate overall-configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"    pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "show updated subinterface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate enabled\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
									"});",
									"pm.test(\"Validate description\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"pm.test(\"Validate mtu\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"Subinterface not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
									"});",
									"",
									"pm.test(\"Statistics not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
									"});",
									"",
									"pm.test(\"Ethernet not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
									"});",
									"",
									"pm.test(\"Damping not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
									"});",
									"",
									"pm.test(\"Validate hold-time presence\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
									"});",
									"",
									"",
									"pm.test(\"Validate ip\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
									"});",
									"pm.test(\"Validate ip\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
									"});",
									"pm.test(\"Validate prefix-length\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete subinterface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"config",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}",
								"subinterfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "netconf dry-run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - operation delete interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"delete\\\"\");",
									"",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - node-id\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"pm.test(\"dryrun - configuration status\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"dryrun - operation delete interface name\", function() {",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.contain(\"a:operation=\\\"delete\\\"\");",
									"",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
									"",
									"pm.test(\"Validate overall-configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}",
									"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
									"    pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate configuration-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});",
									"pm.test(\"Validate node-id\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operations",
								"uniconfig-manager:commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "show empty subinterface",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate enabled\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
									"});",
									"pm.test(\"Validate description\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"pm.test(\"Validate mtu\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
									"});",
									"pm.test(\"Validate name\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
									"});",
									"",
									"pm.test(\"Subinterface not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
									"});",
									"",
									"pm.test(\"Statistics not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
									"});",
									"",
									"pm.test(\"Ethernet not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
									"});",
									"",
									"pm.test(\"Damping not present\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
									"});",
									"",
									"pm.test(\"Validate hold-time presence\", function() {",
									"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"restconf",
								"operational",
								"network-topology:network-topology",
								"topology",
								"uniconfig",
								"node",
								"{{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces",
								"interface",
								"{{eth_url_intf-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}