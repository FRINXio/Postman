{
	"info": {
		"_postman_id": "e46b079b-6586-41a2-8a9d-822a599eafd5",
		"name": "pc_unified_l2p2p",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"description": "",
			"item": [
				{
					"name": "L2P2P connection CRUD",
					"description": null,
					"item": [
						{
							"name": "L2P2P connection CRUD locifc-remote",
							"description": null,
							"item": [
								{
									"name": "Create Loc To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created loc to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 remote\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate remote-system\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Sub To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip2}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated sub to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 remote\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip2\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate remote-system\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip2\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete connection ltr",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD locifc-sub",
							"description": null,
							"item": [
								{
									"name": "Create Subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created subinterface lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c42cefb8-ce14-4a1d-8d63-592b043a2241",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vlan_id\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Loc To Sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\",\n\t                        \"subinterface\" : {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created loc to sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface2\") ){",
													"    console.log(\"G3\")",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Connection lts",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD locsub-remote",
							"description": null,
							"item": [
								{
									"name": "Create Subinterface str",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created subinterface str",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34e86ef4-e904-45d7-be90-b4d3d7a2d9a4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vlan_id\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Sub To Remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\",\n\t                        \"subinterface\" : {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created sub to rem",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });    ",
													"    ",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Connection str",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "L2P2P connection CRUD Negative",
							"description": null,
							"item": [
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface3url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n          \"config\" : {\n            \"index\": {{l2p2p_show_sub_interface_index}},\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : {{l2p2p_vlan_id}}\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface3url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\") + '.' + pm.environment.get(\"l2p2p_show_sub_interface_index\"));",
													"});",
													"",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate vlan-id\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"config\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});",
													"pm.test(\"Validate index\", function() {",
													"  pm.expect(pm.response.json()[\"subinterface\"][0][\"state\"][\"index\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface3url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name2}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name2}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"network-instance\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['state']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['remote']['state']['remote-system'] === postman.getEnvironmentVariable(\"l2p2p_show_remoteip\");",
													"    } else {",
													"        tests[\"Validate endpoint 1 interface\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][1]['endpoints']['endpoint'][0]['local']['state']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface3\");",
													"        tests[\"Validate endpoint 2 remote\"] = jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['remote']['state']['remote-system'] === postman.getEnvironmentVariable(\"l2p2p_show_remoteip\");",
													"    }",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Connection still not up! Too many attempts !\")",
													"        tests[\"Connection not removed\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Connection not created yet! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created connection');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Used interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n   \t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip2}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete valid connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Three connection points",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface2}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\",\n\t                        \"subinterface\": {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"3\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"3\"\n\t              },\n   \t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"{{l2p2p_show_remoteip}}\",\n\t                        \"virtual-circuit-identifier\": {{l2p2p_vccid}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Interface with ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.warn(\"// FIXME this returns 200 instead of returning 500\")",
													"//console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Expected PUT failure\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"*/"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"postman.setNextRequest('TEARDOWN: Delete Subinterface neg');"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"frinx-openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"{{l2p2p_ni_name1}}\",\n\t        \"config\": {\n\t          \"name\": \"{{l2p2p_ni_name1}}\",\n\t          \"type\": \"frinx-openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface1}}\"\n\t                        }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"{{l2p2p_endpoint_id}}\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"frinx-openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"{{l2p2p_show_interface3}}\",\n\t                        \"subinterface\": {{l2p2p_show_sub_interface_index}}\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface3url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface3url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR L2P2P connection CRUD",
			"description": null,
			"item": [
				{
					"name": "XR L2P2P connection CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Delete previous Subinterface lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns 200 instead of returning 404 for non existing IP\")",
											"",
											"/*",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted subinterface lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous Connection lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"//MU-268 FIXME this ends sometimes with status 500 instead of returning 200\")",
											"",
											"/*",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l2p2p_ni_name1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loc to sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l2p2p_ni_name1}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L2P2P connection CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "Delete Subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns 500 instead of returning 404 for non existing IP\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"/*",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"*/"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface3url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface3url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR L2P2P connection READERS",
					"description": null,
					"item": [
						{
							"name": "locifc-remote",
							"description": null,
							"item": [
								{
									"name": "Configure locifc",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface3}}\nl2transport\nexit\nexit \nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\nneighbor ipv4 {{l2p2p_show_remoteip}} pw-id {{l2p2p_vccid}}\nexit\ninterface {{l2p2p_show_interface3}}\ncommit\nexit\nexit\nexit\nend\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured locifc",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL') {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 remote\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate remote-system\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate virtual-circuit-identifier\", function() {",
													"        pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface3}}\nno l2transport\nexit\nno l2vpn\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted xconnect locif to remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "locifc-sub",
							"description": null,
							"item": [
								{
									"name": "Delete previous subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\nend\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure Locifc to Sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface3}}\nl2transport\nexit\nexit\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nencapsulation dot1q {{l2p2p_vlan_id}}\nrewrite ingress tag pop 1 symmetric\nexit\nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\ninterface {{l2p2p_show_interface3}}\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\nexit\nexit\nexit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured Locif to Sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['local']['config']['interface'] === postman.getEnvironmentVariable(\"l2p2p_show_interface2\") ){",
													"    console.log(\"G3\")",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface3\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete connect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nno l2vpn \ninterface {{l2p2p_show_interface3}}\nno l2transport \ncommit\nexit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted connect locif",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "locsub-remote",
							"description": null,
							"item": [
								{
									"name": "Delete previouse subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\n     commit\n     end\"\n  }\n}\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{l2p2p_show_interface2url}}",
												"subinterfaces",
												"subinterface",
												"{{l2p2p_show_sub_interface_index}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure Locsub to remote",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nencapsulation dot1q {{l2p2p_vlan_id}}\nrewrite ingress tag pop 1 symmetric\nexit \nl2vpn \nxconnect group frinx\np2p {{l2p2p_ni_name1}}\nneighbor ipv4 {{l2p2p_show_remoteip}} pw-id {{l2p2p_vccid}}\nexit\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\ncommit\nexit\nexit\nexit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured Locsub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_ni_name1\"));",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( jsonData['network-instance'][0]['connection-points']['connection-point'][0]['endpoints']['endpoint'][0]['config']['type'] === 'frinx-openconfig-network-instance-types:LOCAL' ) {",
													"",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });    ",
													"    ",
													"} else {",
													"    pm.test(\"Validate endpoint 1 interface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l2p2p_show_interface2\"));",
													"    });",
													"    pm.test(\"Validate endpoint 1 subinterface\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"subinterface\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_sub_interface_index\")));",
													"    });",
													"",
													"    pm.test(\"Validate endpoint 2 remote-system\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"    });",
													"    pm.test(\"Validate endpoint 2 virtual-circuit-identifier\", function() {",
													"      pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_vccid\")));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}} l2transport \nno l2vpn\ncommit\nend\"\n  }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted xconnect locsub",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_ni_name1}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Classic L2P2P connection CRUD",
			"description": null,
			"item": [
				{
					"name": "Classic L2P2P connection CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "Delete previous Subinterface lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4965c2b6-9078-46fa-9b3c-687b5f341f16",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted subinterface lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd054359-b8f3-4b41-b4b4-5e90fff51215",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subinterface\": [\n        {\n            \"index\": 44,\n          \"config\" : {\n            \"index\": 44,\n            \"enabled\": \"true\"\n          },\n          \"openconfig-vlan:vlan\" : {\n            \"config\" : {\n              \"vlan-id\" : 44\n            }\n          }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete previous Connection lts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acd105ec-7019-4349-9785-eabbd2f8f8a0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l2p2p_ni_name1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted loc to sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"if (responseCode.code === 404) {",
											"    tests[\"Connection removed\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Connection still present! Too many attempts !\")",
											"        console.warn(\"// FIXME this returns data instead of returning 404\")",
											"        //tests[\"Connection not removed\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Connection not removed yet! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show deleted loc to sub');",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\t{\n\t    \"openconfig-network-instance:network-instance\": [\n\t      {\n\t        \"name\": \"conn1233\",\n\t        \"config\": {\n\t          \"name\": \"conn1233\",\n\t          \"type\": \"openconfig-network-instance-types:L2P2P\"\n\t        },\n\t        \"connection-points\": {\n\t          \"connection-point\": [\n\t            {\n\t              \"connection-point-id\": \"1\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"1\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:LOCAL\"\n\t                    },\n\t                    \"local\": {\n\t                      \"config\": {\n\t                        \"interface\": \"GigabitEthernet2/0\"\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            },\n\t            {\n\t              \"connection-point-id\": \"2\",\n\t              \"config\": {\n\t                \"connection-point-id\": \"2\"\n\t              },\n\t              \"endpoints\": {\n\t                \"endpoint\": [\n\t                  {\n\t                    \"endpoint-id\": \"default\",\n\t                    \"config\": {\n\t                      \"endpoint-id\": \"default\",\n\t                      \"precedence\": 0,\n\t                      \"type\": \"openconfig-network-instance-types:REMOTE\"\n\t                    },\n\t                    \"remote\": {\n\t                      \"config\": {\n\t                        \"remote-system\": \"1.1.1.1\",\n\t                        \"virtual-circuit-identifier\": 123\n\t                      }\n\t                    }\n\t                  }\n\t                ]\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n\t    ]\n\t  \n\t}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_ni_name1}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{l2p2p_ni_name1}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L2P2P connection CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "Delete Subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6d3c860-5593-4cfa-bda2-7ed8cc1a06e3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{l2p2p_show_interface2url}}/subinterfaces/subinterface/{{l2p2p_show_sub_interface_index}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{l2p2p_show_interface2url}}",
										"subinterfaces",
										"subinterface",
										"{{l2p2p_show_sub_interface_index}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic L2P2P connection READERS",
					"description": null,
					"item": [
						{
							"name": "locifc-remote",
							"description": null,
							"item": [
								{
									"name": "Configure xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n pseudowire-class {{l2p2p_show_networkinstance}}\n  encapsulation mpls\n  exit\n interface {{l2p2p_show_interface2}}\n  xconnect {{l2p2p_show_remoteip}} {{l2p2p_show_remotevccid}} pw-class {{l2p2p_show_networkinstance}}\n   exit\n  exit\n exit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l2p2p_show_networkinstance\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_networkinstance\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l2p2p_show_networkinstance\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_networkinstance\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"l2p2p_show_networkinstance\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"l2p2p_show_networkinstance\"));",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//virtual-circuit-identifier",
													"pm.test(\"Validate virtual-circuit-identifier = \" + pm.environment.get(\"l2p2p_show_remotevccid\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"state\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_remotevccid\")));",
													"});",
													"//remote-system",
													"pm.test(\"Validate remote-system = \" + pm.environment.get(\"l2p2p_show_remoteip\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"state\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"});",
													"//virtual-circuit-identifier",
													"pm.test(\"Validate virtual-circuit-identifier = \" + pm.environment.get(\"l2p2p_show_remotevccid\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"virtual-circuit-identifier\"]).to.eql(JSON.parse(pm.environment.get(\"l2p2p_show_remotevccid\")));",
													"});",
													"//remote-system",
													"pm.test(\"Validate remote-system = \" + pm.environment.get(\"l2p2p_show_remoteip\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"remote\"][\"config\"][\"remote-system\"]).to.eql(pm.environment.get(\"l2p2p_show_remoteip\"));",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"state\"][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"config\"][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//type",
													"pm.test(\"Validate type\", function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][0][\"endpoints\"][\"endpoint\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-network-instance-types:REMOTE\");",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"state\"][\"interface\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"l3_vpn_ospf_interface\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"local\"][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_interface\"));",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"state\"][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \" + pm.environment.get(\"l3_vpn_network_types_LOCAL\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"state\"][\"type\"]).to.eql(pm.environment.get(\"l3_vpn_network_types_LOCAL\"));",
													"});",
													"//endpoint-id",
													"pm.test(\"Validate endpoint-id = \" + pm.environment.get(\"l2p2p_endpoint_id\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"config\"][\"endpoint-id\"]).to.eql(pm.environment.get(\"l2p2p_endpoint_id\"));",
													"});",
													"//type",
													"pm.test(\"Validate type\" + pm.environment.get(\"l3_vpn_network_types_LOCAL\"), function() {",
													"  pm.expect(pm.response.json()[\"network-instance\"][0][\"connection-points\"][\"connection-point\"][1][\"endpoints\"][\"endpoint\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"l3_vpn_network_types_LOCAL\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_show_networkinstance}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}\nno xconnect\nexit\nno pseudowire-class {{l2p2p_show_networkinstance}}\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_show_networkinstance}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "locsub-remote",
							"description": null,
							"item": [
								{
									"name": "Delete previous subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "875ba740-7ebf-4b92-8594-d03ba23f76c7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nencapsulation dot1Q {{l2p2p_vlan_id}}\nxconnect {{l2p2p_show_remoteip}} {{l2p2p_show_remotevccid}} encapsulation mpls\nexit\nexit\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show network instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var mystring = \"\\\"name\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_interface2\")) + \".\" + String(postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\")) + \" xconnect \" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\"));",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"remote-system\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\")) + \"\\\"\";",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"virtual-circuit-identifier\":' + postman.getEnvironmentVariable(\"l2p2p_show_remotevccid\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nno xconnect\nno encapsulation dot1Q\nexit\nno interface {{l2p2p_show_interface2}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var mystring = \"\\\"name\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_interface2\")) + \".\" + String(postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\")) + \" xconnect \" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\"));",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													"var mystring = \"\\\"remote-system\\\":\\\"\" + String(postman.getEnvironmentVariable(\"l2p2p_show_remoteip\")) + \"\\\"\";",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													"var mystring = '\"virtual-circuit-identifier\":' + postman.getEnvironmentVariable(\"l2p2p_show_remotevccid\");",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "locifc-sub",
							"description": null,
							"item": [
								{
									"name": "Delete previous subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4f5937b-7792-4671-912b-43a1b406e1c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nencapsulation dot1Q {{l2p2p_vlan_id}}\nexit\nconnect {{l2p2p_show_networkinstance}} {{l2p2p_show_interface2}} {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}} interworking ethernet\nexit\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show configured xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var mystring = '\"name\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_networkinstance\") + '\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"interface\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_interface2\") + '\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"interface\":\"' + postman.getEnvironmentVariable(\"l2p2p_show_interface3\") + '\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"subinterface\":' + postman.getEnvironmentVariable(\"l2p2p_show_sub_interface_index\") + '';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_show_networkinstance}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno connect {{l2p2p_show_networkinstance}}\nno interface {{l2p2p_show_interface3}}.{{l2p2p_show_sub_interface_index}}\nexit\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted xconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody);",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{l2p2p_show_networkinstance}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{l2p2p_show_networkinstance}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}