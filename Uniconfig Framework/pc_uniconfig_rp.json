{
	"info": {
		"_postman_id": "1ff30721-a534-4c12-b555-84cc55f2d91a",
		"name": "FRINX Uniconfig Routing Policy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5",
			"description": null,
			"item": [
				{
					"name": "XR5 RP CRUD READERS",
					"description": null,
					"item": [
						{
							"name": "Routing-Policy Single",
							"description": null,
							"item": [
								{
									"name": "Create prefix-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n  prefix-set {{rp_prefix_set}}\n  1.2.3.4/4 eq 5,\n  dddd:aaaa::/76 ge 4 le 88\nend-set\n!\ncommit\nend\n     \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create community-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n  community-set {{rp_community_set}}\n  45:*,\n  34:3,\n  *:*,\n  *:4545,\n  no-export,\n  no-advertise,\n  [54..55]:[1..7],\n  internet\nend-set\n!\ncommit\nend\n     \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create as-path",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n  as-path-set {{rp_as_path}}\n  neighbor-is '1.1',\n  passes-through '54',\n  originates-from '3243',\n  length eq 444,\n  unique-length eq 44,\n  ios-regex '*'\nend-set\n!\ncommit\nend\n     \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create route policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n  route-policy {{rp_policy}}\n  if destination in {{rp_prefix_set}} then\n    drop\n  elseif community matches-any {{rp_community_set}} then\n    set med 1\n    prepend as-path 123 3\n    done\n  elseif destination in {{rp_prefix_set}} and as-path in {{rp_as_path}} then\n    set med 2\n    done\n  else\n    set med 3\n    done\n  endif\nend-policy\n!\ncommit\nend\n     \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "rp sync-from-network1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate prefix-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db648d71-327c-4b1f-bc5a-f06f38bd3610",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate prefix-set length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
													"});",
													"pm.test(\"Validate nr of prefixes\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"prefixes\"][\"prefix\"].length).to.eql(2);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"prefix-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate community-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate community-set-name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"config\"][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
													"});",
													"pm.test(\"Validate community-set-name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets",
												"community-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate as-path",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Number of as-paths\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate as-path-set-name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
													"});",
													"pm.test(\"Validate as-path-set-name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
													"});",
													"pm.test(\"Validate ios-regex\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '*'\");",
													"});",
													"pm.test(\"Validate originates-from\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][1]).to.eql(\"originates-from '3243'\");",
													"});",
													"pm.test(\"Validate length eq 444\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][2]).to.eql(\"length eq 444\");",
													"});",
													"pm.test(\"Validate unique-length eq 44\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][3]).to.eql(\"unique-length eq 44\");",
													"});",
													"pm.test(\"Validate neighbor-is '1.1'\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][4]).to.eql(\"neighbor-is '1.1'\");",
													"});",
													"pm.test(\"Validate passes-through '54'\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][5]).to.eql(\"passes-through '54'\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets",
												"as-path-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate route policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Number of routing policies\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"pm.test(\"Validate number of statements\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(4);",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(1);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(123);",
													"});",
													"pm.test(\"Validate as-path-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(2);",
													"});",
													"",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(3);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete all",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy {{rp_policy}}\nno as-path-set {{rp_as_path}}\nno community-set {{rp_community_set}}\nno prefix-set {{rp_prefix_set}}\ncommit\nend\n     \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "rp sync-from-network2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate no route-policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate no community-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets",
												"community-sets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate no as-path",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"frinx-openconfig-bgp-policy:bgp-defined-sets",
												"as-path-sets",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate no prefix-set",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"defined-sets",
												"prefix-sets"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Routing-Policy Stream",
							"description": null,
							"item": [
								{
									"name": "Configure routing policy - 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "617f00b0-2b90-448a-a79c-99bbbd16dee1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\n     route-policy {{rp_policy}}\n  if as-path length le 44 then\n    drop\n  endif\nend-policy\n!\ncommit\nend\n    \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2e9951f-d6d4-4ea4-890c-50e636b247dc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//value",
													"pm.test(\"Validate value = 44\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(44);",
													"});",
													"pm.test(\"Validate operator LE = 44\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_LE\");",
													"});",
													"",
													"pm.test(\"Validate action reject\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"rp_policy\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"rp_policy\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"rp_policy\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(pm.environment.get(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba5a69f6-ff96-4a22-9070-f79a0b442f80",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  set local-preference 43\nend-policy\ncommit\nend\n    \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7cea440-cdfa-46b7-806c-0c9aa7a71ce8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Number of routing policies\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"//set-local-pref",
													"pm.test(\"Validate set-local-pref = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(43);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2548131b-0f98-4808-aecb-be0139d8a9a9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  apply allowAll\n  set community match-any\n  drop\nend-policy\ncommit\nend\n    \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13db7e2b-890d-4d1b-9457-fa0d9fda99b7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate call-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"allowAll\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate method\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"REFERENCE\");",
													"});",
													"pm.test(\"Validate community-set-ref\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"reference\"][\"config\"][\"community-set-ref\"]).to.eql(\"match-any\");",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  prepend as-path 23 4\nend-policy\ncommit\nend\n    \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e15d0a4c-878f-44c2-ba41-14a453d6b0aa",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(4);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(23);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\nend-policy\ncommit\nend\n    \"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fafa1c17-67b3-4bd0-a546-7bb4c7d0c0b8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Number of routing policies\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"//set-local-pref",
													"pm.test(\"Validate no aother settings\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0]).to.not.have.property(\"statements\")",
													"});",
													"",
													"\"statements\""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if destination in pset_name then\n    drop\n  elseif community matches-any cset_name then\n    set med 1\n    prepend as-path 123 3\n    done\n  elseif destination in pset_name and as-path in aset_name then\n    set med 2\n    done\n  else\n    set med 3\n    done\n  endif\nend-policy\ncommit\nend\n    \"\n  }\n}\n\n\n\n!\nroute-policy route_policy_4\n  if destination in pset_name then\n    drop\n  endif\n  if destination in pset_name2 then\n    drop\n  endif\nend-policy\n!\nroute-policy route_policy_5\nend-policy\n!\nroute-policy route_policy_31\n  if tag eq 44 then\n    if tag eq 55 then\n      done\n    endif\n    drop\n  endif\nend-policy\n!\nroute-policy route_policy_TMP\n  if destination in pset_name then\n    drop\n  endif\n  set label 44\n  drop\nend-policy\n!\nroute-policy route_policy_TMP2\n  set tag 4334\n  set tag 4334\n  # comment\n  if destination in pset_name then\n    drop\n  endif\n  apply allowAll\n  done\nend-policy\n!\nroute-policy big1\n  if destination in RFC1918-DSUA-out_deny then\n    drop\n  elseif community matches-any PEER-NOT-ADVERTISE then\n    drop\n  elseif community matches-any PEER-1PREPEND then\n    set med 100\n    prepend as-path 17676\n  elseif community matches-any PEER-2PREPEND then\n    set med 100\n    prepend as-path 17676 2\n  elseif community matches-any PEER-3PREPEND then\n    set med 100\n    prepend as-path 17676 3\n  elseif community matches-any Asia-PEER-NOT-ADVERTISE then\n    drop\n  elseif community matches-any Asia-PEER-1PREPEND then\n    set med 100\n    prepend as-path 17676\n  elseif community matches-any Asia-PEER-2PREPEND then\n    set med 100\n    prepend as-path 17676 2\n  elseif community matches-any Asia-PEER-3PREPEND then\n    set med 100\n    prepend as-path 17676 3\n  elseif destination in DENY_YBB_CIDR_long then\n    drop\n  elseif destination in YBB_CIDR and as-path in 2 then\n    set med 100\n  elseif destination in DENY_IPR_CIDR_long then\n    drop\n  elseif destination in IPR_CIDR and as-path in 2 then\n    set med 100\n  elseif community matches-any TRANSIT_MATCH or community matches-any PI_MATCH or community matches-any MultiAS-ODN-CIDR or community matches-any MultiAS-PI-ODN or community matches-any ODN-TRAN then\n    set med 100\n  endif\nend-policy\n!\nroute-policy simple_or\n  if destination in pset_name and community matches-any ab or community matches-any c or as-path in aset_name and destination in bset_name then\n    apply route_policy_TMP2\n    set community (44:4, 1:1, no-export) additive\n    set next-hop dead:beef::1\n    done\n  endif\nend-policy"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87ec8e13-d18b-44de-87a9-87e147df620f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(4);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"cset_name\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(1);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(123);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate as-path-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"aset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(2);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(3);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if destination in pset_name then\n    drop\n  endif\n  if destination in pset_name2 then\n    drop\n  endif\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network- 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba01f150-d2ea-489f-bd2b-d55751a47d42",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(2);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if tag eq 44 then\n    if tag eq 55 then\n      done\n    endif\n    drop\n  endif\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d238145-ecd3-4de4-a3e4-c689420ffc12",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Number of routing policies\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"// if tag blabla - is not suported, so add assertions once it is supported (see FI-197)",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 9",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if destination in pset_name then\n    drop\n  endif\n  set label 44\n  drop\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 9",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 9",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "372d21bc-49ae-45e5-85a9-6eb523cbac41",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of routing policies\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"",
													"",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"//prefix-set",
													"pm.test(\"Validate prefix-set = \" + pm.environment.get(\"pset_name\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"//match-set-options",
													"pm.test(\"Validate match-set-options = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"//policy-result",
													"pm.test(\"Validate policy-result = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"//policy-result",
													"pm.test(\"Validate policy-result = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"rp_policy\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"rp_policy\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"rp_policy\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(pm.environment.get(\"rp_policy\"));",
													"});",
													"",
													"//set label is not supported yet, add assetions once it is  (FI-198)",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  set tag 4334\n  set tag 4334\n  # comment\n  if destination in pset_name then\n    drop\n  endif\n  apply allowAll\n  done\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5df91a08-ebeb-470e-870d-c8c0c6029c2e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(2);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate call-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"allowAll\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"",
													"",
													"//set tag is not suported yet, add assertions once it is (FI-199)"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 11",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if destination in RFC1918-DSUA-out_deny then\n    drop\n  elseif community matches-any PEER-NOT-ADVERTISE then\n    drop\n  elseif community matches-any PEER-1PREPEND then\n    set med 100\n    prepend as-path 17676\n  elseif community matches-any PEER-2PREPEND then\n    set med 100\n    prepend as-path 17676 2\n  elseif community matches-any PEER-3PREPEND then\n    set med 100\n    prepend as-path 17676 3\n  elseif community matches-any Asia-PEER-NOT-ADVERTISE then\n    drop\n  elseif community matches-any Asia-PEER-1PREPEND then\n    set med 100\n    prepend as-path 17676\n  elseif community matches-any Asia-PEER-2PREPEND then\n    set med 100\n    prepend as-path 17676 2\n  elseif community matches-any Asia-PEER-3PREPEND then\n    set med 100\n    prepend as-path 17676 3\n  elseif destination in DENY_YBB_CIDR_long then\n    drop\n  elseif destination in YBB_CIDR and as-path in 2 then\n    set med 100\n  elseif destination in DENY_IPR_CIDR_long then\n    drop\n  elseif destination in IPR_CIDR and as-path in 2 then\n    set med 100\n  elseif community matches-any TRANSIT_MATCH or community matches-any PI_MATCH or community matches-any MultiAS-ODN-CIDR or community matches-any MultiAS-PI-ODN or community matches-any ODN-TRAN then\n    set med 100\n  endif\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 11",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 11",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d121e44-046b-4719-bbad-e42418be2d98",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(18);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"RFC1918-DSUA-out_deny\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate repeat-n\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
													"});",
													"pm.test(\"Validate asn\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_CIDR_long\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
													"});",
													"pm.test(\"Validate as-path-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_CIDR\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_CIDR_long\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
													"});",
													"pm.test(\"Validate as-path-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_CIDR\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRAN\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
													"});",
													"pm.test(\"Validate set-med\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure routing policy - 12",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nroute-policy {{rp_policy}}\n  if destination in pset_name and community matches-any ab or community matches-any c or as-path in aset_name and destination in bset_name then\n    apply route_policy_TMP2\n    set community (44:4, 1:1, no-export) additive\n    set next-hop dead:beef::1\n    done\n  endif\nend-policy\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - 12",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy - 12",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a59842ba-82c9-477c-9c35-2591a9f7db2f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
													"pm.test(\"Validate policy-definition\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
													"});",
													"pm.test(\"Validate statement\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(3);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate call-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ab\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"pset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
													"});",
													"pm.test(\"Validate communities\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
													"});",
													"pm.test(\"Validate options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
													"});",
													"pm.test(\"Validate method\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate call-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate community-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"c\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
													"});",
													"pm.test(\"Validate communities\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
													"});",
													"pm.test(\"Validate options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
													"});",
													"pm.test(\"Validate method\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate call-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
													"});",
													"pm.test(\"Validate as-path-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"aset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate prefix-set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"bset_name\");",
													"});",
													"pm.test(\"Validate match-set-options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
													"});",
													"pm.test(\"Validate policy-result\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
													"});",
													"pm.test(\"Validate set-next-hop\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
													"});",
													"pm.test(\"Validate communities\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
													"});",
													"pm.test(\"Validate \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
													"});",
													"pm.test(\"Validate options\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
													"});",
													"pm.test(\"Validate method\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove routing policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c29408-50ba-4067-9889-79b4341fb189",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{rp_policy}}\n     commit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync-from-network - remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"  }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate policy removed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6453b12b-8b0e-4245-b9f1-b8d064981fb4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-routing-policy:routing-policy",
												"policy-definitions"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RP CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"prefix-set\": [\n            {\n                \"name\": \"{{rp_prefix_set}}\",\n                \"prefixes\": {\n                    \"prefix\": [\n                        {\n                            \"ip-prefix\": \"dddd:aaaa::/76\",\n                            \"masklength-range\": \"4..88\",\n                            \"config\": {\n                                \"masklength-range\": \"4..88\",\n                                \"ip-prefix\": \"dddd:aaaa::/76\"\n                            }\n                        },\n                        {\n                            \"ip-prefix\": \"1.2.3.4/4\",\n                            \"masklength-range\": \"5..5\",\n                            \"config\": {\n                                \"masklength-range\": \"5..5\",\n                                \"ip-prefix\": \"1.2.3.4/4\"\n                            }\n                        }\n                    ]\n                },\n                \"config\": {\n                    \"name\": \"{{rp_prefix_set}}\"\n                }\n            }\n        ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets/prefix-set/{{rp_prefix_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets",
										"prefix-set",
										"{{rp_prefix_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"community-set\": [\n            {\n                \"community-set-name\": \"{{rp_community_set}}\",\n                \"config\": {\n                    \"community-set-name\": \"{{rp_community_set}}\"\n                }\n            }\n        ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets/community-set/{{rp_community_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets",
										"community-set",
										"{{rp_community_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"as-path-set\": [\n            {\n                \"as-path-set-name\": \"{{rp_as_path}}\",\n                \"config\": {\n                    \"as-path-set-member\": [\n                        \"ios-regex '*'\",\n                        \"originates-from '3243'\",\n                        \"length eq 444\",\n                        \"unique-length eq 44\",\n                        \"neighbor-is '1.1'\",\n                        \"passes-through '54'\"\n                    ],\n                    \"as-path-set-name\": \"{{rp_as_path}}\"\n                }\n            }\n       ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/as-path-set/{{rp_as_path}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										"as-path-set",
										"{{rp_as_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit rp setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate prefix-set length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate nr of prefixes\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"prefixes\"][\"prefix\"].length).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate community-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"config\"][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"pm.test(\"Validate community-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40ed73f3-14a7-4bae-b06f-aab91fb93030",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of as-paths\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate as-path-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate as-path-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate ios-regex\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"ios-regex '*'\");",
											"});",
											"pm.test(\"Validate originates-from\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"originates-from '3243'\");",
											"});",
											"pm.test(\"Validate length eq 444\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"length eq 444\");",
											"});",
											"pm.test(\"Validate unique-length eq 44\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"unique-length eq 44\");",
											"});",
											"pm.test(\"Validate neighbor-is '1.1'\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"neighbor-is '1.1'\");",
											"});",
											"pm.test(\"Validate passes-through '54'\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"]).to.include(\"passes-through '54'\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RP CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets/prefix-set/{{rp_prefix_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets",
										"prefix-set",
										"{{rp_prefix_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets/community-set/{{rp_community_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets",
										"community-set",
										"{{rp_community_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/as-path-set/{{rp_as_path}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										"as-path-set",
										"{{rp_as_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit rp teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no prefix sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no community sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no as-path sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "RP CRUD",
					"description": null,
					"item": [
						{
							"name": "create rouring policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n            \"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"{{rp_community_set}}\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 3,\n                                        \"asn\": 123\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 1\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"{{rp_as_path}}\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 2\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"4\",\n                        \"config\": {\n                            \"name\": \"4\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 3\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feb53157-1873-4ef0-98df-ed41f61c6a79",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains  if destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains    set med 2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set med 2\");",
											"    });",
											"    pm.test('dryrun - contains  set med 3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" set med 3\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in as_path_1 and destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in as_path_1 and destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    set med 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set med 1\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any community_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any community_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"    pm.test('dryrun - contains    done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a5fed1-66ce-4276-b3bb-9501fa87a633",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(4);",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(1);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(123);",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(3);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n          \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"ACCEPT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2ab82a-f1c8-47a8-88c4-cb5b9d4e6b60",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1740b061-a410-456e-948b-0b1633fd7be9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 23\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efce2519-f705-4395-8dfd-01e6f7faa1fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1f057ec-4685-476e-9498-de775bc95505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(23);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 rouring policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"{{rp_prefix_set}}\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"ACCEPT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1394973-44d1-4f2a-a0ca-97be3a23dc07",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains  if destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c91d69f3-4afb-4891-968a-b64b87db9048",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 15 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 15000);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b74ec00-0293-4bea-88d6-2bb5378b0e8e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
											"pm.test(\"Validate policy-definition\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate statement\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"prefix_set_1\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 44,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_LE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0654ca71-74a5-4300-b185-2b00dd355b2f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  if as-path length le 44 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if as-path length le 44 then\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7899ba5-2fe9-4368-92ea-96b703680331",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 15 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 15000);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"",
											"pm.test(\"Validate operator\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_LE\");",
											"});",
											"pm.test(\"Validate value\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(44);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\t\"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"ab\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-next-hop\": \"dead:beef::1\"\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"c\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-next-hop\": \"dead:beef::1\"\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"bset_name\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"aset_name\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-next-hop\": \"dead:beef::1\"\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76c007e1-3ba5-4377-b968-dbbee1797ed8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains    apply route_policy_TMP2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   apply route_policy_TMP2\");",
											"    });",
											"    pm.test('dryrun - contains    set community (44:4, 1:1) additive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set community (44:4, 1:1) additive\");",
											"    });",
											"    pm.test('dryrun - contains    set next-hop dead:beef::1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set next-hop dead:beef::1\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any c then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any c then\");",
											"    });",
											"    pm.test('dryrun - contains    done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  if community matches-any ab and destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if community matches-any ab and destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in aset_name and destination in bset_name then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in aset_name and destination in bset_name then\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e83f80-e189-4046-ac7e-eac8fb8a3449",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0eebc4a1-8a67-431a-9e20-5c068f879848",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
											"pm.test(\"Validate policy-definition\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate statement\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(3);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ab\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"prefix_set_1\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-next-hop\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"c\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-next-hop\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"aset_name\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"bset_name\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-next-hop\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"dead:beef::1\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update6 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\t\"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"rp_prefix_set\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"ab\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"c\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"bset_name\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"aset_name\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update6 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4847d851-5b61-48d7-8b9c-44cb17845dc2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains    apply route_policy_TMP2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   apply route_policy_TMP2\");",
											"    });",
											"    pm.test('dryrun - contains    set community (44:4, 1:1) additive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set community (44:4, 1:1) additive\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any c then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any c then\");",
											"    });",
											"    pm.test('dryrun - contains    done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  if community matches-any ab and destination in rp_prefix_set then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if community matches-any ab and destination in rp_prefix_set then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in aset_name and destination in bset_name then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in aset_name and destination in bset_name then\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e83f80-e189-4046-ac7e-eac8fb8a3449",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update6 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66dae4fb-107a-47df-b8d6-de1e4732b76e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
											"pm.test(\"Validate policy-definition\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate statement\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(3);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ab\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"rp_prefix_set\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"c\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"aset_name\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"bset_name\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate communities\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"].length).to.eql(2);",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"44:4\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"1:1\");",
											"});",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update7 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\t\"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"rp_prefix_set\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"PEER-NOT-ADVERTISE\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"PEER-1PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"4\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"PEER-2PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"4\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 2,\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"5\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"PEER-3PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"5\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 3,\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"6\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"Asia-PEER-NOT-ADVERTISE\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"6\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"7\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"Asia-PEER-1PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"7\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"8\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"Asia-PEER-2PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"8\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 2,\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"9\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"Asia-PEER-3PREPEND\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"9\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 3,\n                                        \"asn\": 17676\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"10\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"DENY_YBB_CIDR_long\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"10\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"11\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"YBB_CIDR\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"2\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"11\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"12\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"DENY_IPR_CIDR_long\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"12\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"13\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"IPR_CIDR\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"2\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"13\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"14\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"TRANSIT_MATCH\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"14\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"15\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"PI_MATCH\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"15\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"16\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"MultiAS-ODN-CIDR\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"16\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"17\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"MultiAS-PI-ODN\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"17\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"18\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"ODN-TRAN\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"18\"\n                        },\n                        \"actions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 100\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update7 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceedea03-6028-4191-ae50-26cc89f8381a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in 2 and destination in YBB_CIDR then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in 2 and destination in YBB_CIDR then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif destination in DENY_IPR_CIDR_long then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif destination in DENY_IPR_CIDR_long then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any MultiAS-ODN-CIDR then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any MultiAS-ODN-CIDR then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any TRANSIT_MATCH then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any TRANSIT_MATCH then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any Asia-PEER-1PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any Asia-PEER-1PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains    set med 100', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set med 100\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any Asia-PEER-NOT-ADVERTISE then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any Asia-PEER-NOT-ADVERTISE then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any ODN-TRAN then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any ODN-TRAN then\");",
											"    });",
											"    pm.test('dryrun - contains  if destination in rp_prefix_set then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if destination in rp_prefix_set then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in 2 and destination in IPR_CIDR then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in 2 and destination in IPR_CIDR then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any Asia-PEER-3PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any Asia-PEER-3PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any PEER-2PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any PEER-2PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any PI_MATCH then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any PI_MATCH then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif destination in DENY_YBB_CIDR_long then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif destination in DENY_YBB_CIDR_long then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any PEER-NOT-ADVERTISE then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any PEER-NOT-ADVERTISE then\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any PEER-1PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any PEER-1PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any PEER-3PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any PEER-3PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any Asia-PEER-2PREPEND then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any Asia-PEER-2PREPEND then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any MultiAS-PI-ODN then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any MultiAS-PI-ODN then\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e83f80-e189-4046-ac7e-eac8fb8a3449",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update7 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4150ff0e-3f77-48b6-bc88-11e7a534f691",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//Use JSON.parse(postman.getEnvironmentVariable(variable name) where needed",
											"pm.test(\"Validate policy-definition\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate statement\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(18);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"rp_prefix_set\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_CIDR_long\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_CIDR\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_CIDR_long\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_CIDR\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRAN\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"route_policy_3\",\n            \"config\": {\n                \"name\": \"route_policy_3\"\n            },\n\t\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 44,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_LE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711f27c2-e33d-4f93-97bd-87a5e733b432",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains no route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35a3e102-248a-49cd-bd10-b230cefb5005",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 15 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 15000);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no routing policies present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}