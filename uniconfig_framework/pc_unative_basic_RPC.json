{
	"info": {
		"_postman_id": "51795081-4b8f-44fd-aa69-71942676838c",
		"name": "pc_unative_basic_RPC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prerequisites",
			"item": [
				{
					"name": "uniconfig health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate data created\", function() {",
									"    pm.expect(pm.response.json()[\"output\"][\"healthy\"]).to.eql(true);",
									"});",
									"pm.test(\"Validate DB\", function() {",
									"    pm.expect(pm.response.json()[\"output\"][\"message\"]).to.eql(\"DB connection is alive\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:health",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:health"
							]
						}
					},
					"response": []
				},
				{
					"name": "install xr6 by cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"xr6\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr_ip}}\",\n            \"cli-topology:port\": \"22\",\n            \"cli-topology:transport-type\": \"ssh\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"6.1.2\",\n            \"cli-topology:username\": \"cisco\",\n            \"cli-topology:password\": \"cisco\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:install-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config xr6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load disk0:/\"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload disk0:/initial_configuration.txt\ncommit replace\nyes\nend\n\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "uninstall xr6 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"xr6\",\n        \"connection-type\": \"cli\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:uninstall-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "uninstall xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"xr6\",\n        \"connection-type\": \"netconf\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:uninstall-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "uninstall Junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"connection-type\": \"netconf\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:uninstall-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"load complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "uninstall Junos cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"connection-type\": \"cli\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:uninstall-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "install xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"xr6\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{xr_ip}}\",\n            \"netconf-node-topology:port\": {{netconf_port}},\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"cisco\",\n            \"netconf-node-topology:password\": \"cisco\",\n            \"netconf-node-topology:dry-run-journal-size\": 180,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"uniconfig-config:sequence-read-active\": true,\n            \"uniconfig-config:blacklist\": {\n                \"uniconfig-config:path\": [\n                    \"openconfig-interfaces:interfaces\",\n                    \"ietf-interfaces:interfaces\",\n                    \"openconfig-vlan:vlans\",\n                    \"openconfig-routing-policy:routing-policy\"\n                ]\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:install-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "install Junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"netconf\": {\n            \"netconf-node-topology:host\": \"{{junos_ip}}\",\n            \"netconf-node-topology:port\": {{netconf_port}},\n            \"netconf-node-topology:keepalive-delay\": 0,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:dry-run-journal-size\": 100,\n            \"uniconfig-config:uniconfig-native-enabled\": true\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:install-node"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SNAPSHOT",
			"item": [
				{
					"name": "maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 2\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "create snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"pm.test(\"no iosxr loopback 1970\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"1970\");",
									"});",
									"",
									"pm.test(\"no junos loopback lo0\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			]
		},
		{
			"name": "Create interface XR6",
			"item": [
				{
					"name": "show all interfaces xr (blacklisted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show all interfaces xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"loopback 1970 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete interface XR6",
			"item": [
				{
					"name": "delete xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				}
			]
		},
		{
			"name": "Prepare interface then rollback",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Replace config datastore with snapshot",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create interface JUNOS",
			"item": [
				{
					"name": "UNICONFIG: actual uniconfig topology junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						},
						"description": "Reads actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show all interfaces junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"lo0\",\n            \"unit\": [\n                {\n                    \"name\": \"123\",\n                    \"description\": \"foo\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:fail\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
									"});",
									"",
									"pm.test(\"error: Max. no of snapshots exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"error-message\"]).to.contains(\"Maximum number of snapshots exceeded.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 4\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-lo0-loopback\");",
									"});",
									"",
									"pm.test(\"lo0.123 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete interface JUNOS",
			"item": [
				{
					"name": "junos interface add description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RPC for both devices",
			"item": [
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff XR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"junos deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"junos created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"iosxr created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"",
									"pm.test(\"junos deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});",
									"",
									"pm.test(\"iosxr deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data for device junos\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});",
									"",
									"pm.test(\"no data for device iosxr\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "uninstall IOS XR netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"xr6\",\n        \"connection-type\": \"netconf\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:uninstall-node"
							]
						}
					},
					"response": []
				},
				{
					"name": "Install Junos netconf and cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate complete\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"node-id\": \"{{node_id}}\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{junos_ip}}\",\n            \"cli-topology:port\": \"{{cli_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"junos\",\n            \"cli-topology:device-version\": \"{{version_device}}\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"uniconfig-config:uniconfig-native-enabled\": true,\n            \"uniconfig-config:install-uniconfig-node-enabled\": false\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"connection-manager:install-node"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}